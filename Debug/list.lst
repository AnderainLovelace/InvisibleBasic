SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 20-Jul-2013 09:45:02  PAGE    1

************ OBJECT LISTING ************

FILE NAME: E:\Anderain\fx-9860\InvisibleBasic\list.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          list.c     1    #include <stdlib.h>
          list.c     2    #include "list.h"
          list.c     3    
          list.c     4    void list_init (list * l)
P   00000000              _list_init:                      ; function: list_init
                                                           ; frame size=0
          list.c     5    {
          list.c     6            l->head = NULL;
    00000000 E500                   MOV         #0,R5
    00000002 2452                   MOV.L       R5,@R4
          list.c     7            l->last = NULL;
    00000004 1451                   MOV.L       R5,@(4,R4)
          list.c     8            l->size = 0;
          list.c     9    }
    00000006 000B                   RTS
    00000008 1452                   MOV.L       R5,@(8,R4)
          list.c    10    
          list.c    11    void list_destory (list * l)
    0000000A              _list_destory:                   ; function: list_destory
                                                           ; frame size=20
    0000000A 2FE6                   MOV.L       R14,@-R15
    0000000C 2FD6                   MOV.L       R13,@-R15
    0000000E 2FC6                   MOV.L       R12,@-R15
    00000010 2FB6                   MOV.L       R11,@-R15
    00000012 6B43                   MOV         R4,R11
    00000014 DD1D                   MOV.L       L271,R13   ; _free
    00000016 4F22                   STS.L       PR,@-R15
          list.c    12    {
          list.c    13            node *node1,*node2;
          list.c    14    
          list.c    15            node1 = l->head;
          list.c    16            
          list.c    17            while (node1)
    00000018 A006                   BRA         L267
    0000001A 6EB2                   MOV.L       @R11,R14
    0000001C              L268:                             
          list.c    18            {
          list.c    19                    node2 = node1;
    0000001C 6CE3                   MOV         R14,R12
          list.c    20                    node1 = node1->next ;
    0000001E 5EE1                   MOV.L       @(4,R14),R14
          list.c    21                    
          list.c    22                    free (node2->p);
    00000020 4D0B                   JSR         @R13
    00000022 64C2                   MOV.L       @R12,R4
          list.c    23                    free (node2);
    00000024 4D0B                   JSR         @R13
    00000026 64C3                   MOV         R12,R4
    00000028              L267:                             
    00000028 2EE8                   TST         R14,R14
    0000002A 8BF7                   BF          L268
          list.c    24            }
          list.c    25    
          list.c    26            l->head = l->last = NULL;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 20-Jul-2013 09:45:02  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000002C E400                   MOV         #0,R4
    0000002E 1B41                   MOV.L       R4,@(4,R11)
    00000030 2B42                   MOV.L       R4,@R11
          list.c    27            l->size = 0;
    00000032 1B42                   MOV.L       R4,@(8,R11)
          list.c    28    }
    00000034 4F26                   LDS.L       @R15+,PR
    00000036 6BF6                   MOV.L       @R15+,R11
    00000038 6CF6                   MOV.L       @R15+,R12
    0000003A 6DF6                   MOV.L       @R15+,R13
    0000003C 000B                   RTS
    0000003E 6EF6                   MOV.L       @R15+,R14
          list.c    29    
          list.c    30    void list_push (list * l,void * p)
    00000040              _list_push:                      ; function: list_push
                                                           ; frame size=16
    00000040 2FE6                   MOV.L       R14,@-R15
    00000042 6E43                   MOV         R4,R14
    00000044 2F86                   MOV.L       R8,@-R15
    00000046 4F22                   STS.L       PR,@-R15
    00000048 7FFC                   ADD         #-4,R15
    0000004A 2F52                   MOV.L       R5,@R15
          list.c    31    {
          list.c    32            if (l->size == 0)
    0000004C 53E2                   MOV.L       @(8,R14),R3
    0000004E 2338                   TST         R3,R3
    00000050 8B07                   BF          L269
          list.c    33            {
          list.c    34                    l->head                 = (node*)calloc(sizeof(node),1);
    00000052 E501                   MOV         #1,R5
    00000054 D30E                   MOV.L       L271+4,R3  ; _calloc
    00000056 430B                   JSR         @R3
    00000058 E408                   MOV         #8,R4
          list.c    35                    l->last                 = l->head;
    0000005A 6203                   MOV         R0,R2
    0000005C 2E02                   MOV.L       R0,@R14
    0000005E A00A                   BRA         L270
    00000060 1E01                   MOV.L       R0,@(4,R14)
    00000062              L269:                             
          list.c    36            }
          list.c    37            else
          list.c    38            {
          list.c    39                    l->last->next   = (node*)calloc(sizeof(node),1);
    00000062 E501                   MOV         #1,R5
    00000064 D30A                   MOV.L       L271+4,R3  ; _calloc
    00000066 58E1                   MOV.L       @(4,R14),R8
    00000068 7804                   ADD         #4,R8
    0000006A 430B                   JSR         @R3
    0000006C E408                   MOV         #8,R4
    0000006E 2802                   MOV.L       R0,@R8
          list.c    40                    l->last                 = l->last->next;
    00000070 53E1                   MOV.L       @(4,R14),R3
    00000072 5231                   MOV.L       @(4,R3),R2
    00000074 1E21                   MOV.L       R2,@(4,R14)
    00000076              L270:                             
          list.c    41            }
          list.c    42    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 20-Jul-2013 09:45:02  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          list.c    43            l->last->p = p;
    00000076 53E1                   MOV.L       @(4,R14),R3
    00000078 62F2                   MOV.L       @R15,R2
    0000007A 2322                   MOV.L       R2,@R3
          list.c    44    
          list.c    45            l->size ++;
    0000007C 53E2                   MOV.L       @(8,R14),R3
    0000007E 7301                   ADD         #1,R3
    00000080 1E32                   MOV.L       R3,@(8,R14)
          list.c    46    
          list.c    47    }
    00000082 7F04                   ADD         #4,R15
    00000084 4F26                   LDS.L       @R15+,PR
    00000086 68F6                   MOV.L       @R15+,R8
    00000088 000B                   RTS
    0000008A 6EF6                   MOV.L       @R15+,R14
    0000008C              L271:                             
    0000008C <00000000>             .DATA.L     _free
    00000090 <00000000>             .DATA.L     _calloc










































SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 20-Jul-2013 09:45:02  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:       47



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               00000094 Byte(s)
CONSTANT SECTION (C):                               00000000 Byte(s)
DATA     SECTION (D):                               00000000 Byte(s)
BSS      SECTION (B):                               00000000 Byte(s)

 TOTAL PROGRAM SIZE: 00000094 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:            2
NUMBER OF EXTERNAL DEFINITION SYMBOLS:           3
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:            10






























*** COMMAND PARAMETER ***


  -subcommand=C:\Users\ADMINI~1\AppData\Local\Temp\hmkD961.tmp 

