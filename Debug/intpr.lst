SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE    1

************ OBJECT LISTING ************

FILE NAME: E:\Anderain\fx-9860\InvisibleBasic\intpr.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         intpr.c     1    //#include <stdio.h>
         intpr.c     2    extern int sprintf(char*,const char*,...);
         intpr.c     3    
         intpr.c     4    #include <stdlib.h>
         intpr.c     5    #include <ctype.h>
         intpr.c     6    #include <string.h>
         intpr.c     7    #include <math.h>
         intpr.c     8    #include <fxlib.h>
         intpr.c     9    #include "intpr.h"
         intpr.c    10    #include "list.h"
         intpr.c    11    #include "file.h"
         intpr.c    12    #include "utils.h"
         intpr.c    13    #include "dconsole.h"
         intpr.c    14    
         intpr.c    15    extern void d_exit ();
         intpr.c    16    
         intpr.c    17    #define TRUE    1
         intpr.c    18    #define FALSE   0
         intpr.c    19    
         intpr.c    20    typedef struct
         intpr.c    21    {
         intpr.c    22            char *  name;
         intpr.c    23            real    value;
         intpr.c    24    }VAR;
         intpr.c    25    
         intpr.c    26    typedef struct
         intpr.c    27    {
         intpr.c    28            char *  name;
         intpr.c    29            real *  array;
         intpr.c    30            long    size;
         intpr.c    31    }
         intpr.c    32    ARRAY;
         intpr.c    33    
         intpr.c    34    //--------------------------------------------------------------------------------------
         intpr.c    35    // lexer part
         intpr.c    36    
         intpr.c    37    typedef enum
         intpr.c    38    {
         intpr.c    39            RES_SIN = 100,
         intpr.c    40            RES_COS         ,
         intpr.c    41            RES_TAN         ,
         intpr.c    42            RES_LOG         ,
         intpr.c    43            RES_EXP         ,
         intpr.c    44            RES_ABS         ,
         intpr.c    45            RES_CEIL        ,
         intpr.c    46            RES_FLOOR       ,
         intpr.c    47            RES_FMOD        ,
         intpr.c    48    }
         intpr.c    49    RESTOKEN;
         intpr.c    50    
         intpr.c    51    typedef enum
         intpr.c    52    {
         intpr.c    53            TT_LINE_END = 0,
         intpr.c    54            TT_COM, 




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         intpr.c    55            TT_ID,
         intpr.c    56            TT_INT,
         intpr.c    57            TT_FLOAT,
         intpr.c    58            TT_STRING,
         intpr.c    59            //TT_SEM,
         intpr.c    60            TT_LBK,
         intpr.c    61            TT_RBK,
         intpr.c    62    }
         intpr.c    63    TOKEN_TYPE;
         intpr.c    64    
         intpr.c    65    typedef enum
         intpr.c    66    {
         intpr.c    67            // binary operator
         intpr.c    68            OPR_MEM = 200,  // o.p
         intpr.c    69            OPR_ADD,                // a+b
         intpr.c    70            OPR_SUB,                // a-b
         intpr.c    71            OPR_MUL,                // a*b
         intpr.c    72            OPR_DIV,                // a/b
         intpr.c    73            OPR_POW,                // a^b
         intpr.c    74            OPR_BE,                 // a>=b
         intpr.c    75            OPR_BT,                 // a>b
         intpr.c    76            OPR_LE,                 // a<=b
         intpr.c    77            OPR_LT,                 // a<b
         intpr.c    78            OPR_EQ,                 // a=b
         intpr.c    79            OPR_NEQ,                // a<>b
         intpr.c    80            OPR_AND,                // a and b
         intpr.c    81            OPR_OR,                 // a or b
         intpr.c    82            // unary operator
         intpr.c    83            OPR_NEG,                // -a
         intpr.c    84            OPR_NOT,                // not a
         intpr.c    85    
         intpr.c    86    
         intpr.c    87    }OPR_TOKEN;
         intpr.c    88    
         intpr.c    89    // error
         intpr.c    90    void merror_msg(const char * format,...);
         intpr.c    91    void merror_illegal_token();
         intpr.c    92    void merror_expect(const char * s);
         intpr.c    93    void merror_msg_only(const char * format,...);
         intpr.c    94    
         intpr.c    95    extern const char * error_line;
         intpr.c    96    
         intpr.c    97    #define str_eq(s1,s2) (strcmp(s1,s2)==0)
         intpr.c    98    
         intpr.c    99    #define IS_OPR(t)                       ((t)>=OPR_MEM)
         intpr.c   100    #define IS_UNARY_OPR(t)         ((t)>=OPR_NEG)
         intpr.c   101    #define IS_BINARY_OPR(t)        ((t)< OPR_NEG)
         intpr.c   102    #define IS_RESWORD(t)           ((t)>=RES_SIN && (t)<OPR_MEM)
         intpr.c   103    #define IS_CONSTANT(t)          ((t)==TT_INT || (t)==TT_FLOAT)
         intpr.c   104    #define IS_KEYWORD(t)           ((t)>=KEY_SUB)
         intpr.c   105    
         intpr.c   106    // 
         intpr.c   107    const char *pline = NULL;
         intpr.c   108    char token[LINE_MAX];
         intpr.c   109    int  token_type;
         intpr.c   110    int  token_ext ;
         intpr.c   111    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         intpr.c   112    // reserved words (built-in functions!)
         intpr.c   113    static struct
         intpr.c   114    {
         intpr.c   115            int             token;
         intpr.c   116            char    *name;
         intpr.c   117            int             argc;
         intpr.c   118    }
         intpr.c   119    RESERVED_WORDS [] =
         intpr.c   120    {
         intpr.c   121            {RES_SIN        ,"sin"          ,1},
         intpr.c   122            {RES_COS        ,"cos"          ,1},
         intpr.c   123            {RES_TAN        ,"tan"          ,1},
         intpr.c   124            {RES_LOG        ,"ln"           ,1},
         intpr.c   125            {RES_EXP        ,"exp"          ,1},
         intpr.c   126            {RES_ABS        ,"abs"          ,1},
         intpr.c   127            {RES_CEIL       ,"ceil"         ,1},
         intpr.c   128            {RES_FLOOR      ,"floor"        ,1},
         intpr.c   129            {RES_FMOD       ,"mod"          ,2},
         intpr.c   130            {0                      ,NULL           ,0}
         intpr.c   131    };
         intpr.c   132    static struct
         intpr.c   133    {
         intpr.c   134            int             token;
         intpr.c   135            char    *name;
         intpr.c   136    }
         intpr.c   137    RESERVED_WORDS_OPR [] =
         intpr.c   138    {
         intpr.c   139            {OPR_AND        ,"and"          },
         intpr.c   140            {OPR_OR         ,"or"           },
         intpr.c   141            {OPR_NOT        ,"not"          },
         intpr.c   142            {0                      ,NULL           }
         intpr.c   143    };
         intpr.c   144    
         intpr.c   145    // check reserved words
         intpr.c   146    static int l_check_res ()
P   00000000              __$l_check_res:                  ; function: l_check_res
                                                           ; frame size=20
                                                           ; used runtime library name:
                                                           ; __slow_strcmp1
    00000000 2FE6                   MOV.L       R14,@-R15
    00000002 2FD6                   MOV.L       R13,@-R15
    00000004 2FC6                   MOV.L       R12,@-R15
    00000006 2FB6                   MOV.L       R11,@-R15
    00000008 4F22                   STS.L       PR,@-R15
         intpr.c   147    {
         intpr.c   148            int i;
         intpr.c   149            for(i=0;RESERVED_WORDS[i].name != NULL;++i)
    0000000A DB6E                   MOV.L       L1587+2,R11; _token
    0000000C DC6E                   MOV.L       L1587+6,R12; _token_ext
    0000000E DD6F                   MOV.L       L1587+10,R13; __$RESERVED_WORDS
    00000010 A017                   BRA         L1123
    00000012 EE00                   MOV         #0,R14
    00000014              L1124:                            
         intpr.c   150            {
         intpr.c   151                    if (str_eq(RESERVED_WORDS[i].name,token))
    00000014 D26E                   MOV.L       L1587+14,R2; __slow_strcmp1
    00000016 65B3                   MOV         R11,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000018 64E3                   MOV         R14,R4
    0000001A 63E3                   MOV         R14,R3
    0000001C 4400                   SHLL        R4
    0000001E 343C                   ADD         R3,R4
    00000020 4408                   SHLL2       R4
    00000022 34DC                   ADD         R13,R4
    00000024 420B                   JSR         @R2
    00000026 5441                   MOV.L       @(4,R4),R4
    00000028 2008                   TST         R0,R0
    0000002A 8B09                   BF          L1125
         intpr.c   152                    {
         intpr.c   153                            token_ext = RESERVED_WORDS[i].argc;
    0000002C 64E3                   MOV         R14,R4
    0000002E 63E3                   MOV         R14,R3
    00000030 4400                   SHLL        R4
    00000032 343C                   ADD         R3,R4
    00000034 4408                   SHLL2       R4
    00000036 34DC                   ADD         R13,R4
    00000038 5242                   MOV.L       @(8,R4),R2
    0000003A 2C22                   MOV.L       R2,@R12
         intpr.c   154                            return RESERVED_WORDS[i].token;
    0000003C A00B                   BRA         L1126
    0000003E 6042                   MOV.L       @R4,R0
    00000040              L1125:                            
    00000040 7E01                   ADD         #1,R14
    00000042              L1123:                            
    00000042 63E3                   MOV         R14,R3
    00000044 62E3                   MOV         R14,R2
    00000046 4300                   SHLL        R3
    00000048 332C                   ADD         R2,R3
    0000004A 4308                   SHLL2       R3
    0000004C 33DC                   ADD         R13,R3
    0000004E 5131                   MOV.L       @(4,R3),R1
    00000050 2118                   TST         R1,R1
    00000052 8BDF                   BF          L1124
         intpr.c   155                    }
         intpr.c   156            }
         intpr.c   157            return 0;
    00000054 E000                   MOV         #0,R0
         intpr.c   158    }
    00000056              L1126:                            
    00000056 4F26                   LDS.L       @R15+,PR
    00000058 6BF6                   MOV.L       @R15+,R11
    0000005A 6CF6                   MOV.L       @R15+,R12
    0000005C 6DF6                   MOV.L       @R15+,R13
    0000005E 000B                   RTS
    00000060 6EF6                   MOV.L       @R15+,R14
         intpr.c   159    static int l_check_res_opr ()
    00000062              __$l_check_res_opr:              ; function: l_check_res_opr
                                                           ; frame size=16
                                                           ; used runtime library name:
                                                           ; __slow_strcmp1
    00000062 2FE6                   MOV.L       R14,@-R15
    00000064 2FD6                   MOV.L       R13,@-R15
    00000066 2FC6                   MOV.L       R12,@-R15
    00000068 4F22                   STS.L       PR,@-R15
         intpr.c   160    {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         intpr.c   161            int i;
         intpr.c   162            for(i=0;RESERVED_WORDS_OPR[i].name != NULL;++i)
    0000006A DC56                   MOV.L       L1587+2,R12; _token
    0000006C DD59                   MOV.L       L1587+18,R13; __$RESERVED_WORDS_OPR
    0000006E A010                   BRA         L1127
    00000070 EE00                   MOV         #0,R14
    00000072              L1128:                            
         intpr.c   163            {
         intpr.c   164                    if (str_eq(RESERVED_WORDS_OPR[i].name,token))
    00000072 65C3                   MOV         R12,R5
    00000074 D356                   MOV.L       L1587+14,R3; __slow_strcmp1
    00000076 64E3                   MOV         R14,R4
    00000078 4408                   SHLL2       R4
    0000007A 4400                   SHLL        R4
    0000007C 34DC                   ADD         R13,R4
    0000007E 430B                   JSR         @R3
    00000080 5441                   MOV.L       @(4,R4),R4
    00000082 2008                   TST         R0,R0
    00000084 8B04                   BF          L1129
         intpr.c   165                            return RESERVED_WORDS_OPR[i].token;
    00000086 60E3                   MOV         R14,R0
    00000088 4008                   SHLL2       R0
    0000008A 4000                   SHLL        R0
    0000008C A009                   BRA         L1130
    0000008E 00DE                   MOV.L       @(R0,R13),R0
    00000090              L1129:                            
    00000090 7E01                   ADD         #1,R14
    00000092              L1127:                            
    00000092 63E3                   MOV         R14,R3
    00000094 4308                   SHLL2       R3
    00000096 4300                   SHLL        R3
    00000098 33DC                   ADD         R13,R3
    0000009A 5231                   MOV.L       @(4,R3),R2
    0000009C 2228                   TST         R2,R2
    0000009E 8BE8                   BF          L1128
         intpr.c   166            }
         intpr.c   167            return 0;
    000000A0 E000                   MOV         #0,R0
         intpr.c   168    }
    000000A2              L1130:                            
    000000A2 4F26                   LDS.L       @R15+,PR
    000000A4 6CF6                   MOV.L       @R15+,R12
    000000A6 6DF6                   MOV.L       @R15+,R13
    000000A8 000B                   RTS
    000000AA 6EF6                   MOV.L       @R15+,R14
         intpr.c   169    
         intpr.c   170    enum KEYWORD
         intpr.c   171    {
         intpr.c   172            KEY_SUB = 300           ,KEY_END                        ,KEY_IF                         ,KEY_ELSEI
                         +F                       ,
         intpr.c   173            KEY_ELSE                        ,KEY_WHILE                      ,KEY_FOR                        ,K
                         +EY_CASE                 ,
         intpr.c   174            KEY_WHEN                        ,KEY_GOSUB                      ,KEY_EXIT                       ,K
                         +EY_BREAK                        ,
         intpr.c   175            KEY_RETURN                      ,KEY_DIM                        ,KEY_REPEAT                     ,K
                         +EY_UNTIL                        ,
         intpr.c   176            KEY_VAR                         




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         intpr.c   177    };
         intpr.c   178    // key words
         intpr.c   179    static struct
         intpr.c   180    {
         intpr.c   181            int             token;
         intpr.c   182            char    *name;
         intpr.c   183    }
         intpr.c   184    KEY_WORDS [] =
         intpr.c   185    {
         intpr.c   186            {KEY_SUB        ,"sub"                  },
         intpr.c   187            {KEY_END        ,"end"                  },
         intpr.c   188            {KEY_IF         ,"if"                   },
         intpr.c   189            {KEY_ELSEIF     ,"elseif"               },
         intpr.c   190            {KEY_ELSE       ,"else"                 },
         intpr.c   191            {KEY_WHILE      ,"while"                },
         intpr.c   192            {KEY_FOR        ,"for"                  },
         intpr.c   193            {KEY_CASE       ,"case"                 },
         intpr.c   194            {KEY_WHEN       ,"when"                 },
         intpr.c   195            {KEY_REPEAT     ,"repeat"               },
         intpr.c   196            {KEY_UNTIL      ,"until"                },
         intpr.c   197            {KEY_VAR        ,"var"                  },
         intpr.c   198            {KEY_GOSUB      ,"gosub"                },
         intpr.c   199            {KEY_EXIT       ,"exit"                 },
         intpr.c   200            {KEY_BREAK      ,"break"                },
         intpr.c   201            {KEY_RETURN     ,"return"               },
         intpr.c   202            {KEY_DIM        ,"dim"                  },
         intpr.c   203    };
         intpr.c   204    // check key words
         intpr.c   205    static int l_check_key ()
    000000AC              __$l_check_key:                  ; function: l_check_key
                                                           ; frame size=16
                                                           ; used runtime library name:
                                                           ; __slow_strcmp1
    000000AC 2FE6                   MOV.L       R14,@-R15
    000000AE 2FD6                   MOV.L       R13,@-R15
    000000B0 2FC6                   MOV.L       R12,@-R15
    000000B2 4F22                   STS.L       PR,@-R15
         intpr.c   206    {
         intpr.c   207            int i;
         intpr.c   208            for(i=0;KEY_WORDS[i].name != NULL;++i)
    000000B4 DC43                   MOV.L       L1587+2,R12; _token
    000000B6 DD48                   MOV.L       L1587+22,R13; __$KEY_WORDS
    000000B8 A010                   BRA         L1131
    000000BA EE00                   MOV         #0,R14
    000000BC              L1132:                            
         intpr.c   209            {
         intpr.c   210                    if (str_eq(KEY_WORDS[i].name,token))
    000000BC D344                   MOV.L       L1587+14,R3; __slow_strcmp1
    000000BE 65C3                   MOV         R12,R5
    000000C0 64E3                   MOV         R14,R4
    000000C2 4408                   SHLL2       R4
    000000C4 4400                   SHLL        R4
    000000C6 34DC                   ADD         R13,R4
    000000C8 430B                   JSR         @R3
    000000CA 5441                   MOV.L       @(4,R4),R4
    000000CC 2008                   TST         R0,R0
    000000CE 8B04                   BF          L1133




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         intpr.c   211                    {
         intpr.c   212                            return KEY_WORDS[i].token;
    000000D0 60E3                   MOV         R14,R0
    000000D2 4008                   SHLL2       R0
    000000D4 4000                   SHLL        R0
    000000D6 A009                   BRA         L1134
    000000D8 00DE                   MOV.L       @(R0,R13),R0
    000000DA              L1133:                            
    000000DA 7E01                   ADD         #1,R14
    000000DC              L1131:                            
    000000DC 63E3                   MOV         R14,R3
    000000DE 4308                   SHLL2       R3
    000000E0 4300                   SHLL        R3
    000000E2 33DC                   ADD         R13,R3
    000000E4 5231                   MOV.L       @(4,R3),R2
    000000E6 2228                   TST         R2,R2
    000000E8 8BE8                   BF          L1132
         intpr.c   213                    }
         intpr.c   214            }
         intpr.c   215            return 0;
    000000EA E000                   MOV         #0,R0
         intpr.c   216    }
    000000EC              L1134:                            
    000000EC 4F26                   LDS.L       @R15+,PR
    000000EE 6CF6                   MOV.L       @R15+,R12
    000000F0 6DF6                   MOV.L       @R15+,R13
    000000F2 000B                   RTS
    000000F4 6EF6                   MOV.L       @R15+,R14
         intpr.c   217    
         intpr.c   218    
         intpr.c   219    void l_put_back ()
    000000F6              _l_put_back:                     ; function: l_put_back
                                                           ; frame size=4
    000000F6 4F22                   STS.L       PR,@-R15
         intpr.c   220    {
         intpr.c   221            pline -= strlen(token);
    000000F8 D432                   MOV.L       L1587+2,R4 ; _token
    000000FA D338                   MOV.L       L1587+26,R3; _strlen
    000000FC 430B                   JSR         @R3
    000000FE 0009                   NOP
    00000100 D237                   MOV.L       L1587+30,R2; _pline
    00000102 6322                   MOV.L       @R2,R3
         intpr.c   222    }
    00000104 4F26                   LDS.L       @R15+,PR
    00000106 3308                   SUB         R0,R3
    00000108 000B                   RTS
    0000010A 2232                   MOV.L       R3,@R2
         intpr.c   223    // get token
         intpr.c   224    void l_get_token ()
    0000010C              _l_get_token:                    ; function: l_get_token
                                                           ; frame size=72
    0000010C 2FE6                   MOV.L       R14,@-R15
    0000010E 2FD6                   MOV.L       R13,@-R15
    00000110 2FC6                   MOV.L       R12,@-R15
    00000112 2FB6                   MOV.L       R11,@-R15
    00000114 2FA6                   MOV.L       R10,@-R15
    00000116 EA04                   MOV         #4,R10




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000118 DB32                   MOV.L       L1587+34,R11; __ctype
    0000011A 2F96                   MOV.L       R9,@-R15
    0000011C 2F86                   MOV.L       R8,@-R15
    0000011E E900                   MOV         #0,R9
    00000120 DC31                   MOV.L       L1587+38,R12; _token_type
    00000122 4F22                   STS.L       PR,@-R15
    00000124 DE2E                   MOV.L       L1587+30,R14; _pline
    00000126 7FE0                   ADD         #-32,R15
         intpr.c   225    {
         intpr.c   226            char c;
         intpr.c   227            char *t = token;
    00000128 DD26                   MOV.L       L1587+2,R13; _token
         intpr.c   228    
         intpr.c   229            while(isspace(*pline))++pline;
    0000012A A003                   BRA         L1135
    0000012C E440                   MOV         #64,R4
    0000012E              L1136:                            
    0000012E 62E2                   MOV.L       @R14,R2
    00000130 7201                   ADD         #1,R2
    00000132 2E22                   MOV.L       R2,@R14
    00000134              L1135:                            
    00000134 60E2                   MOV.L       @R14,R0
    00000136 6000                   MOV.B       @R0,R0
    00000138 600C                   EXTU.B      R0,R0
    0000013A 03BC                   MOV.B       @(R0,R11),R3
    0000013C 633C                   EXTU.B      R3,R3
    0000013E 2348                   TST         R4,R3
    00000140 8BF5                   BF          L1136
    00000142 E503                   MOV         #3,R5
         intpr.c   230            c = *pline++;
    00000144 64E2                   MOV.L       @R14,R4
    00000146 7401                   ADD         #1,R4
    00000148 2E42                   MOV.L       R4,@R14
    0000014A 74FF                   ADD         #-1,R4
    0000014C 6440                   MOV.B       @R4,R4
    0000014E 684E                   EXTS.B      R4,R8
    00000150 608C                   EXTU.B      R8,R0
    00000152 03BC                   MOV.B       @(R0,R11),R3
    00000154 633C                   EXTU.B      R3,R3
    00000156 2358                   TST         R5,R3
    00000158 8B02                   BF          L1139
    0000015A 6083                   MOV         R8,R0
    0000015C 885F                   CMP/EQ      #95,R0
    0000015E 8B45                   BF          L1137
    00000160              L1139:                            
         intpr.c   231    
         intpr.c   232            if (isalpha(c) || c=='_')
         intpr.c   233            {
         intpr.c   234                    do
         intpr.c   235                    {
         intpr.c   236                            *t++ = c;
    00000160 2D40                   MOV.B       R4,@R13
         intpr.c   237                            c = *pline++;
    00000162 64E2                   MOV.L       @R14,R4
    00000164 7401                   ADD         #1,R4
    00000166 2E42                   MOV.L       R4,@R14
    00000168 74FF                   ADD         #-1,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000016A 6440                   MOV.B       @R4,R4
         intpr.c   238                    }while(isalpha(c) || isdigit(c) || c=='_');
    0000016C 674E                   EXTS.B      R4,R7
    0000016E 607C                   EXTU.B      R7,R0
    00000170 06BC                   MOV.B       @(R0,R11),R6
    00000172 666C                   EXTU.B      R6,R6
    00000174 6363                   MOV         R6,R3
    00000176 2358                   TST         R5,R3
    00000178 8FF2                   BF/S        L1139
    0000017A 7D01                   ADD         #1,R13
    0000017C E104                   MOV         #4,R1
    0000017E 2168                   TST         R6,R1
    00000180 8BEE                   BF          L1139
    00000182 6073                   MOV         R7,R0
    00000184 885F                   CMP/EQ      #95,R0
    00000186 89EB                   BT          L1139
         intpr.c   239                    pline--;
    00000188 63E2                   MOV.L       @R14,R3
    0000018A 73FF                   ADD         #-1,R3
    0000018C 2E32                   MOV.L       R3,@R14
         intpr.c   240                    *t = '\0';
         intpr.c   241                    // is a key word?
         intpr.c   242                    token_type = l_check_key();
    0000018E BF8D                   BSR         __$l_check_key
    00000190 2D90                   MOV.B       R9,@R13
         intpr.c   243                    if (token_type != 0) return;
    00000192 6303                   MOV         R0,R3
    00000194 2338                   TST         R3,R3
    00000196 8D02                   BT/S        L1588
    00000198 2C02                   MOV.L       R0,@R12
    0000019A A14B                   BRA         L1141
    0000019C 0009                   NOP
    0000019E              L1588:                            
         intpr.c   244                    // is a reserved word?
         intpr.c   245                    token_type = l_check_res();
    0000019E BF2F                   BSR         __$l_check_res
    000001A0 0009                   NOP
         intpr.c   246                    if (token_type != 0) return;
    000001A2 6203                   MOV         R0,R2
    000001A4 2228                   TST         R2,R2
    000001A6 8D02                   BT/S        L1589
    000001A8 2C02                   MOV.L       R0,@R12
    000001AA A143                   BRA         L1141
    000001AC 0009                   NOP
    000001AE              L1589:                            
         intpr.c   247                    // is a operator ?
         intpr.c   248                    token_type = l_check_res_opr();
    000001AE BF58                   BSR         __$l_check_res_opr
    000001B0 0009                   NOP
         intpr.c   249                    if (token_type != 0) return;
    000001B2 6203                   MOV         R0,R2
    000001B4 2228                   TST         R2,R2
    000001B6 8D02                   BT/S        L1590
    000001B8 2C02                   MOV.L       R0,@R12
    000001BA A13B                   BRA         L1141
    000001BC 0009                   NOP
    000001BE              L1590:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         intpr.c   250                    // is a identifier
         intpr.c   251                    token_type = TT_ID;
         intpr.c   252                    return;
    000001BE A129                   BRA         L1569
    000001C0 E302                   MOV         #2,R3
    000001C2              L1587:                            
    000001C2 0000                   .DATA.W     0
    000001C4 <00000000>             .DATA.L     _token
    000001C8 <00000000>             .DATA.L     _token_ext
    000001CC <00000000>             .DATA.L     __$RESERVED_WORDS
    000001D0 <00000000>             .DATA.L     __slow_strcmp1
    000001D4 <00000000>             .DATA.L     __$RESERVED_WORDS_OPR
    000001D8 <00000000>             .DATA.L     __$KEY_WORDS
    000001DC <00000000>             .DATA.L     _strlen
    000001E0 <00000000>             .DATA.L     _pline
    000001E4 <00000000>             .DATA.L     __ctype
    000001E8 <00000000>             .DATA.L     _token_type
    000001EC              L1137:                            
         intpr.c   253            }
         intpr.c   254            else if (c=='=' || c=='.' || c=='*' || c=='/' || c=='^' || c=='(' || c==')' || c=='+' || c=='-' ||
                         + c==',')
    000001EC 883D                   CMP/EQ      #61,R0
    000001EE 891A                   BT          L1146
    000001F0 6083                   MOV         R8,R0
    000001F2 882E                   CMP/EQ      #46,R0
    000001F4 8917                   BT          L1146
    000001F6 6083                   MOV         R8,R0
    000001F8 882A                   CMP/EQ      #42,R0
    000001FA 8914                   BT          L1146
    000001FC 6083                   MOV         R8,R0
    000001FE 882F                   CMP/EQ      #47,R0
    00000200 8911                   BT          L1146
    00000202 6083                   MOV         R8,R0
    00000204 885E                   CMP/EQ      #94,R0
    00000206 890E                   BT          L1146
    00000208 6083                   MOV         R8,R0
    0000020A 8828                   CMP/EQ      #40,R0
    0000020C 890B                   BT          L1146
    0000020E 6083                   MOV         R8,R0
    00000210 8829                   CMP/EQ      #41,R0
    00000212 8908                   BT          L1146
    00000214 6083                   MOV         R8,R0
    00000216 882B                   CMP/EQ      #43,R0
    00000218 8905                   BT          L1146
    0000021A 6083                   MOV         R8,R0
    0000021C 882D                   CMP/EQ      #45,R0
    0000021E 8902                   BT          L1146
    00000220 6083                   MOV         R8,R0
    00000222 882C                   CMP/EQ      #44,R0
    00000224 8B3D                   BF          L1145
    00000226              L1146:                            
    00000226 6083                   MOV         R8,R0
         intpr.c   255            {
         intpr.c   256                    *t++ = c;*t = '\0';
    00000228 2D40                   MOV.B       R4,@R13
    0000022A 883D                   CMP/EQ      #61,R0
    0000022C 7D01                   ADD         #1,R13




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000022E 8D14                   BT/S        L980
    00000230 2D90                   MOV.B       R9,@R13
    00000232 882C                   CMP/EQ      #44,R0
    00000234 8914                   BT          L981
    00000236 882D                   CMP/EQ      #45,R0
    00000238 8914                   BT          L982
    0000023A 882B                   CMP/EQ      #43,R0
    0000023C 8915                   BT          L983
    0000023E 882E                   CMP/EQ      #46,R0
    00000240 8916                   BT          L984
    00000242 882A                   CMP/EQ      #42,R0
    00000244 8917                   BT          L985
    00000246 882F                   CMP/EQ      #47,R0
    00000248 8918                   BT          L986
    0000024A 885E                   CMP/EQ      #94,R0
    0000024C 8919                   BT          L987
    0000024E 8828                   CMP/EQ      #40,R0
    00000250 891A                   BT          L988
    00000252 8829                   CMP/EQ      #41,R0
    00000254 891A                   BT          L989
    00000256 A0ED                   BRA         L1141
    00000258 0009                   NOP
    0000025A              L980:                            ; case label 
         intpr.c   257                    switch (c)
         intpr.c   258                    {
         intpr.c   259                            case '=':token_type = OPR_EQ ;break;
    0000025A 921B                   MOV.W       L1591,R2   ; H'00D2
    0000025C A055                   BRA         L1567
    0000025E 0009                   NOP
    00000260              L981:                            ; case label 
         intpr.c   260                            case ',':token_type = TT_COM ;break;
    00000260 A015                   BRA         L1564
    00000262 E101                   MOV         #1,R1
    00000264              L982:                            ; case label 
         intpr.c   261                            case '-':token_type = OPR_SUB;break;
    00000264 9217                   MOV.W       L1591+2,R2 ; H'00CA
    00000266 A050                   BRA         L1567
    00000268 0009                   NOP
    0000026A              L983:                            ; case label 
         intpr.c   262                            case '+':token_type = OPR_ADD;break;
    0000026A 9115                   MOV.W       L1591+4,R1 ; H'00C9
    0000026C A00F                   BRA         L1564
    0000026E 0009                   NOP
    00000270              L984:                            ; case label 
         intpr.c   263                            case '.':token_type = OPR_MEM;break;
    00000270 9213                   MOV.W       L1591+6,R2 ; H'00C8
    00000272 A04A                   BRA         L1567
    00000274 0009                   NOP
    00000276              L985:                            ; case label 
         intpr.c   264                            case '*':token_type = OPR_MUL;break;
    00000276 9111                   MOV.W       L1591+8,R1 ; H'00CB
    00000278 A009                   BRA         L1564
    0000027A 0009                   NOP
    0000027C              L986:                            ; case label 
         intpr.c   265                            case '/':token_type = OPR_DIV;break;
    0000027C 920F                   MOV.W       L1591+10,R2; H'00CC
    0000027E A044                   BRA         L1567




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000280 0009                   NOP
    00000282              L987:                            ; case label 
         intpr.c   266                            case '^':token_type = OPR_POW;break;
    00000282 910D                   MOV.W       L1591+12,R1; H'00CD
    00000284 A003                   BRA         L1564
    00000286 0009                   NOP
    00000288              L988:                            ; case label 
         intpr.c   267                            case '(':token_type = TT_LBK ;break;
    00000288 A03F                   BRA         L1567
    0000028A E206                   MOV         #6,R2
    0000028C              L989:                            ; case label 
         intpr.c   268                            case ')':token_type = TT_RBK ;break;
    0000028C E107                   MOV         #7,R1
    0000028E              L1564:                            
    0000028E 2C12                   MOV.L       R1,@R12
         intpr.c   269                    }
         intpr.c   270                    return;
    00000290 A0D0                   BRA         L1141
    00000292 0009                   NOP
    00000294              L1591:                            
    00000294 00D2                   .DATA.W     H'00D2
    00000296 00CA                   .DATA.W     H'00CA
    00000298 00C9                   .DATA.W     H'00C9
    0000029A 00C8                   .DATA.W     H'00C8
    0000029C 00CB                   .DATA.W     H'00CB
    0000029E 00CC                   .DATA.W     H'00CC
    000002A0 00CD                   .DATA.W     H'00CD
    000002A2              L1145:                            
         intpr.c   271            }
         intpr.c   272            else if (c=='>')
    000002A2 883E                   CMP/EQ      #62,R0
    000002A4 8B13                   BF          L1149
         intpr.c   273            {
         intpr.c   274                    *t++ = c;
    000002A6 2D40                   MOV.B       R4,@R13
         intpr.c   275                    if (*pline=='=')
    000002A8 60E2                   MOV.L       @R14,R0
    000002AA 6000                   MOV.B       @R0,R0
    000002AC 883D                   CMP/EQ      #61,R0
    000002AE 8F0A                   BF/S        L1150
    000002B0 7D01                   ADD         #1,R13
         intpr.c   276                    {
         intpr.c   277                            *t++ = *pline;*t = '\0';
    000002B2 63E2                   MOV.L       @R14,R3
         intpr.c   278                            pline++;
         intpr.c   279                            token_type = OPR_BE;
    000002B4 9267                   MOV.W       L1592,R2   ; H'00CE
    000002B6 6130                   MOV.B       @R3,R1
    000002B8 2D10                   MOV.B       R1,@R13
    000002BA 7D01                   ADD         #1,R13
    000002BC 2D90                   MOV.B       R9,@R13
    000002BE 63E2                   MOV.L       @R14,R3
    000002C0 7301                   ADD         #1,R3
    000002C2 A022                   BRA         L1567
    000002C4 2E32                   MOV.L       R3,@R14
    000002C6              L1150:                            
         intpr.c   280                    }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         intpr.c   281                    else token_type = OPR_BT;
    000002C6 915F                   MOV.W       L1592+2,R1 ; H'00CF
    000002C8 2C12                   MOV.L       R1,@R12
         intpr.c   282                    return ;
    000002CA A0B3                   BRA         L1141
    000002CC 0009                   NOP
    000002CE              L1149:                            
         intpr.c   283            }
         intpr.c   284            else if (c=='<')
    000002CE 6083                   MOV         R8,R0
    000002D0 883C                   CMP/EQ      #60,R0
    000002D2 8B20                   BF          L1153
         intpr.c   285            {
         intpr.c   286                    *t++ = c;
    000002D4 2D40                   MOV.B       R4,@R13
         intpr.c   287                    if (*pline=='=')
    000002D6 60E2                   MOV.L       @R14,R0
    000002D8 6000                   MOV.B       @R0,R0
    000002DA 883D                   CMP/EQ      #61,R0
    000002DC 8F0A                   BF/S        L1154
    000002DE 7D01                   ADD         #1,R13
         intpr.c   288                    {
         intpr.c   289                            *t++ = *pline;*t = '\0';
    000002E0 63E2                   MOV.L       @R14,R3
    000002E2 6130                   MOV.B       @R3,R1
         intpr.c   290                            pline++;
         intpr.c   291                            token_type = OPR_LE;
    000002E4 9251                   MOV.W       L1592+4,R2 ; H'00D0
    000002E6 2D10                   MOV.B       R1,@R13
    000002E8 7D01                   ADD         #1,R13
    000002EA 2D90                   MOV.B       R9,@R13
    000002EC 63E2                   MOV.L       @R14,R3
    000002EE 7301                   ADD         #1,R3
    000002F0 A00B                   BRA         L1567
    000002F2 2E32                   MOV.L       R3,@R14
    000002F4              L1154:                            
         intpr.c   292                    }
         intpr.c   293                    else if (*pline=='>')
    000002F4 883E                   CMP/EQ      #62,R0
    000002F6 8B0A                   BF          L1156
         intpr.c   294                    {
         intpr.c   295                            *t++ = *pline;*t = '\0';
    000002F8 63E2                   MOV.L       @R14,R3
    000002FA 6130                   MOV.B       @R3,R1
         intpr.c   296                            pline++;
         intpr.c   297                            token_type = OPR_NEQ;
    000002FC 9246                   MOV.W       L1592+6,R2 ; H'00D3
    000002FE 2D10                   MOV.B       R1,@R13
    00000300 7D01                   ADD         #1,R13
    00000302 2D90                   MOV.B       R9,@R13
    00000304 63E2                   MOV.L       @R14,R3
    00000306 7301                   ADD         #1,R3
    00000308 2E32                   MOV.L       R3,@R14
    0000030A              L1567:                            
    0000030A A093                   BRA         L1141
    0000030C 2C22                   MOV.L       R2,@R12
    0000030E              L1156:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         intpr.c   298                    }
         intpr.c   299                    else token_type = OPR_LT;
    0000030E 913E                   MOV.W       L1592+8,R1 ; H'00D1
    00000310 2C12                   MOV.L       R1,@R12
         intpr.c   300                    return ;
    00000312 A08F                   BRA         L1141
    00000314 0009                   NOP
    00000316              L1153:                            
         intpr.c   301            }
         intpr.c   302            else if (isdigit(c))
    00000316 604C                   EXTU.B      R4,R0
    00000318 03BC                   MOV.B       @(R0,R11),R3
    0000031A 633C                   EXTU.B      R3,R3
    0000031C 23A8                   TST         R10,R3
    0000031E 892D                   BT          L1159
    00000320              L1160:                            
         intpr.c   303            {
         intpr.c   304                    do
         intpr.c   305                    {
         intpr.c   306                            *t++ = c;
    00000320 2D40                   MOV.B       R4,@R13
         intpr.c   307                            c = *pline++;
    00000322 64E2                   MOV.L       @R14,R4
    00000324 7401                   ADD         #1,R4
    00000326 2E42                   MOV.L       R4,@R14
    00000328 74FF                   ADD         #-1,R4
    0000032A 6440                   MOV.B       @R4,R4
         intpr.c   308                    }while(isdigit(c));
    0000032C 604C                   EXTU.B      R4,R0
    0000032E 03BC                   MOV.B       @(R0,R11),R3
    00000330 633C                   EXTU.B      R3,R3
    00000332 23A8                   TST         R10,R3
    00000334 8FF4                   BF/S        L1160
    00000336 7D01                   ADD         #1,R13
         intpr.c   309                    // not a float
         intpr.c   310                    if (c!='.')
    00000338 604E                   EXTS.B      R4,R0
    0000033A 882E                   CMP/EQ      #46,R0
    0000033C 8B18                   BF          L878
         intpr.c   311                    {
         intpr.c   312                            pline--;
         intpr.c   313                            *t = '\0';
         intpr.c   314                            token_type = TT_INT;
         intpr.c   315                            return;
         intpr.c   316                    }
         intpr.c   317                    // '.' if float
         intpr.c   318                    if (isdigit(*pline))
    0000033E 60E2                   MOV.L       @R14,R0
    00000340 6000                   MOV.B       @R0,R0
    00000342 600C                   EXTU.B      R0,R0
    00000344 03BC                   MOV.B       @(R0,R11),R3
    00000346 633C                   EXTU.B      R3,R3
    00000348 23A8                   TST         R10,R3
    0000034A 8911                   BT          L878
    0000034C              L1163:                            
         intpr.c   319                    {
         intpr.c   320                            do




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         intpr.c   321                            {
         intpr.c   322                                    *t++ = c;
    0000034C 2D40                   MOV.B       R4,@R13
         intpr.c   323                                    c = *pline++;
    0000034E 64E2                   MOV.L       @R14,R4
    00000350 7401                   ADD         #1,R4
    00000352 2E42                   MOV.L       R4,@R14
    00000354 74FF                   ADD         #-1,R4
    00000356 6440                   MOV.B       @R4,R4
         intpr.c   324                            }while(isdigit(c));
    00000358 604C                   EXTU.B      R4,R0
    0000035A 03BC                   MOV.B       @(R0,R11),R3
    0000035C 633C                   EXTU.B      R3,R3
    0000035E 23A8                   TST         R10,R3
    00000360 8FF4                   BF/S        L1163
    00000362 7D01                   ADD         #1,R13
         intpr.c   325                            pline--;
    00000364 61E2                   MOV.L       @R14,R1
    00000366 71FF                   ADD         #-1,R1
    00000368 2E12                   MOV.L       R1,@R14
         intpr.c   326                            *t = '\0';
    0000036A 2D90                   MOV.B       R9,@R13
         intpr.c   327                            token_type = TT_FLOAT;
         intpr.c   328                            return;
    0000036C A062                   BRA         L1141
    0000036E 2CA2                   MOV.L       R10,@R12
    00000370              L878:
         intpr.c   329                    }
         intpr.c   330                    // '.' is a member operator
         intpr.c   331                    else
         intpr.c   332                    {
         intpr.c   333                            pline--;
    00000370 62E2                   MOV.L       @R14,R2
    00000372 72FF                   ADD         #-1,R2
    00000374 2E22                   MOV.L       R2,@R14
         intpr.c   334                            *t = '\0';
    00000376 2D90                   MOV.B       R9,@R13
         intpr.c   335                            token_type = TT_INT;
         intpr.c   336                            return;
    00000378 A05C                   BRA         L1141
    0000037A 2C52                   MOV.L       R5,@R12
    0000037C              L1159:                            
         intpr.c   337                    }
         intpr.c   338            }
         intpr.c   339            // get string
         intpr.c   340            else if (c=='\"')
    0000037C 6083                   MOV         R8,R0
    0000037E 8822                   CMP/EQ      #34,R0
    00000380 8B4A                   BF          L1166
         intpr.c   341            {
         intpr.c   342                    while(*pline && *pline!='\"')
    00000382 A03B                   BRA         L1167
    00000384 0009                   NOP
    00000386              L1592:                            
    00000386 00CE                   .DATA.W     H'00CE
    00000388 00CF                   .DATA.W     H'00CF
    0000038A 00D0                   .DATA.W     H'00D0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   16


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000038C 00D3                   .DATA.W     H'00D3
    0000038E 00D1                   .DATA.W     H'00D1
    00000390              L1168:                            
         intpr.c   343                    {
         intpr.c   344                            if (*pline=='\\')
    00000390 60E2                   MOV.L       @R14,R0
    00000392 6000                   MOV.B       @R0,R0
    00000394 885C                   CMP/EQ      #92,R0
    00000396 8B2A                   BF          L877
         intpr.c   345                            {
         intpr.c   346                                    pline++;
    00000398 62E2                   MOV.L       @R14,R2
    0000039A 7201                   ADD         #1,R2
    0000039C 2E22                   MOV.L       R2,@R14
         intpr.c   347                                    if (*pline=='\\')
    0000039E 6023                   MOV         R2,R0
    000003A0 6000                   MOV.B       @R0,R0
    000003A2 885C                   CMP/EQ      #92,R0
    000003A4 8923                   BT          L877
         intpr.c   348                                            *t++ = *pline++;
         intpr.c   349                                    else if (isdigit(*pline))
    000003A6 60E2                   MOV.L       @R14,R0
    000003A8 6000                   MOV.B       @R0,R0
    000003AA 600C                   EXTU.B      R0,R0
    000003AC 03BC                   MOV.B       @(R0,R11),R3
    000003AE 633C                   EXTU.B      R3,R3
    000003B0 23A8                   TST         R10,R3
    000003B2 8916                   BT          L1172
         intpr.c   350                                    {
         intpr.c   351                                            unsigned char c;
         intpr.c   352                                            char buf[32],*p=buf;
    000003B4 68F3                   MOV         R15,R8
         intpr.c   353                                            while(isdigit(*pline))
    000003B6 A007                   BRA         L1173
    000003B8 6483                   MOV         R8,R4
    000003BA              L1174:                            
         intpr.c   354                                            {
         intpr.c   355                                                    *p++ = *pline++;
    000003BA 63E2                   MOV.L       @R14,R3
    000003BC 7301                   ADD         #1,R3
    000003BE 2E32                   MOV.L       R3,@R14
    000003C0 73FF                   ADD         #-1,R3
    000003C2 6130                   MOV.B       @R3,R1
    000003C4 2410                   MOV.B       R1,@R4
    000003C6 7401                   ADD         #1,R4
    000003C8              L1173:                            
    000003C8 60E2                   MOV.L       @R14,R0
    000003CA 6000                   MOV.B       @R0,R0
    000003CC 600C                   EXTU.B      R0,R0
    000003CE 03BC                   MOV.B       @(R0,R11),R3
    000003D0 633C                   EXTU.B      R3,R3
    000003D2 23A8                   TST         R10,R3
    000003D4 8BF1                   BF          L1174
         intpr.c   356                                            }
         intpr.c   357                                            c = (unsigned char)atol(buf);
    000003D6 D326                   MOV.L       L1593+2,R3 ; _atol
    000003D8 430B                   JSR         @R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   17


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000003DA 6483                   MOV         R8,R4
    000003DC 6403                   MOV         R0,R4
         intpr.c   358                                            *t++ = c;
    000003DE A00C                   BRA         L1568
    000003E0 2D40                   MOV.B       R4,@R13
    000003E2              L1172:                            
         intpr.c   359                                    }
         intpr.c   360                                    else merror_msg ("illegal escape character");
    000003E2 D824                   MOV.L       L1593+6,R8 ; L477
    000003E4 D224                   MOV.L       L1593+10,R2; _merror_msg
    000003E6 420B                   JSR         @R2
    000003E8 2F86                   MOV.L       R8,@-R15
    000003EA A007                   BRA         L1167
    000003EC 7F04                   ADD         #4,R15
    000003EE              L877:
         intpr.c   361                            }
         intpr.c   362                            else
         intpr.c   363                                    *t++ = *pline++;
    000003EE 63E2                   MOV.L       @R14,R3
    000003F0 7301                   ADD         #1,R3
    000003F2 2E32                   MOV.L       R3,@R14
    000003F4 73FF                   ADD         #-1,R3
    000003F6 6130                   MOV.B       @R3,R1
    000003F8 2D10                   MOV.B       R1,@R13
    000003FA              L1568:                            
    000003FA 7D01                   ADD         #1,R13
    000003FC              L1167:                            
    000003FC 64E2                   MOV.L       @R14,R4
    000003FE 6440                   MOV.B       @R4,R4
    00000400 2448                   TST         R4,R4
    00000402 8902                   BT          L1177
    00000404 604E                   EXTS.B      R4,R0
    00000406 8822                   CMP/EQ      #34,R0
    00000408 8BC2                   BF          L1168
    0000040A              L1177:                            
         intpr.c   364                    }
         intpr.c   365                    *t = '\0';
         intpr.c   366                    pline++;
         intpr.c   367                    token_type = TT_STRING;
    0000040A E305                   MOV         #5,R3
    0000040C 2D90                   MOV.B       R9,@R13
    0000040E 62E2                   MOV.L       @R14,R2
    00000410 7201                   ADD         #1,R2
    00000412 2E22                   MOV.L       R2,@R14
         intpr.c   368                    return;
    00000414              L1569:                            
    00000414 A00E                   BRA         L1141
    00000416 2C32                   MOV.L       R3,@R12
    00000418              L1166:                            
         intpr.c   369            }       
         intpr.c   370            else if (c=='\0')
    00000418 2888                   TST         R8,R8
    0000041A 8B05                   BF          L1179
         intpr.c   371            {
         intpr.c   372                    *t = '\0';--pline;
    0000041C 2D90                   MOV.B       R9,@R13
    0000041E 63E2                   MOV.L       @R14,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   18


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000420 73FF                   ADD         #-1,R3
    00000422 2E32                   MOV.L       R3,@R14
         intpr.c   373                    token_type = TT_LINE_END;
         intpr.c   374                    return;
    00000424 A006                   BRA         L1141
    00000426 2C92                   MOV.L       R9,@R12
    00000428              L1179:                            
         intpr.c   375            }
         intpr.c   376            else
         intpr.c   377                    merror_msg("illegal char:'%c'",c);
    00000428 2F86                   MOV.L       R8,@-R15
    0000042A D314                   MOV.L       L1593+14,R3; L479
    0000042C D212                   MOV.L       L1593+10,R2; _merror_msg
    0000042E 420B                   JSR         @R2
    00000430 2F36                   MOV.L       R3,@-R15
    00000432 7F08                   ADD         #8,R15
         intpr.c   378    
         intpr.c   379    }
    00000434              L1141:                            
    00000434 7F20                   ADD         #32,R15
    00000436 4F26                   LDS.L       @R15+,PR
    00000438 68F6                   MOV.L       @R15+,R8
    0000043A 69F6                   MOV.L       @R15+,R9
    0000043C 6AF6                   MOV.L       @R15+,R10
    0000043E 6BF6                   MOV.L       @R15+,R11
    00000440 6CF6                   MOV.L       @R15+,R12
    00000442 6DF6                   MOV.L       @R15+,R13
    00000444 000B                   RTS
    00000446 6EF6                   MOV.L       @R15+,R14
         intpr.c   380    
         intpr.c   381    void match_str (const char * str)
    00000448              _match_str:                      ; function: match_str
                                                           ; frame size=8
                                                           ; used runtime library name:
                                                           ; __slow_strcmp1
    00000448 4F22                   STS.L       PR,@-R15
    0000044A 7FFC                   ADD         #-4,R15
         intpr.c   382    {
         intpr.c   383            l_get_token ();
    0000044C BE5E                   BSR         _l_get_token
    0000044E 2F42                   MOV.L       R4,@R15
         intpr.c   384            if (!str_eq(str,token))
    00000450 D50B                   MOV.L       L1593+18,R5; _token
    00000452 D30C                   MOV.L       L1593+22,R3; __slow_strcmp1
    00000454 430B                   JSR         @R3
    00000456 64F2                   MOV.L       @R15,R4
    00000458 2008                   TST         R0,R0
    0000045A 8904                   BT          L1181
         intpr.c   385            {
         intpr.c   386                    merror_expect(str);
    0000045C 64F2                   MOV.L       @R15,R4
    0000045E 7F04                   ADD         #4,R15
    00000460 D309                   MOV.L       L1593+26,R3; _merror_expect
    00000462 432B                   JMP         @R3
    00000464 4F26                   LDS.L       @R15+,PR
    00000466              L1181:                            
         intpr.c   387            }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   19


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         intpr.c   388    }
    00000466 7F04                   ADD         #4,R15
    00000468 4F26                   LDS.L       @R15+,PR
    0000046A 000B                   RTS
    0000046C 0009                   NOP
    0000046E              L1593:                            
    0000046E 0000                   .DATA.W     0
    00000470 <00000000>             .DATA.L     _atol
    00000474 <00000000>             .DATA.L     L477
    00000478 <00000000>             .DATA.L     _merror_msg
    0000047C <00000000>             .DATA.L     L479
    00000480 <00000000>             .DATA.L     _token
    00000484 <00000000>             .DATA.L     __slow_strcmp1
    00000488 <00000000>             .DATA.L     _merror_expect
         intpr.c   389    
         intpr.c   390    const char * OPR_TYPE_STR[]     = {".","+","-","*","/","^",">=",">","<=","<","=","and","or","-","not"};
         intpr.c   391    const char * TYPE_STR[]         = {"EOF","comma","identifier","integer","float","string","'('","')'"};
         intpr.c   392    
         intpr.c   393    void match_type (int type)
    0000048C              _match_type:                     ; function: match_type
                                                           ; frame size=24
    0000048C 2FE6                   MOV.L       R14,@-R15
    0000048E 2FD6                   MOV.L       R13,@-R15
    00000490 4F22                   STS.L       PR,@-R15
         intpr.c   394    {
         intpr.c   395            l_get_token ();
    00000492 BE3B                   BSR         _l_get_token
    00000494 6E43                   MOV         R4,R14
         intpr.c   396            if (token_type != type)
    00000496 D333                   MOV.L       L1594+10,R3; _token_type
    00000498 6232                   MOV.L       @R3,R2
    0000049A 32E0                   CMP/EQ      R14,R2
    0000049C 8920                   BT          L1182
    0000049E DD32                   MOV.L       L1594+14,R13; _merror_msg
    000004A0 D432                   MOV.L       L1594+18,R4; _token
    000004A2 925A                   MOV.W       L1594,R2   ; H'00C8
    000004A4 3E23                   CMP/GE      R2,R14
    000004A6 8B0B                   BF          L1183
         intpr.c   397            {
         intpr.c   398                    if (IS_OPR(type))
         intpr.c   399                    {
         intpr.c   400                            merror_msg("illegal token:'%s','%s' expected",token,OPR_TYPE_STR[type-OPR_MEM]);
    000004A8 9058                   MOV.W       L1594+2,R0 ; H'FF38
    000004AA 3E0C                   ADD         R0,R14
    000004AC D030                   MOV.L       L1594+22,R0; _OPR_TYPE_STR
    000004AE 4E08                   SHLL2       R14
    000004B0 D130                   MOV.L       L1594+26,R1; L510
    000004B2 03EE                   MOV.L       @(R0,R14),R3
    000004B4 2F36                   MOV.L       R3,@-R15
    000004B6 2F46                   MOV.L       R4,@-R15
    000004B8 4D0B                   JSR         @R13
    000004BA 2F16                   MOV.L       R1,@-R15
    000004BC A010                   BRA         L1182
    000004BE 7F0C                   ADD         #12,R15
    000004C0              L1183:                            
         intpr.c   401                    }
         intpr.c   402                    else if (type<100)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   20


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000004C0 E064                   MOV         #100,R0
    000004C2 3E03                   CMP/GE      R0,R14
    000004C4 8906                   BT          L1185
         intpr.c   403                    {
         intpr.c   404                            merror_msg("illegal token:'%s',%s expected",token,TYPE_STR[type-TT_LINE_END]);
    000004C6 4E08                   SHLL2       R14
    000004C8 D02B                   MOV.L       L1594+30,R0; _TYPE_STR
    000004CA 01EE                   MOV.L       @(R0,R14),R1
    000004CC D32B                   MOV.L       L1594+34,R3; L512
    000004CE 2F16                   MOV.L       R1,@-R15
    000004D0 A003                   BRA         L1570
    000004D2 2F46                   MOV.L       R4,@-R15
    000004D4              L1185:                            
         intpr.c   405                    }
         intpr.c   406                    else
         intpr.c   407                    {
         intpr.c   408                            merror_msg("illegal token:'%s',[%d] expected",token,type);
    000004D4 2FE6                   MOV.L       R14,@-R15
    000004D6 2F46                   MOV.L       R4,@-R15
    000004D8 D329                   MOV.L       L1594+38,R3; L514
    000004DA              L1570:                            
    000004DA 4D0B                   JSR         @R13
    000004DC 2F36                   MOV.L       R3,@-R15
    000004DE 7F0C                   ADD         #12,R15
    000004E0              L1182:                            
         intpr.c   409                    }
         intpr.c   410            }
         intpr.c   411    }
    000004E0 4F26                   LDS.L       @R15+,PR
    000004E2 6DF6                   MOV.L       @R15+,R13
    000004E4 000B                   RTS
    000004E6 6EF6                   MOV.L       @R15+,R14
         intpr.c   412    
         intpr.c   413    // assign 'state'
         intpr.c   414    #define move(n) state=n;continue
         intpr.c   415    
         intpr.c   416    // match optional expression
         intpr.c   417    void match_exp (const char * exp)
    000004E8              _match_exp:                      ; function: match_exp
                                                           ; frame size=32
    000004E8 2FE6                   MOV.L       R14,@-R15
    000004EA 2FD6                   MOV.L       R13,@-R15
    000004EC 2FC6                   MOV.L       R12,@-R15
    000004EE 2FB6                   MOV.L       R11,@-R15
    000004F0 2FA6                   MOV.L       R10,@-R15
    000004F2 2F96                   MOV.L       R9,@-R15
    000004F4 2F86                   MOV.L       R8,@-R15
    000004F6 E901                   MOV         #1,R9
    000004F8 DC22                   MOV.L       L1594+42,R12; _pline
         intpr.c   418    {
         intpr.c   419            int state = 1;
    000004FA 6D93                   MOV         R9,R13
    000004FC 4F22                   STS.L       PR,@-R15
         intpr.c   420    
         intpr.c   421            pline = exp;
    000004FE 2C42                   MOV.L       R4,@R12
         intpr.c   422    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   21


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         intpr.c   423            while(1)
    00000500              L1188:                            
         intpr.c   424            {
         intpr.c   425                    //printf("state=%d\t",state);getch();
         intpr.c   426                    switch(state)
    00000500 982B                   MOV.W       L1594,R8   ; H'00C8
    00000502 60D3                   MOV         R13,R0
    00000504 DA20                   MOV.L       L1594+46,R10; L533
    00000506 6B83                   MOV         R8,R11
    00000508 DE16                   MOV.L       L1594+10,R14; _token_type
    0000050A 8801                   CMP/EQ      #1,R0
    0000050C 8D0C                   BT/S        L1014
    0000050E 7B0E                   ADD         #14,R11
    00000510 8802                   CMP/EQ      #2,R0
    00000512 894C                   BT          L1015
    00000514 8803                   CMP/EQ      #3,R0
    00000516 8960                   BT          L1016
    00000518 8804                   CMP/EQ      #4,R0
    0000051A 8964                   BT          L1018
    0000051C 8805                   CMP/EQ      #5,R0
    0000051E 8B01                   BF          L1595
    00000520 A07B                   BRA         L1021
    00000522 0009                   NOP
    00000524              L1595:                            
    00000524 AFEC                   BRA         L1188
    00000526 0009                   NOP
    00000528              L1014:                           ; case label 
         intpr.c   427                    {
         intpr.c   428                            //-----------------------------------------------------------------------
         intpr.c   429                            // <CONSTANT>                   => 2
         intpr.c   430                            // <ID>                                 => 2
         intpr.c   431                            // <UNARY OPR>                  => 1
         intpr.c   432                            // (                                    => 3
         intpr.c   433                            // <FUNC>                               => 4
         intpr.c   434                            case 1:
         intpr.c   435                            {
         intpr.c   436                                    l_get_token();//printf("[%s]\n",token);
    00000528 BDF0                   BSR         _l_get_token
    0000052A 0009                   NOP
         intpr.c   437                                    if (token_type==OPR_SUB)
    0000052C 9417                   MOV.W       L1594+4,R4 ; H'00CA
    0000052E 63E2                   MOV.L       @R14,R3
    00000530 3340                   CMP/EQ      R4,R3
    00000532 8B01                   BF          L1190
    00000534 A043                   BRA         L886
         intpr.c   438                                    {
         intpr.c   439                                            token_type = OPR_NEG;
    00000536 2EB2                   MOV.L       R11,@R14
    00000538              L1190:                            
         intpr.c   440                                            move(1);
         intpr.c   441                                    }
         intpr.c   442                                    else if (IS_OPR(token_type) && IS_UNARY_OPR(token_type))
    00000538 3383                   CMP/GE      R8,R3
    0000053A 8B03                   BF          L1192
    0000053C 9110                   MOV.W       L1594+6,R1 ; H'00D6
    0000053E 62E2                   MOV.L       @R14,R2
    00000540 3213                   CMP/GE      R1,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   22


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000542 893C                   BT          L886
    00000544              L1192:                            
         intpr.c   443                                    {
         intpr.c   444                                            move(1);
         intpr.c   445                                    }
         intpr.c   446                                    else if (IS_CONSTANT(token_type)) 
    00000544 60E2                   MOV.L       @R14,R0
    00000546 8803                   CMP/EQ      #3,R0
    00000548 8970                   BT          L884
    0000054A 60E2                   MOV.L       @R14,R0
    0000054C 8804                   CMP/EQ      #4,R0
    0000054E 896D                   BT          L884
         intpr.c   447                                    {
         intpr.c   448                                            move(2);
         intpr.c   449                                    }
         intpr.c   450                                    else if (token_type==TT_ID)
    00000550 60E2                   MOV.L       @R14,R0
    00000552 8802                   CMP/EQ      #2,R0
    00000554 8B1A                   BF          L1197
         intpr.c   451                                    {
         intpr.c   452                                            move(5);
    00000556 A06A                   BRA         L1574
    00000558 E405                   MOV         #5,R4
    0000055A              L1594:                            
    0000055A 00C8                   .DATA.W     H'00C8
    0000055C FF38                   .DATA.W     H'FF38
    0000055E 00CA                   .DATA.W     H'00CA
    00000560 00D6                   .DATA.W     H'00D6
    00000562 0000                   .DATA.W     0
    00000564 <00000000>             .DATA.L     _token_type
    00000568 <00000000>             .DATA.L     _merror_msg
    0000056C <00000000>             .DATA.L     _token
    00000570 <00000000>             .DATA.L     _OPR_TYPE_STR
    00000574 <00000000>             .DATA.L     L510
    00000578 <00000000>             .DATA.L     _TYPE_STR
    0000057C <00000000>             .DATA.L     L512
    00000580 <00000000>             .DATA.L     L514
    00000584 <00000000>             .DATA.L     _pline
    00000588 <00000000>             .DATA.L     L533
    0000058C              L1197:                            
         intpr.c   453                                    }
         intpr.c   454                                    else if (token_type==TT_LBK)
    0000058C 8806                   CMP/EQ      #6,R0
    0000058E 8949                   BT          L881
         intpr.c   455                                    {
         intpr.c   456                                            move(3);
         intpr.c   457                                    }
         intpr.c   458                                    else if (IS_RESWORD(token_type))
    00000590 63E2                   MOV.L       @R14,R3
    00000592 E464                   MOV         #100,R4
    00000594 3343                   CMP/GE      R4,R3
    00000596 8B05                   BF          L1201
    00000598 915B                   MOV.W       L1596,R1   ; H'00C8
    0000059A 62E2                   MOV.L       @R14,R2
    0000059C 3213                   CMP/GE      R1,R2
    0000059E 8901                   BT          L1201
         intpr.c   459                                    {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   23


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         intpr.c   460                                            move(4);
    000005A0 A045                   BRA         L1574
    000005A2 E404                   MOV         #4,R4
    000005A4              L1201:                            
         intpr.c   461                                    }
         intpr.c   462                                    else
         intpr.c   463                                            merror_illegal_token();
    000005A4 D22B                   MOV.L       L1596+2,R2 ; _merror_illegal_token
    000005A6 420B                   JSR         @R2
    000005A8 0009                   NOP
         intpr.c   464                            }break;
    000005AA AFA9                   BRA         L1188
    000005AC 0009                   NOP
    000005AE              L1015:                           ; case label 
         intpr.c   465                            //-----------------------------------------------------------------------
         intpr.c   466                            // <OPR>                                => 1
         intpr.c   467                            // <OTHER THINGS!>              => END!
         intpr.c   468                            case 2:
         intpr.c   469                            {
         intpr.c   470                                    l_get_token();//printf("[%s]\n",token);
    000005AE BDAD                   BSR         _l_get_token
    000005B0 0009                   NOP
         intpr.c   471                                    if (IS_OPR(token_type))
    000005B2 63E2                   MOV.L       @R14,R3
    000005B4 3383                   CMP/GE      R8,R3
    000005B6 8B07                   BF          L1203
         intpr.c   472                                    {
         intpr.c   473                                            if(IS_BINARY_OPR(token_type))
    000005B8 61E2                   MOV.L       @R14,R1
    000005BA 31B3                   CMP/GE      R11,R1
    000005BC 8901                   BT          L1204
    000005BE              L886:
         intpr.c   474                                            {
         intpr.c   475                                                    move(1);
    000005BE AF9F                   BRA         L1188
    000005C0 6D93                   MOV         R9,R13
    000005C2              L1204:                            
         intpr.c   476                                            }
         intpr.c   477                                            else
         intpr.c   478                                            {
         intpr.c   479                                                    merror_illegal_token();
    000005C2 D224                   MOV.L       L1596+2,R2 ; _merror_illegal_token
    000005C4 420B                   JSR         @R2
    000005C6 0009                   NOP
    000005C8              L1203:                            
         intpr.c   480                                            }
         intpr.c   481                                    }
         intpr.c   482                                    // END!
         intpr.c   483                                    l_put_back();
    000005C8 4F26                   LDS.L       @R15+,PR
    000005CA 68F6                   MOV.L       @R15+,R8
    000005CC 69F6                   MOV.L       @R15+,R9
    000005CE 6AF6                   MOV.L       @R15+,R10
    000005D0 6BF6                   MOV.L       @R15+,R11
    000005D2 6CF6                   MOV.L       @R15+,R12
    000005D4 6DF6                   MOV.L       @R15+,R13
    000005D6 AD8E                   BRA         _l_put_back




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   24


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000005D8 6EF6                   MOV.L       @R15+,R14
    000005DA              L1016:                           ; case label 
         intpr.c   484                                    return;
         intpr.c   485                            }break;
         intpr.c   486                            //-----------------------------------------------------------------------
         intpr.c   487                            //      <EXP> then )            => 2
         intpr.c   488                            case 3:
         intpr.c   489                            {
         intpr.c   490                                    //puts("<match inner expr>");
         intpr.c   491                                    match_exp(pline);
    000005DA BF85                   BSR         _match_exp
    000005DC 64C2                   MOV.L       @R12,R4
         intpr.c   492                                    match_str(")");
    000005DE BF33                   BSR         _match_str
    000005E0 64A3                   MOV         R10,R4
    000005E2 A023                   BRA         L884
    000005E4 0009                   NOP
    000005E6              L1018:                           ; case label 
         intpr.c   493                                    move(2);
         intpr.c   494                            }break;
         intpr.c   495                            //-----------------------------------------------------------------------
         intpr.c   496                            // ( then <EXP>,<EXP>,<EXP>... then )   => 2
         intpr.c   497                            case 4:
         intpr.c   498                            {
         intpr.c   499                                    int argc = token_ext,i;
    000005E6 D41C                   MOV.L       L1596+6,R4 ; _token_ext
    000005E8 6D42                   MOV.L       @R4,R13
         intpr.c   500                                    match_str("(");
    000005EA D41C                   MOV.L       L1596+10,R4; L537
    000005EC BF2C                   BSR         _match_str
    000005EE 0009                   NOP
         intpr.c   501                                    for(i=0;i<argc;++i)
    000005F0 E400                   MOV         #0,R4
    000005F2 6E43                   MOV         R4,R14
    000005F4 6BD3                   MOV         R13,R11
    000005F6 4D15                   CMP/PL      R13
    000005F8 8F18                   BF/S        L884
    000005FA 7BFF                   ADD         #-1,R11
    000005FC              L1208:                            
         intpr.c   502                                    {
         intpr.c   503                                            match_exp(pline);
    000005FC BF74                   BSR         _match_exp
    000005FE 64C2                   MOV.L       @R12,R4
         intpr.c   504                                            if (i != argc-1)        match_str(",");
    00000600 3EB0                   CMP/EQ      R11,R14
    00000602 8902                   BT          L1209
    00000604 D816                   MOV.L       L1596+14,R8; L539
    00000606 A001                   BRA         L1572
    00000608 6483                   MOV         R8,R4
    0000060A              L1209:                            
         intpr.c   505                                            else                            match_str(")");
    0000060A 64A3                   MOV         R10,R4
    0000060C              L1572:                            
    0000060C BF1C                   BSR         _match_str
    0000060E 0009                   NOP
    00000610 7E01                   ADD         #1,R14
    00000612 3ED3                   CMP/GE      R13,R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   25


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000614 8BF2                   BF          L1208
    00000616 A009                   BRA         L884
    00000618 0009                   NOP
    0000061A              L1021:                           ; case label 
         intpr.c   506                                    }
         intpr.c   507                                    move(2);
         intpr.c   508                            }break;
         intpr.c   509                            //-----------------------------------------------------------------------
         intpr.c   510                            // 
         intpr.c   511                            case 5:
         intpr.c   512                            {
         intpr.c   513                                    l_get_token();
    0000061A BD77                   BSR         _l_get_token
    0000061C 0009                   NOP
         intpr.c   514                                    if (token_type==TT_LBK) 
    0000061E 60E2                   MOV.L       @R14,R0
    00000620 8806                   CMP/EQ      #6,R0
    00000622 8B01                   BF          L1211
    00000624              L881:
         intpr.c   515                                    {
         intpr.c   516                                            move(3);
    00000624 A003                   BRA         L1574
    00000626 E403                   MOV         #3,R4
    00000628              L1211:                            
         intpr.c   517                                    }
         intpr.c   518                                    else
         intpr.c   519                                    {
         intpr.c   520                                            l_put_back();
    00000628 BD65                   BSR         _l_put_back
    0000062A 0009                   NOP
    0000062C              L884:
         intpr.c   521                                            move(2);
    0000062C E402                   MOV         #2,R4
    0000062E              L1574:                            
    0000062E AF67                   BRA         L1188
    00000630 6D43                   MOV         R4,R13
         intpr.c   522                                    }
         intpr.c   523                            }break;
         intpr.c   524                    }
         intpr.c   525            }
         intpr.c   526    }
         intpr.c   527    //----------------------------------------------------------------------------------------
         intpr.c   528    // calc part
         intpr.c   529    typedef real (*FUNCTION)(real * );
         intpr.c   530    
         intpr.c   531    real func_sin(real * param) {return sin(param[0]);}
    00000632              _func_sin:                       ; function: func_sin
                                                           ; frame size=20
    00000632 6343                   MOV         R4,R3
    00000634 4F22                   STS.L       PR,@-R15
    00000636 7FFC                   ADD         #-4,R15
    00000638 2F42                   MOV.L       R4,@R15
    0000063A 5231                   MOV.L       @(4,R3),R2
    0000063C 2F26                   MOV.L       R2,@-R15
    0000063E 6232                   MOV.L       @R3,R2
    00000640 D308                   MOV.L       L1596+18,R3; _sin
    00000642 2F26                   MOV.L       R2,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   26


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000644 51F4                   MOV.L       @(16,R15),R1
    00000646 430B                   JSR         @R3
    00000648 2F16                   MOV.L       R1,@-R15
    0000064A 7F10                   ADD         #16,R15
    0000064C 4F26                   LDS.L       @R15+,PR
    0000064E 000B                   RTS
    00000650 0009                   NOP
    00000652              L1596:                            
    00000652 00C8                   .DATA.W     H'00C8
    00000654 <00000000>             .DATA.L     _merror_illegal_token
    00000658 <00000000>             .DATA.L     _token_ext
    0000065C <00000000>             .DATA.L     L537
    00000660 <00000000>             .DATA.L     L539
    00000664 <00000000>             .DATA.L     _sin
         intpr.c   532    real func_cos(real * param) {return cos(param[0]);}
    00000668              _func_cos:                       ; function: func_cos
                                                           ; frame size=20
    00000668 4F22                   STS.L       PR,@-R15
    0000066A 6343                   MOV         R4,R3
    0000066C 7FFC                   ADD         #-4,R15
    0000066E 2F42                   MOV.L       R4,@R15
    00000670 5231                   MOV.L       @(4,R3),R2
    00000672 2F26                   MOV.L       R2,@-R15
    00000674 6232                   MOV.L       @R3,R2
    00000676 2F26                   MOV.L       R2,@-R15
    00000678 51F4                   MOV.L       @(16,R15),R1
    0000067A D356                   MOV.L       L1597+6,R3 ; _cos
    0000067C 430B                   JSR         @R3
    0000067E 2F16                   MOV.L       R1,@-R15
    00000680 7F10                   ADD         #16,R15
    00000682 4F26                   LDS.L       @R15+,PR
    00000684 000B                   RTS
    00000686 0009                   NOP
         intpr.c   533    real func_tan(real * param) {return tan(param[0]);}
    00000688              _func_tan:                       ; function: func_tan
                                                           ; frame size=20
    00000688 4F22                   STS.L       PR,@-R15
    0000068A 6343                   MOV         R4,R3
    0000068C 7FFC                   ADD         #-4,R15
    0000068E 2F42                   MOV.L       R4,@R15
    00000690 5231                   MOV.L       @(4,R3),R2
    00000692 2F26                   MOV.L       R2,@-R15
    00000694 6232                   MOV.L       @R3,R2
    00000696 2F26                   MOV.L       R2,@-R15
    00000698 51F4                   MOV.L       @(16,R15),R1
    0000069A D34F                   MOV.L       L1597+10,R3; _tan
    0000069C 430B                   JSR         @R3
    0000069E 2F16                   MOV.L       R1,@-R15
    000006A0 7F10                   ADD         #16,R15
    000006A2 4F26                   LDS.L       @R15+,PR
    000006A4 000B                   RTS
    000006A6 0009                   NOP
         intpr.c   534    real func_log(real * param) {return log(param[0]);}
    000006A8              _func_log:                       ; function: func_log
                                                           ; frame size=20
    000006A8 4F22                   STS.L       PR,@-R15
    000006AA 6343                   MOV         R4,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   27


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000006AC 7FFC                   ADD         #-4,R15
    000006AE 2F42                   MOV.L       R4,@R15
    000006B0 5231                   MOV.L       @(4,R3),R2
    000006B2 2F26                   MOV.L       R2,@-R15
    000006B4 6232                   MOV.L       @R3,R2
    000006B6 2F26                   MOV.L       R2,@-R15
    000006B8 51F4                   MOV.L       @(16,R15),R1
    000006BA D348                   MOV.L       L1597+14,R3; _log
    000006BC 430B                   JSR         @R3
    000006BE 2F16                   MOV.L       R1,@-R15
    000006C0 7F10                   ADD         #16,R15
    000006C2 4F26                   LDS.L       @R15+,PR
    000006C4 000B                   RTS
    000006C6 0009                   NOP
         intpr.c   535    real func_exp(real * param) {return exp(param[0]);}
    000006C8              _func_exp:                       ; function: func_exp
                                                           ; frame size=20
    000006C8 4F22                   STS.L       PR,@-R15
    000006CA 6343                   MOV         R4,R3
    000006CC 7FFC                   ADD         #-4,R15
    000006CE 2F42                   MOV.L       R4,@R15
    000006D0 5231                   MOV.L       @(4,R3),R2
    000006D2 2F26                   MOV.L       R2,@-R15
    000006D4 6232                   MOV.L       @R3,R2
    000006D6 2F26                   MOV.L       R2,@-R15
    000006D8 51F4                   MOV.L       @(16,R15),R1
    000006DA D341                   MOV.L       L1597+18,R3; _exp
    000006DC 430B                   JSR         @R3
    000006DE 2F16                   MOV.L       R1,@-R15
    000006E0 7F10                   ADD         #16,R15
    000006E2 4F26                   LDS.L       @R15+,PR
    000006E4 000B                   RTS
    000006E6 0009                   NOP
         intpr.c   536    real func_abs(real * param) {return fabs(param[0]);}
    000006E8              _func_abs:                       ; function: func_abs
                                                           ; frame size=20
    000006E8 4F22                   STS.L       PR,@-R15
    000006EA 6343                   MOV         R4,R3
    000006EC 7FFC                   ADD         #-4,R15
    000006EE 2F42                   MOV.L       R4,@R15
    000006F0 5231                   MOV.L       @(4,R3),R2
    000006F2 2F26                   MOV.L       R2,@-R15
    000006F4 6232                   MOV.L       @R3,R2
    000006F6 2F26                   MOV.L       R2,@-R15
    000006F8 51F4                   MOV.L       @(16,R15),R1
    000006FA D33A                   MOV.L       L1597+22,R3; _fabs
    000006FC 430B                   JSR         @R3
    000006FE 2F16                   MOV.L       R1,@-R15
    00000700 7F10                   ADD         #16,R15
    00000702 4F26                   LDS.L       @R15+,PR
    00000704 000B                   RTS
    00000706 0009                   NOP
         intpr.c   537    real func_ceil(real * param) {return ceil(param[0]);}
    00000708              _func_ceil:                      ; function: func_ceil
                                                           ; frame size=20
    00000708 4F22                   STS.L       PR,@-R15
    0000070A 6343                   MOV         R4,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   28


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000070C 7FFC                   ADD         #-4,R15
    0000070E 2F42                   MOV.L       R4,@R15
    00000710 5231                   MOV.L       @(4,R3),R2
    00000712 2F26                   MOV.L       R2,@-R15
    00000714 6232                   MOV.L       @R3,R2
    00000716 2F26                   MOV.L       R2,@-R15
    00000718 51F4                   MOV.L       @(16,R15),R1
    0000071A D333                   MOV.L       L1597+26,R3; _ceil
    0000071C 430B                   JSR         @R3
    0000071E 2F16                   MOV.L       R1,@-R15
    00000720 7F10                   ADD         #16,R15
    00000722 4F26                   LDS.L       @R15+,PR
    00000724 000B                   RTS
    00000726 0009                   NOP
         intpr.c   538    real func_floor(real * param) {return floor(param[0]);}
    00000728              _func_floor:                     ; function: func_floor
                                                           ; frame size=20
    00000728 4F22                   STS.L       PR,@-R15
    0000072A 6343                   MOV         R4,R3
    0000072C 7FFC                   ADD         #-4,R15
    0000072E 2F42                   MOV.L       R4,@R15
    00000730 5231                   MOV.L       @(4,R3),R2
    00000732 2F26                   MOV.L       R2,@-R15
    00000734 6232                   MOV.L       @R3,R2
    00000736 2F26                   MOV.L       R2,@-R15
    00000738 51F4                   MOV.L       @(16,R15),R1
    0000073A D32C                   MOV.L       L1597+30,R3; _floor
    0000073C 430B                   JSR         @R3
    0000073E 2F16                   MOV.L       R1,@-R15
    00000740 7F10                   ADD         #16,R15
    00000742 4F26                   LDS.L       @R15+,PR
    00000744 000B                   RTS
    00000746 0009                   NOP
         intpr.c   539    real func_fmod(real * param) {return fmod(param[0],param[1]);}
    00000748              _func_fmod:                      ; function: func_fmod
                                                           ; frame size=28
    00000748 4F22                   STS.L       PR,@-R15
    0000074A 6343                   MOV         R4,R3
    0000074C 7FFC                   ADD         #-4,R15
    0000074E 7308                   ADD         #8,R3
    00000750 2F42                   MOV.L       R4,@R15
    00000752 5231                   MOV.L       @(4,R3),R2
    00000754 2F26                   MOV.L       R2,@-R15
    00000756 6232                   MOV.L       @R3,R2
    00000758 2F26                   MOV.L       R2,@-R15
    0000075A 51F2                   MOV.L       @(8,R15),R1
    0000075C 5311                   MOV.L       @(4,R1),R3
    0000075E 2F36                   MOV.L       R3,@-R15
    00000760 6312                   MOV.L       @R1,R3
    00000762 2F36                   MOV.L       R3,@-R15
    00000764 52F6                   MOV.L       @(24,R15),R2
    00000766 D322                   MOV.L       L1597+34,R3; _fmod
    00000768 430B                   JSR         @R3
    0000076A 2F26                   MOV.L       R2,@-R15
    0000076C 7F18                   ADD         #24,R15
    0000076E 4F26                   LDS.L       @R15+,PR
    00000770 000B                   RTS




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   29


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000772 0009                   NOP
         intpr.c   540    
         intpr.c   541    FUNCTION BUILT_IN_FUNC[]=
         intpr.c   542    {
         intpr.c   543            func_sin                ,
         intpr.c   544            func_cos                ,
         intpr.c   545            func_tan                ,
         intpr.c   546            func_log                ,
         intpr.c   547            func_exp                ,
         intpr.c   548            func_abs                ,
         intpr.c   549            func_ceil               ,
         intpr.c   550            func_floor              ,
         intpr.c   551            func_fmod               ,
         intpr.c   552    };
         intpr.c   553    
         intpr.c   554    #define get_func(i)                     (BUILT_IN_FUNC[(i)-RES_SIN])
         intpr.c   555    #define move2(n)                        state=n
         intpr.c   556    #define push_opr(o)                     opr_stack[opr_size++] = (o)
         intpr.c   557    #define push_opd(o)                     opd_stack[opd_size++] = (o)
         intpr.c   558    #define STACK_SIZE                      64
         intpr.c   559    
         intpr.c   560    const int PRIOROTY[] = 
         intpr.c   561    {                        //----------------------------
         intpr.c   562            0xF             ,// OPR_MEM,                    // o.p
         intpr.c   563                             // ----------------------------
         intpr.c   564            0x5             ,// OPR_ADD,                    // a+b
         intpr.c   565            0x5             ,// OPR_SUB,                    // a-b
         intpr.c   566                             // ----------------------------
         intpr.c   567            0x7             ,// OPR_MUL,                    // a*b
         intpr.c   568            0x7             ,// OPR_DIV,                    // a/b
         intpr.c   569                             // ----------------------------
         intpr.c   570            0x8             ,// OPR_POW,                    // a^b
         intpr.c   571                             // ----------------------------
         intpr.c   572            0x4             ,// OPR_BE,                             // a>=b
         intpr.c   573            0x4             ,// OPR_BT,                             // a>b
         intpr.c   574            0x4             ,// OPR_LE,                             // a<=b
         intpr.c   575            0x4             ,// OPR_LT,                             // a<b
         intpr.c   576            0x4             ,// OPR_EQ                              // a=b
         intpr.c   577            0x4             ,// OPR_NEQ                             // a<>b
         intpr.c   578                             // ----------------------------
         intpr.c   579            0x2             ,// OPR_AND,                    // a and b
         intpr.c   580            0x2             ,// OPR_OR,                             // a or b
         intpr.c   581                             // ----------------------------
         intpr.c   582            0x6             ,// OPR_NEG,                    // -a
         intpr.c   583                             // ----------------------------
         intpr.c   584            0x3             ,// OPR_NOT,                    // not a
         intpr.c   585    };
         intpr.c   586    
         intpr.c   587    #define priority(opr)           (PRIOROTY[(opr)-OPR_MEM])       
         intpr.c   588    
         intpr.c   589    real calc_pop (real * opd_stack,int * opr_stack,int * opd_size,int * opr_size)
    00000774              _calc_pop:                       ; function: calc_pop
                                                           ; frame size=44
                                                           ; used runtime library name:
                                                           ; __addd, __subdr, __muld, __divdr, __negd, __dtoi, __itod, __eqd, __ned,
                        +                                   __gtd, __ltd, __ged, __led
    00000774 2FE6                   MOV.L       R14,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   30


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000776 4F22                   STS.L       PR,@-R15
         intpr.c   590    {
         intpr.c   591            int             opr;
         intpr.c   592            
         intpr.c   593            opr = opr_stack[--(*opr_size)];
         intpr.c   594            //printf("%d %d %d\n",*opr_size,*opd_size,opr);
         intpr.c   595    
         intpr.c   596            if (IS_UNARY_OPR(opr))
    00000778 9329                   MOV.W       L1597,R3   ; H'00D6
    0000077A 7FF0                   ADD         #-16,R15
    0000077C 6072                   MOV.L       @R7,R0
    0000077E 70FF                   ADD         #-1,R0
    00000780 2702                   MOV.L       R0,@R7
    00000782 4008                   SHLL2       R0
    00000784 0E5E                   MOV.L       @(R0,R5),R14
    00000786 3E33                   CMP/GE      R3,R14
    00000788 8B56                   BF          L1222
         intpr.c   597            {
         intpr.c   598                    real l;
         intpr.c   599                    l  = opd_stack[--(*opd_size)];
    0000078A 6162                   MOV.L       @R6,R1
    0000078C 71FF                   ADD         #-1,R1
    0000078E 2612                   MOV.L       R1,@R6
    00000790 4108                   SHLL2       R1
    00000792 4100                   SHLL        R1
    00000794 341C                   ADD         R1,R4
    00000796 6243                   MOV         R4,R2
    00000798 6022                   MOV.L       @R2,R0
    0000079A 61F3                   MOV         R15,R1
    0000079C 7108                   ADD         #8,R1
    0000079E 2102                   MOV.L       R0,@R1
    000007A0 5021                   MOV.L       @(4,R2),R0
    000007A2 1101                   MOV.L       R0,@(4,R1)
         intpr.c   600                    switch(opr)
    000007A4 9113                   MOV.W       L1597,R1   ; H'00D6
    000007A6 60E3                   MOV         R14,R0
    000007A8 3010                   CMP/EQ      R1,R0
    000007AA 8904                   BT          L1022
    000007AC 9110                   MOV.W       L1597+2,R1 ; H'00D7
    000007AE 3010                   CMP/EQ      R1,R0
    000007B0 8922                   BT          L1023
    000007B2 A031                   BRA         L1024
    000007B4 0009                   NOP
    000007B6              L1022:                           ; case label 
         intpr.c   601                    {
         intpr.c   602                            case OPR_NEG:   return -l;
    000007B6 52F3                   MOV.L       @(12,R15),R2
    000007B8 D10E                   MOV.L       L1597+38,R1; __negd
    000007BA 2F26                   MOV.L       R2,@-R15
    000007BC 52F3                   MOV.L       @(12,R15),R2
    000007BE 2F26                   MOV.L       R2,@-R15
    000007C0 52F8                   MOV.L       @(32,R15),R2
    000007C2 410B                   JSR         @R1
    000007C4 2F26                   MOV.L       R2,@-R15
    000007C6 7F10                   ADD         #16,R15
    000007C8 4F26                   LDS.L       @R15+,PR
    000007CA 000B                   RTS




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   31


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000007CC 6EF6                   MOV.L       @R15+,R14
    000007CE              L1597:                            
    000007CE 00D6                   .DATA.W     H'00D6
    000007D0 00D7                   .DATA.W     H'00D7
    000007D2 0000                   .DATA.W     0
    000007D4 <00000000>             .DATA.L     _cos
    000007D8 <00000000>             .DATA.L     _tan
    000007DC <00000000>             .DATA.L     _log
    000007E0 <00000000>             .DATA.L     _exp
    000007E4 <00000000>             .DATA.L     _fabs
    000007E8 <00000000>             .DATA.L     _ceil
    000007EC <00000000>             .DATA.L     _floor
    000007F0 <00000000>             .DATA.L     _fmod
    000007F4 <00000000>             .DATA.L     __negd
    000007F8              L1023:                           ; case label 
         intpr.c   603                            case OPR_NOT:   return (real)(!(int)l);
    000007F8 53F3                   MOV.L       @(12,R15),R3
    000007FA 2F36                   MOV.L       R3,@-R15
    000007FC 53F3                   MOV.L       @(12,R15),R3
    000007FE D20A                   MOV.L       L1598+2,R2 ; __dtoi
    00000800 420B                   JSR         @R2
    00000802 2F36                   MOV.L       R3,@-R15
    00000804 52F6                   MOV.L       @(24,R15),R2
    00000806 2008                   TST         R0,R0
    00000808 D308                   MOV.L       L1598+6,R3 ; __itod
    0000080A 0029                   MOVT        R0
    0000080C 430B                   JSR         @R3
    0000080E 2F26                   MOV.L       R2,@-R15
    00000810 7F10                   ADD         #16,R15
    00000812 4F26                   LDS.L       @R15+,PR
    00000814 000B                   RTS
    00000816 6EF6                   MOV.L       @R15+,R14
    00000818              L1024:                           ; default label 
         intpr.c   604                            default:merror_msg("unknown operator [%d]!",opr);
    00000818 2FE6                   MOV.L       R14,@-R15
    0000081A D305                   MOV.L       L1598+10,R3; L582
    0000081C D205                   MOV.L       L1598+14,R2; _merror_msg
    0000081E 420B                   JSR         @R2
    00000820 2F36                   MOV.L       R3,@-R15
    00000822 A124                   BRA         L1226
    00000824 7F08                   ADD         #8,R15
    00000826              L1598:                            
    00000826 0000                   .DATA.W     0
    00000828 <00000000>             .DATA.L     __dtoi
    0000082C <00000000>             .DATA.L     __itod
    00000830 <00000000>             .DATA.L     L582
    00000834 <00000000>             .DATA.L     _merror_msg
    00000838              L1222:                            
         intpr.c   605                    }
         intpr.c   606            }
         intpr.c   607            else
         intpr.c   608            {
         intpr.c   609                    real l,r;
         intpr.c   610                    r  = opd_stack[--(*opd_size)];
    00000838 6262                   MOV.L       @R6,R2
    0000083A 60F3                   MOV         R15,R0
    0000083C 72FF                   ADD         #-1,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   32


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000083E 2622                   MOV.L       R2,@R6
    00000840 4208                   SHLL2       R2
    00000842 4200                   SHLL        R2
    00000844 324C                   ADD         R4,R2
    00000846 6123                   MOV         R2,R1
    00000848 6312                   MOV.L       @R1,R3
         intpr.c   611                    l  = opd_stack[--(*opd_size)];
    0000084A 62F3                   MOV         R15,R2
    0000084C 2032                   MOV.L       R3,@R0
    0000084E 7208                   ADD         #8,R2
    00000850 5311                   MOV.L       @(4,R1),R3
    00000852 1031                   MOV.L       R3,@(4,R0)
    00000854 6162                   MOV.L       @R6,R1
         intpr.c   612                    switch(opr)
    00000856 60E3                   MOV         R14,R0
    00000858 71FF                   ADD         #-1,R1
    0000085A 2612                   MOV.L       R1,@R6
    0000085C 4108                   SHLL2       R1
    0000085E 4100                   SHLL        R1
    00000860 341C                   ADD         R1,R4
    00000862 6343                   MOV         R4,R3
    00000864 6132                   MOV.L       @R3,R1
    00000866 2212                   MOV.L       R1,@R2
    00000868 5131                   MOV.L       @(4,R3),R1
    0000086A 1211                   MOV.L       R1,@(4,R2)
    0000086C 910B                   MOV.W       L1599,R1   ; H'00C9
    0000086E 3018                   SUB         R1,R0
    00000870 E10D                   MOV         #13,R1
    00000872 3012                   CMP/HS      R1,R0
    00000874 8B01                   BF          L1600
    00000876 A0F4                   BRA         L1039
    00000878 0009                   NOP
    0000087A              L1600:                            
    0000087A 4000                   SHLL        R0
    0000087C 6103                   MOV         R0,R1
    0000087E C702                   MOVA        L1602,R0
    00000880 001D                   MOV.W       @(R0,R1),R0
    00000882 0023                   BRAF        R0
    00000884 0009                   NOP
    00000886              L1601:                            
    00000886              L1599:                            
    00000886 00C9                   .DATA.W     H'00C9
    00000888              L1602:
    00000888 001C                   .DATA.W     L1026-L1601
    0000088A 003C                   .DATA.W     L1027-L1601
    0000088C 005C                   .DATA.W     L1028-L1601
    0000088E 007C                   .DATA.W     L1029-L1601
    00000890 009C                   .DATA.W     L1030-L1601
    00000892 00BE                   .DATA.W     L1031-L1601
    00000894 00DA                   .DATA.W     L1032-L1601
    00000896 00F6                   .DATA.W     L1033-L1601
    00000898 0112                   .DATA.W     L1034-L1601
    0000089A 012E                   .DATA.W     L1035-L1601
    0000089C 014A                   .DATA.W     L1036-L1601
    0000089E 0170                   .DATA.W     L1037-L1601
    000008A0 01A6                   .DATA.W     L1038-L1601
         intpr.c   613                    {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   33


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         intpr.c   614                            case OPR_ADD:   return l+r;
    000008A2              L1026:                           ; case label 
    000008A2 53F3                   MOV.L       @(12,R15),R3
    000008A4 2F36                   MOV.L       R3,@-R15
    000008A6 53F3                   MOV.L       @(12,R15),R3
    000008A8 2F36                   MOV.L       R3,@-R15
    000008AA 52F3                   MOV.L       @(12,R15),R2
    000008AC D374                   MOV.L       L1603+2,R3 ; __addd
    000008AE 2F26                   MOV.L       R2,@-R15
    000008B0 52F3                   MOV.L       @(12,R15),R2
    000008B2 2F26                   MOV.L       R2,@-R15
    000008B4 51FA                   MOV.L       @(40,R15),R1
    000008B6 430B                   JSR         @R3
    000008B8 2F16                   MOV.L       R1,@-R15
    000008BA 7F10                   ADD         #16,R15
    000008BC 4F26                   LDS.L       @R15+,PR
    000008BE 000B                   RTS
    000008C0 6EF6                   MOV.L       @R15+,R14
    000008C2              L1027:                           ; case label 
         intpr.c   615                            case OPR_SUB:   return l-r;
    000008C2 52F3                   MOV.L       @(12,R15),R2
    000008C4 2F26                   MOV.L       R2,@-R15
    000008C6 52F3                   MOV.L       @(12,R15),R2
    000008C8 2F26                   MOV.L       R2,@-R15
    000008CA 53F3                   MOV.L       @(12,R15),R3
    000008CC D26D                   MOV.L       L1603+6,R2 ; __subdr
    000008CE 2F36                   MOV.L       R3,@-R15
    000008D0 53F3                   MOV.L       @(12,R15),R3
    000008D2 2F36                   MOV.L       R3,@-R15
    000008D4 51FA                   MOV.L       @(40,R15),R1
    000008D6 420B                   JSR         @R2
    000008D8 2F16                   MOV.L       R1,@-R15
    000008DA 7F10                   ADD         #16,R15
    000008DC 4F26                   LDS.L       @R15+,PR
    000008DE 000B                   RTS
    000008E0 6EF6                   MOV.L       @R15+,R14
    000008E2              L1028:                           ; case label 
         intpr.c   616                            case OPR_MUL:   return l*r;
    000008E2 53F3                   MOV.L       @(12,R15),R3
    000008E4 2F36                   MOV.L       R3,@-R15
    000008E6 53F3                   MOV.L       @(12,R15),R3
    000008E8 2F36                   MOV.L       R3,@-R15
    000008EA 52F3                   MOV.L       @(12,R15),R2
    000008EC D366                   MOV.L       L1603+10,R3; __muld
    000008EE 2F26                   MOV.L       R2,@-R15
    000008F0 52F3                   MOV.L       @(12,R15),R2
    000008F2 2F26                   MOV.L       R2,@-R15
    000008F4 51FA                   MOV.L       @(40,R15),R1
    000008F6 430B                   JSR         @R3
    000008F8 2F16                   MOV.L       R1,@-R15
    000008FA 7F10                   ADD         #16,R15
    000008FC 4F26                   LDS.L       @R15+,PR
    000008FE 000B                   RTS
    00000900 6EF6                   MOV.L       @R15+,R14
    00000902              L1029:                           ; case label 
         intpr.c   617                            case OPR_DIV:   return l/r;
    00000902 52F3                   MOV.L       @(12,R15),R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   34


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000904 2F26                   MOV.L       R2,@-R15
    00000906 52F3                   MOV.L       @(12,R15),R2
    00000908 2F26                   MOV.L       R2,@-R15
    0000090A 53F3                   MOV.L       @(12,R15),R3
    0000090C D25F                   MOV.L       L1603+14,R2; __divdr
    0000090E 2F36                   MOV.L       R3,@-R15
    00000910 53F3                   MOV.L       @(12,R15),R3
    00000912 2F36                   MOV.L       R3,@-R15
    00000914 51FA                   MOV.L       @(40,R15),R1
    00000916 420B                   JSR         @R2
    00000918 2F16                   MOV.L       R1,@-R15
    0000091A 7F10                   ADD         #16,R15
    0000091C 4F26                   LDS.L       @R15+,PR
    0000091E 000B                   RTS
    00000920 6EF6                   MOV.L       @R15+,R14
    00000922              L1030:                           ; case label 
         intpr.c   618                            case OPR_POW:   return pow(l,r);
    00000922 53F1                   MOV.L       @(4,R15),R3
    00000924 D15A                   MOV.L       L1603+18,R1; _pow
    00000926 2F36                   MOV.L       R3,@-R15
    00000928 53F1                   MOV.L       @(4,R15),R3
    0000092A 2F36                   MOV.L       R3,@-R15
    0000092C 52F5                   MOV.L       @(20,R15),R2
    0000092E 2F26                   MOV.L       R2,@-R15
    00000930 52F5                   MOV.L       @(20,R15),R2
    00000932 2F26                   MOV.L       R2,@-R15
    00000934 53FA                   MOV.L       @(40,R15),R3
    00000936 410B                   JSR         @R1
    00000938 2F36                   MOV.L       R3,@-R15
    0000093A 7F14                   ADD         #20,R15
    0000093C 7F10                   ADD         #16,R15
    0000093E 4F26                   LDS.L       @R15+,PR
    00000940 000B                   RTS
    00000942 6EF6                   MOV.L       @R15+,R14
    00000944              L1031:                           ; case label 
         intpr.c   619                            case OPR_BE:    return (real)(l>=r);
    00000944 53F3                   MOV.L       @(12,R15),R3
    00000946 2F36                   MOV.L       R3,@-R15
    00000948 53F3                   MOV.L       @(12,R15),R3
    0000094A 2F36                   MOV.L       R3,@-R15
    0000094C 52F3                   MOV.L       @(12,R15),R2
    0000094E 2F26                   MOV.L       R2,@-R15
    00000950 52F3                   MOV.L       @(12,R15),R2
    00000952 D350                   MOV.L       L1603+22,R3; __ged
    00000954 430B                   JSR         @R3
    00000956 2F26                   MOV.L       R2,@-R15
    00000958 51F6                   MOV.L       @(24,R15),R1
    0000095A 2F16                   MOV.L       R1,@-R15
    0000095C A044                   BRA         L1579
    0000095E 0009                   NOP
    00000960              L1032:                           ; case label 
         intpr.c   620                            case OPR_BT:    return (real)(l>r);
    00000960 53F3                   MOV.L       @(12,R15),R3
    00000962 2F36                   MOV.L       R3,@-R15
    00000964 53F3                   MOV.L       @(12,R15),R3
    00000966 2F36                   MOV.L       R3,@-R15
    00000968 52F3                   MOV.L       @(12,R15),R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   35


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000096A 2F26                   MOV.L       R2,@-R15
    0000096C 52F3                   MOV.L       @(12,R15),R2
    0000096E D34A                   MOV.L       L1603+26,R3; __gtd
    00000970 430B                   JSR         @R3
    00000972 2F26                   MOV.L       R2,@-R15
    00000974 51F6                   MOV.L       @(24,R15),R1
    00000976 2F16                   MOV.L       R1,@-R15
    00000978 A036                   BRA         L1579
    0000097A 0009                   NOP
    0000097C              L1033:                           ; case label 
         intpr.c   621                            case OPR_LE:    return (real)(l<=r);
    0000097C 53F3                   MOV.L       @(12,R15),R3
    0000097E 2F36                   MOV.L       R3,@-R15
    00000980 53F3                   MOV.L       @(12,R15),R3
    00000982 2F36                   MOV.L       R3,@-R15
    00000984 52F3                   MOV.L       @(12,R15),R2
    00000986 2F26                   MOV.L       R2,@-R15
    00000988 52F3                   MOV.L       @(12,R15),R2
    0000098A D344                   MOV.L       L1603+30,R3; __led
    0000098C 430B                   JSR         @R3
    0000098E 2F26                   MOV.L       R2,@-R15
    00000990 51F6                   MOV.L       @(24,R15),R1
    00000992 2F16                   MOV.L       R1,@-R15
    00000994 A028                   BRA         L1579
    00000996 0009                   NOP
    00000998              L1034:                           ; case label 
         intpr.c   622                            case OPR_LT:    return (real)(l<r);
    00000998 53F3                   MOV.L       @(12,R15),R3
    0000099A 2F36                   MOV.L       R3,@-R15
    0000099C 53F3                   MOV.L       @(12,R15),R3
    0000099E 2F36                   MOV.L       R3,@-R15
    000009A0 52F3                   MOV.L       @(12,R15),R2
    000009A2 2F26                   MOV.L       R2,@-R15
    000009A4 52F3                   MOV.L       @(12,R15),R2
    000009A6 D33E                   MOV.L       L1603+34,R3; __ltd
    000009A8 430B                   JSR         @R3
    000009AA 2F26                   MOV.L       R2,@-R15
    000009AC 51F6                   MOV.L       @(24,R15),R1
    000009AE 2F16                   MOV.L       R1,@-R15
    000009B0 A01A                   BRA         L1579
    000009B2 0009                   NOP
    000009B4              L1035:                           ; case label 
         intpr.c   623                            case OPR_EQ:    return (real)(l==r);
    000009B4 53F3                   MOV.L       @(12,R15),R3
    000009B6 2F36                   MOV.L       R3,@-R15
    000009B8 53F3                   MOV.L       @(12,R15),R3
    000009BA 2F36                   MOV.L       R3,@-R15
    000009BC 52F3                   MOV.L       @(12,R15),R2
    000009BE 2F26                   MOV.L       R2,@-R15
    000009C0 52F3                   MOV.L       @(12,R15),R2
    000009C2 D338                   MOV.L       L1603+38,R3; __eqd
    000009C4 430B                   JSR         @R3
    000009C6 2F26                   MOV.L       R2,@-R15
    000009C8 51F6                   MOV.L       @(24,R15),R1
    000009CA 2F16                   MOV.L       R1,@-R15
    000009CC A00C                   BRA         L1579
    000009CE 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   36


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000009D0              L1036:                           ; case label 
         intpr.c   624                            case OPR_NEQ:   return (real)(l!=r);
    000009D0 53F3                   MOV.L       @(12,R15),R3
    000009D2 2F36                   MOV.L       R3,@-R15
    000009D4 53F3                   MOV.L       @(12,R15),R3
    000009D6 2F36                   MOV.L       R3,@-R15
    000009D8 52F3                   MOV.L       @(12,R15),R2
    000009DA 2F26                   MOV.L       R2,@-R15
    000009DC 52F3                   MOV.L       @(12,R15),R2
    000009DE D332                   MOV.L       L1603+42,R3; __ned
    000009E0 430B                   JSR         @R3
    000009E2 2F26                   MOV.L       R2,@-R15
    000009E4 51F6                   MOV.L       @(24,R15),R1
    000009E6 2F16                   MOV.L       R1,@-R15
    000009E8              L1579:                            
    000009E8 D230                   MOV.L       L1603+46,R2; __itod
    000009EA 420B                   JSR         @R2
    000009EC 0009                   NOP
    000009EE 7F10                   ADD         #16,R15
    000009F0 4F26                   LDS.L       @R15+,PR
    000009F2 000B                   RTS
    000009F4 6EF6                   MOV.L       @R15+,R14
    000009F6              L1037:                           ; case label 
         intpr.c   625                            case OPR_AND:   return (real)((int)l && (int)r);
    000009F6 53F3                   MOV.L       @(12,R15),R3
    000009F8 D22D                   MOV.L       L1603+50,R2; __dtoi
    000009FA 2F36                   MOV.L       R3,@-R15
    000009FC 53F3                   MOV.L       @(12,R15),R3
    000009FE 420B                   JSR         @R2
    00000A00 2F36                   MOV.L       R3,@-R15
    00000A02 2008                   TST         R0,R0
    00000A04 8909                   BT          L1228
    00000A06 51F1                   MOV.L       @(4,R15),R1
    00000A08 D329                   MOV.L       L1603+50,R3; __dtoi
    00000A0A 2F16                   MOV.L       R1,@-R15
    00000A0C 51F1                   MOV.L       @(4,R15),R1
    00000A0E 430B                   JSR         @R3
    00000A10 2F16                   MOV.L       R1,@-R15
    00000A12 2008                   TST         R0,R0
    00000A14 8901                   BT          L1228
    00000A16 A001                   BRA         L1229
    00000A18 E001                   MOV         #1,R0
    00000A1A              L1228:                            
    00000A1A E000                   MOV         #0,R0
    00000A1C              L1229:                            
    00000A1C 52F6                   MOV.L       @(24,R15),R2
    00000A1E D123                   MOV.L       L1603+46,R1; __itod
    00000A20 410B                   JSR         @R1
    00000A22 2F26                   MOV.L       R2,@-R15
    00000A24 7F10                   ADD         #16,R15
    00000A26 4F26                   LDS.L       @R15+,PR
    00000A28 000B                   RTS
    00000A2A 6EF6                   MOV.L       @R15+,R14
    00000A2C              L1038:                           ; case label 
         intpr.c   626                            case OPR_OR:    return (real)((int)l || (int)r);
    00000A2C 53F3                   MOV.L       @(12,R15),R3
    00000A2E 2F36                   MOV.L       R3,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   37


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000A30 53F3                   MOV.L       @(12,R15),R3
    00000A32 D21F                   MOV.L       L1603+50,R2; __dtoi
    00000A34 420B                   JSR         @R2
    00000A36 2F36                   MOV.L       R3,@-R15
    00000A38 2008                   TST         R0,R0
    00000A3A 8B09                   BF          L1230
    00000A3C 51F1                   MOV.L       @(4,R15),R1
    00000A3E 2F16                   MOV.L       R1,@-R15
    00000A40 51F1                   MOV.L       @(4,R15),R1
    00000A42 D31B                   MOV.L       L1603+50,R3; __dtoi
    00000A44 430B                   JSR         @R3
    00000A46 2F16                   MOV.L       R1,@-R15
    00000A48 2008                   TST         R0,R0
    00000A4A 8B01                   BF          L1230
    00000A4C A001                   BRA         L1231
    00000A4E E000                   MOV         #0,R0
    00000A50              L1230:                            
    00000A50 E001                   MOV         #1,R0
    00000A52              L1231:                            
    00000A52 52F6                   MOV.L       @(24,R15),R2
    00000A54 D115                   MOV.L       L1603+46,R1; __itod
    00000A56 410B                   JSR         @R1
    00000A58 2F26                   MOV.L       R2,@-R15
    00000A5A 7F10                   ADD         #16,R15
    00000A5C 4F26                   LDS.L       @R15+,PR
    00000A5E 000B                   RTS
    00000A60 6EF6                   MOV.L       @R15+,R14
    00000A62              L1039:                           ; default label 
         intpr.c   627                            default:merror_msg("unknown operator [%d]!",opr);
    00000A62 2FE6                   MOV.L       R14,@-R15
    00000A64 D313                   MOV.L       L1603+54,R3; L582
    00000A66 D214                   MOV.L       L1603+58,R2; _merror_msg
    00000A68 420B                   JSR         @R2
    00000A6A 2F36                   MOV.L       R3,@-R15
    00000A6C 7F08                   ADD         #8,R15
    00000A6E              L1226:                            
         intpr.c   628                    }
         intpr.c   629            }
         intpr.c   630    
         intpr.c   631            return 0.0;
    00000A6E E000                   MOV         #0,R0
    00000A70 52F6                   MOV.L       @(24,R15),R2
    00000A72 2202                   MOV.L       R0,@R2
    00000A74 1201                   MOV.L       R0,@(4,R2)
         intpr.c   632    }
    00000A76              L1224:                            
    00000A76 7F10                   ADD         #16,R15
    00000A78 4F26                   LDS.L       @R15+,PR
    00000A7A 000B                   RTS
    00000A7C 6EF6                   MOV.L       @R15+,R14
    00000A7E              L1603:                            
    00000A7E 0000                   .DATA.W     0
    00000A80 <00000000>             .DATA.L     __addd
    00000A84 <00000000>             .DATA.L     __subdr
    00000A88 <00000000>             .DATA.L     __muld
    00000A8C <00000000>             .DATA.L     __divdr
    00000A90 <00000000>             .DATA.L     _pow




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   38


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000A94 <00000000>             .DATA.L     __ged
    00000A98 <00000000>             .DATA.L     __gtd
    00000A9C <00000000>             .DATA.L     __led
    00000AA0 <00000000>             .DATA.L     __ltd
    00000AA4 <00000000>             .DATA.L     __eqd
    00000AA8 <00000000>             .DATA.L     __ned
    00000AAC <00000000>             .DATA.L     __itod
    00000AB0 <00000000>             .DATA.L     __dtoi
    00000AB4 <00000000>             .DATA.L     L582
    00000AB8 <00000000>             .DATA.L     _merror_msg
         intpr.c   633    
         intpr.c   634    
         intpr.c   635    extern ARRAY * find_array (const char * array_name);
         intpr.c   636    extern void assign_element (const ARRAY * a,int index,real r);
         intpr.c   637    extern real get_element (const ARRAY * a,int index);
         intpr.c   638    
         intpr.c   639    #define SHOW_STACK                                                      \
         intpr.c   640    {                                                                                       \
         intpr.c   641            int i;                                                                  \
         intpr.c   642            puts("---show stack---");                               \
         intpr.c   643            for (i=0;i<opd_size;++i)                                \
         intpr.c   644            {                                                                               \
         intpr.c   645                    printf("[%.4lf]",opd_stack[i]);         \
         intpr.c   646            }puts("");                                                              \
         intpr.c   647            for (i=0;i<opr_size;++i)                                \
         intpr.c   648            {                                                                               \
         intpr.c   649                    printf("<%d>",opr_stack[i]);            \
         intpr.c   650            }puts("");                                                              \
         intpr.c   651    }WaitKey()
         intpr.c   652    
         intpr.c   653    real calc_check(int check,const char * exp)
    00000ABC              _calc_check:                     ; function: calc_check
                                                           ; frame size=844
                                                           ; used runtime library name:
                                                           ; __dtoi
    00000ABC 2FE6                   MOV.L       R14,@-R15
    00000ABE 2FD6                   MOV.L       R13,@-R15
    00000AC0 2FC6                   MOV.L       R12,@-R15
    00000AC2 2FB6                   MOV.L       R11,@-R15
    00000AC4 2FA6                   MOV.L       R10,@-R15
    00000AC6 2F96                   MOV.L       R9,@-R15
    00000AC8 2F86                   MOV.L       R8,@-R15
    00000ACA E800                   MOV         #0,R8
    00000ACC D937                   MOV.L       L1604+4,R9 ; _pline
    00000ACE 4F22                   STS.L       PR,@-R15
    00000AD0 906A                   MOV.W       L1604,R0   ; H'FCE0
    00000AD2 3F0C                   ADD         R0,R15
    00000AD4 9D69                   MOV.W       L1604+2,R13; H'0120
    00000AD6 6CF3                   MOV         R15,R12
    00000AD8 DE35                   MOV.L       L1604+8,R14; _token_type
    00000ADA 3DFC                   ADD         R15,R13
    00000ADC 1F44                   MOV.L       R4,@(16,R15)
    00000ADE 7C20                   ADD         #32,R12
    00000AE0 1F53                   MOV.L       R5,@(12,R15)
         intpr.c   654    {
         intpr.c   655            real    opd_stack[STACK_SIZE];
         intpr.c   656            int             opr_stack[STACK_SIZE];




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   39


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         intpr.c   657            int             opd_size = 0,opr_size = 0;
    00000AE2 1F81                   MOV.L       R8,@(4,R15)
    00000AE4 2F82                   MOV.L       R8,@R15
         intpr.c   658            int             state = 1/*,i*/;
         intpr.c   659            extern VAR * find_var (const char *);
         intpr.c   660    
         intpr.c   661            if (check)
    00000AE6 53F4                   MOV.L       @(16,R15),R3
    00000AE8 2338                   TST         R3,R3
    00000AEA 8D0C                   BT/S        L1232
    00000AEC EB01                   MOV         #1,R11
         intpr.c   662            {
         intpr.c   663                    match_exp(exp);
    00000AEE BCFB                   BSR         _match_exp
    00000AF0 54F3                   MOV.L       @(12,R15),R4
         intpr.c   664                    l_get_token();
    00000AF2 BB0B                   BSR         _l_get_token
    00000AF4 0009                   NOP
         intpr.c   665                    if (token_type!=TT_LINE_END)
    00000AF6 63E2                   MOV.L       @R14,R3
    00000AF8 2338                   TST         R3,R3
    00000AFA 8904                   BT          L1232
         intpr.c   666                    {
         intpr.c   667                            merror_msg("illegal expr");
    00000AFC D32D                   MOV.L       L1604+12,R3; L602
    00000AFE D22E                   MOV.L       L1604+16,R2; _merror_msg
    00000B00 420B                   JSR         @R2
    00000B02 2F36                   MOV.L       R3,@-R15
    00000B04 7F04                   ADD         #4,R15
    00000B06              L1232:                            
         intpr.c   668                    }
         intpr.c   669            }
         intpr.c   670    
         intpr.c   671            pline = exp;
    00000B06 51F3                   MOV.L       @(12,R15),R1
    00000B08 2912                   MOV.L       R1,@R9
    00000B0A 50F4                   MOV.L       @(16,R15),R0
    00000B0C 2008                   TST         R0,R0
    00000B0E 0029                   MOVT        R0
    00000B10 1F03                   MOV.L       R0,@(12,R15)
         intpr.c   672    
         intpr.c   673            while(1)
    00000B12              L1236:                            
         intpr.c   674            {
         intpr.c   675                    l_get_token();//puts(token);SHOW_STACK;
    00000B12 BAFB                   BSR         _l_get_token
    00000B14 0009                   NOP
         intpr.c   676                    // exit
         intpr.c   677                    if (token_type==TT_LINE_END)
    00000B16 63E2                   MOV.L       @R14,R3
    00000B18 2338                   TST         R3,R3
    00000B1A 8B01                   BF          L1605
    00000B1C A170                   BRA         L1267
    00000B1E 0009                   NOP
    00000B20              L1605:                            
         intpr.c   678                    {
         intpr.c   679                            break;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   40


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         intpr.c   680                    }
         intpr.c   681                    else if (token_type==TT_ID)
    00000B20 DA26                   MOV.L       L1604+20,R10; _token
    00000B22 60E2                   MOV.L       @R14,R0
    00000B24 8802                   CMP/EQ      #2,R0
    00000B26 8B4F                   BF          L1240
         intpr.c   682                    {
         intpr.c   683                            VAR * v;ARRAY * a;
         intpr.c   684                            if (state!=1 && !check)
    00000B28 60B3                   MOV         R11,R0
    00000B2A 8801                   CMP/EQ      #1,R0
    00000B2C 8904                   BT          L1241
    00000B2E 53F3                   MOV.L       @(12,R15),R3
    00000B30 2338                   TST         R3,R3
    00000B32 8901                   BT          L1606
    00000B34 A140                   BRA         L891
    00000B36 0009                   NOP
    00000B38              L1606:                            
    00000B38              L1241:                            
         intpr.c   685                            {
         intpr.c   686                                    l_put_back();
         intpr.c   687                                    break;
         intpr.c   688                            }
         intpr.c   689                            v = find_var(token);
    00000B38 B228                   BSR         _find_var
    00000B3A 64A3                   MOV         R10,R4
    00000B3C 6403                   MOV         R0,R4
         intpr.c   690                            if (v!=NULL)
    00000B3E 2448                   TST         R4,R4
    00000B40 890E                   BT          L1242
         intpr.c   691                            {
         intpr.c   692                                    push_opd(v->value);
    00000B42 6243                   MOV         R4,R2
    00000B44 53F1                   MOV.L       @(4,R15),R3
    00000B46 7204                   ADD         #4,R2
    00000B48 7301                   ADD         #1,R3
    00000B4A 1F31                   MOV.L       R3,@(4,R15)
    00000B4C 6022                   MOV.L       @R2,R0
    00000B4E 73FF                   ADD         #-1,R3
    00000B50 4308                   SHLL2       R3
    00000B52 4300                   SHLL        R3
    00000B54 33DC                   ADD         R13,R3
    00000B56 6133                   MOV         R3,R1
    00000B58 2102                   MOV.L       R0,@R1
    00000B5A 5021                   MOV.L       @(4,R2),R0
    00000B5C A045                   BRA         L890
    00000B5E 1101                   MOV.L       R0,@(4,R1)
    00000B60              L1242:                            
         intpr.c   693                                    move2(2);
         intpr.c   694                                    continue;
         intpr.c   695                            }
         intpr.c   696                            a = find_array (token);
    00000B60 B25B                   BSR         _find_array
    00000B62 64A3                   MOV         R10,R4
         intpr.c   697                            if (a!=NULL)
    00000B64 2008                   TST         R0,R0
    00000B66 8D18                   BT/S        L1243




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   41


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000B68 1F02                   MOV.L       R0,@(8,R15)
         intpr.c   698                            {
         intpr.c   699                                    int index;
         intpr.c   700                                    l_get_token();//skip (
    00000B6A BACF                   BSR         _l_get_token
    00000B6C 0009                   NOP
         intpr.c   701                                    index = (int)calc_check(FALSE,pline);
    00000B6E 7FF8                   ADD         #-8,R15
    00000B70 6592                   MOV.L       @R9,R5
    00000B72 E400                   MOV         #0,R4
    00000B74 BFA2                   BSR         _calc_check
    00000B76 2FF6                   MOV.L       R15,@-R15
    00000B78 D211                   MOV.L       L1604+24,R2; __dtoi
    00000B7A 420B                   JSR         @R2
    00000B7C 7F04                   ADD         #4,R15
    00000B7E 6503                   MOV         R0,R5
         intpr.c   702                                    // delete this line,calc_check call skip ( automatically
         intpr.c   703                                    //l_get_token();//skip )
         intpr.c   704                                    push_opd(get_element(a,index));
    00000B80 53F1                   MOV.L       @(4,R15),R3
    00000B82 7301                   ADD         #1,R3
    00000B84 1F31                   MOV.L       R3,@(4,R15)
    00000B86 73FF                   ADD         #-1,R3
    00000B88 54F2                   MOV.L       @(8,R15),R4
    00000B8A 4308                   SHLL2       R3
    00000B8C 4300                   SHLL        R3
    00000B8E 33DC                   ADD         R13,R3
    00000B90 2F36                   MOV.L       R3,@-R15
    00000B92 B27C                   BSR         _get_element
    00000B94 0009                   NOP
    00000B96 A028                   BRA         L890
    00000B98 7F04                   ADD         #4,R15
    00000B9A              L1243:                            
         intpr.c   705                                    move2(2);
         intpr.c   706                                    continue;
         intpr.c   707                            }
         intpr.c   708                            merror_msg("Unrecognized identifier '%s'",token);
    00000B9A 2FA6                   MOV.L       R10,@-R15
    00000B9C D209                   MOV.L       L1604+28,R2; L612
    00000B9E D306                   MOV.L       L1604+16,R3; _merror_msg
    00000BA0 430B                   JSR         @R3
    00000BA2 2F26                   MOV.L       R2,@-R15
    00000BA4 AFB5                   BRA         L1236
    00000BA6 7F08                   ADD         #8,R15
    00000BA8              L1604:                            
    00000BA8 FCE0                   .DATA.W     H'FCE0
    00000BAA 0120                   .DATA.W     H'0120
    00000BAC <00000000>             .DATA.L     _pline
    00000BB0 <00000000>             .DATA.L     _token_type
    00000BB4 <00000000>             .DATA.L     L602
    00000BB8 <00000000>             .DATA.L     _merror_msg
    00000BBC <00000000>             .DATA.L     _token
    00000BC0 <00000000>             .DATA.L     __dtoi
    00000BC4 <00000000>             .DATA.L     L612
    00000BC8              L1240:                            
         intpr.c   709                    }
         intpr.c   710                    // constant




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   42


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         intpr.c   711                    else if (token_type==TT_INT || token_type==TT_FLOAT)
    00000BC8 8803                   CMP/EQ      #3,R0
    00000BCA 8902                   BT          L1246
    00000BCC 60E2                   MOV.L       @R14,R0
    00000BCE 8804                   CMP/EQ      #4,R0
    00000BD0 8B0E                   BF          L1245
    00000BD2              L1246:                            
         intpr.c   712                    {
         intpr.c   713                            push_opd((real)atof(token));
    00000BD2 64A3                   MOV         R10,R4
    00000BD4 DB36                   MOV.L       L1607+10,R11; _atof
    00000BD6 53F1                   MOV.L       @(4,R15),R3
    00000BD8 7301                   ADD         #1,R3
    00000BDA 1F31                   MOV.L       R3,@(4,R15)
    00000BDC 73FF                   ADD         #-1,R3
    00000BDE 4308                   SHLL2       R3
    00000BE0 4300                   SHLL        R3
    00000BE2 33DC                   ADD         R13,R3
    00000BE4 4B0B                   JSR         @R11
    00000BE6 2F36                   MOV.L       R3,@-R15
    00000BE8 7F04                   ADD         #4,R15
    00000BEA              L890:
         intpr.c   714                            move2(2);
    00000BEA E402                   MOV         #2,R4
    00000BEC AF91                   BRA         L1236
    00000BEE 6B43                   MOV         R4,R11
    00000BF0              L1245:                            
         intpr.c   715                    }
         intpr.c   716                    // operator
         intpr.c   717                    else if (IS_OPR(token_type))
    00000BF0 9459                   MOV.W       L1607,R4   ; H'00C8
    00000BF2 62E2                   MOV.L       @R14,R2
    00000BF4 3243                   CMP/GE      R4,R2
    00000BF6 8B47                   BF          L1248
         intpr.c   718                    {
         intpr.c   719                            // neg "-" judgement
         intpr.c   720                            if (token_type==OPR_SUB && state==1)
    00000BF8 9456                   MOV.W       L1607+2,R4 ; H'00CA
    00000BFA 62E2                   MOV.L       @R14,R2
    00000BFC 3240                   CMP/EQ      R4,R2
    00000BFE 8B04                   BF          L1249
    00000C00 60B3                   MOV         R11,R0
    00000C02 8801                   CMP/EQ      #1,R0
    00000C04 8B01                   BF          L1249
         intpr.c   721                            {
         intpr.c   722                                    token_type = OPR_NEG;
    00000C06 9450                   MOV.W       L1607+4,R4 ; H'00D6
    00000C08 2E42                   MOV.L       R4,@R14
    00000C0A              L1249:                            
         intpr.c   723                            }
         intpr.c   724                            //
         intpr.c   725                            if (opr_size>0 &&
         intpr.c   726                                    opr_stack[opr_size-1]!=TT_LBK &&
         intpr.c   727                                    priority(token_type) <= priority(opr_stack[opr_size-1]))
    00000C0A 63F2                   MOV.L       @R15,R3
    00000C0C 4315                   CMP/PL      R3
    00000C0E 8B32                   BF          L1250




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   43


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000C10 60F2                   MOV.L       @R15,R0
    00000C12 63F3                   MOV         R15,R3
    00000C14 70FF                   ADD         #-1,R0
    00000C16 4008                   SHLL2       R0
    00000C18 7320                   ADD         #32,R3
    00000C1A 003E                   MOV.L       @(R0,R3),R0
    00000C1C 8806                   CMP/EQ      #6,R0
    00000C1E 892A                   BT          L1250
    00000C20 9244                   MOV.W       L1607+6,R2 ; H'FF38
    00000C22 D024                   MOV.L       L1607+14,R0; _token_type
    00000C24 6102                   MOV.L       @R0,R1
    00000C26 312C                   ADD         R2,R1
    00000C28 D023                   MOV.L       L1607+18,R0; _PRIOROTY
    00000C2A 4108                   SHLL2       R1
    00000C2C 031E                   MOV.L       @(R0,R1),R3
    00000C2E 60F3                   MOV         R15,R0
    00000C30 61F2                   MOV.L       @R15,R1
    00000C32 7020                   ADD         #32,R0
    00000C34 71FF                   ADD         #-1,R1
    00000C36 4108                   SHLL2       R1
    00000C38 011E                   MOV.L       @(R0,R1),R1
    00000C3A 321C                   ADD         R1,R2
    00000C3C D01E                   MOV.L       L1607+18,R0; _PRIOROTY
    00000C3E 4208                   SHLL2       R2
    00000C40 022E                   MOV.L       @(R0,R2),R2
    00000C42 3327                   CMP/GT      R2,R3
    00000C44 8917                   BT          L1250
         intpr.c   728                            {
         intpr.c   729                                    real result;
         intpr.c   730                                    result = calc_pop(opd_stack,opr_stack,&opd_size,&opr_size);
    00000C46 67F3                   MOV         R15,R7
    00000C48 66F3                   MOV         R15,R6
    00000C4A 7604                   ADD         #4,R6
    00000C4C 65C3                   MOV         R12,R5
    00000C4E 64D3                   MOV         R13,R4
    00000C50 62F3                   MOV         R15,R2
    00000C52 7218                   ADD         #24,R2
    00000C54 BD8E                   BSR         _calc_pop
    00000C56 2F26                   MOV.L       R2,@-R15
    00000C58 7F04                   ADD         #4,R15
         intpr.c   731                                    push_opd(result);
    00000C5A 63F3                   MOV         R15,R3
    00000C5C 52F1                   MOV.L       @(4,R15),R2
    00000C5E 7318                   ADD         #24,R3
    00000C60 7201                   ADD         #1,R2
    00000C62 1F21                   MOV.L       R2,@(4,R15)
    00000C64 6032                   MOV.L       @R3,R0
    00000C66 72FF                   ADD         #-1,R2
    00000C68 4208                   SHLL2       R2
    00000C6A 4200                   SHLL        R2
    00000C6C 32DC                   ADD         R13,R2
    00000C6E 6123                   MOV         R2,R1
    00000C70 2102                   MOV.L       R0,@R1
    00000C72 5031                   MOV.L       @(4,R3),R0
    00000C74 1101                   MOV.L       R0,@(4,R1)
    00000C76              L1250:                            
         intpr.c   732                            }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   44


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         intpr.c   733                            push_opr(token_type);
    00000C76 60F2                   MOV.L       @R15,R0
    00000C78 7001                   ADD         #1,R0
    00000C7A 2F02                   MOV.L       R0,@R15
    00000C7C 63E2                   MOV.L       @R14,R3
    00000C7E 70FF                   ADD         #-1,R0
    00000C80 4008                   SHLL2       R0
    00000C82 0C36                   MOV.L       R3,@(R0,R12)
         intpr.c   734                            move2(1);
    00000C84 AF45                   BRA         L1236
    00000C86 EB01                   MOV         #1,R11
    00000C88              L1248:                            
         intpr.c   735                    }
         intpr.c   736                    // process '(' and ')'
         intpr.c   737                    else if (token_type==TT_LBK)
    00000C88 60E2                   MOV.L       @R14,R0
    00000C8A 8806                   CMP/EQ      #6,R0
    00000C8C 8B07                   BF          L1252
         intpr.c   738                    {
         intpr.c   739                            push_opr(token_type);
    00000C8E 60F2                   MOV.L       @R15,R0
    00000C90 7001                   ADD         #1,R0
    00000C92 2F02                   MOV.L       R0,@R15
    00000C94 63E2                   MOV.L       @R14,R3
    00000C96 70FF                   ADD         #-1,R0
    00000C98 4008                   SHLL2       R0
    00000C9A AF3A                   BRA         L1236
    00000C9C 0C36                   MOV.L       R3,@(R0,R12)
    00000C9E              L1252:                            
         intpr.c   740                    }
         intpr.c   741                    else if (token_type==TT_RBK)
    00000C9E 8807                   CMP/EQ      #7,R0
    00000CA0 8B35                   BF          L1254
         intpr.c   742                    {
         intpr.c   743                            while(opr_stack[opr_size-1] /* top */ != TT_LBK && opr_size > 0)
    00000CA2 A023                   BRA         L1255
    00000CA4 0009                   NOP
    00000CA6              L1607:                            
    00000CA6 00C8                   .DATA.W     H'00C8
    00000CA8 00CA                   .DATA.W     H'00CA
    00000CAA 00D6                   .DATA.W     H'00D6
    00000CAC FF38                   .DATA.W     H'FF38
    00000CAE 0000                   .DATA.W     0
    00000CB0 <00000000>             .DATA.L     _atof
    00000CB4 <00000000>             .DATA.L     _token_type
    00000CB8 <00000000>             .DATA.L     _PRIOROTY
    00000CBC              L1256:                            
         intpr.c   744                            {
         intpr.c   745                                    real result;
         intpr.c   746                                    result = calc_pop(opd_stack,opr_stack,&opd_size,&opr_size);
    00000CBC 67F3                   MOV         R15,R7
    00000CBE 66F3                   MOV         R15,R6
    00000CC0 7604                   ADD         #4,R6
    00000CC2 65C3                   MOV         R12,R5
    00000CC4 64D3                   MOV         R13,R4
    00000CC6 63F3                   MOV         R15,R3
    00000CC8 7318                   ADD         #24,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   45


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000CCA BD53                   BSR         _calc_pop
    00000CCC 2F36                   MOV.L       R3,@-R15
    00000CCE 7F04                   ADD         #4,R15
         intpr.c   747                                    push_opd(result);
    00000CD0 53F1                   MOV.L       @(4,R15),R3
    00000CD2 62F3                   MOV         R15,R2
    00000CD4 7301                   ADD         #1,R3
    00000CD6 7218                   ADD         #24,R2
    00000CD8 1F31                   MOV.L       R3,@(4,R15)
    00000CDA 73FF                   ADD         #-1,R3
    00000CDC 6022                   MOV.L       @R2,R0
    00000CDE 4308                   SHLL2       R3
    00000CE0 4300                   SHLL        R3
    00000CE2 33DC                   ADD         R13,R3
    00000CE4 6133                   MOV         R3,R1
    00000CE6 2102                   MOV.L       R0,@R1
    00000CE8 5021                   MOV.L       @(4,R2),R0
    00000CEA 1101                   MOV.L       R0,@(4,R1)
    00000CEC              L1255:                            
    00000CEC 64F2                   MOV.L       @R15,R4
    00000CEE 74FF                   ADD         #-1,R4
    00000CF0 4408                   SHLL2       R4
    00000CF2 34CC                   ADD         R12,R4
    00000CF4 6042                   MOV.L       @R4,R0
    00000CF6 8806                   CMP/EQ      #6,R0
    00000CF8 8902                   BT          L1257
    00000CFA 62F2                   MOV.L       @R15,R2
    00000CFC 4215                   CMP/PL      R2
    00000CFE 89DD                   BT          L1256
    00000D00              L1257:                            
         intpr.c   748                            }
         intpr.c   749                            if (opr_stack[opr_size-1] /* top */ == TT_LBK)
    00000D00 6042                   MOV.L       @R4,R0
    00000D02 8806                   CMP/EQ      #6,R0
    00000D04 8B7C                   BF          L1267
         intpr.c   750                            {
         intpr.c   751                                    opr_size--; // pop '('
    00000D06 63F2                   MOV.L       @R15,R3
    00000D08 73FF                   ADD         #-1,R3
    00000D0A AF02                   BRA         L1236
    00000D0C 2F32                   MOV.L       R3,@R15
    00000D0E              L1254:                            
         intpr.c   752                            }
         intpr.c   753                            else // funcition call end
         intpr.c   754                            {
         intpr.c   755                                    break;
         intpr.c   756                            }
         intpr.c   757                    }
         intpr.c   758                    // built-in function call
         intpr.c   759                    else if (IS_RESWORD(token_type))
    00000D0E E464                   MOV         #100,R4
    00000D10 63E2                   MOV.L       @R14,R3
    00000D12 3343                   CMP/GE      R4,R3
    00000D14 8B48                   BF          L1261
    00000D16 9153                   MOV.W       L1608,R1   ; H'00C8
    00000D18 62E2                   MOV.L       @R14,R2
    00000D1A 3213                   CMP/GE      R1,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   46


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000D1C 8944                   BT          L1261
         intpr.c   760                    {
         intpr.c   761                            int                     argc = token_ext,i;
    00000D1E D429                   MOV.L       L1608+4,R4 ; _token_ext
         intpr.c   762                            real            result;
         intpr.c   763                            FUNCTION        func = get_func(token_type);
    00000D20 60E2                   MOV.L       @R14,R0
    00000D22 6A42                   MOV.L       @R4,R10
    00000D24 D428                   MOV.L       L1608+8,R4 ; _BUILT_IN_FUNC
    00000D26 709C                   ADD         #-100,R0
    00000D28 4008                   SHLL2       R0
    00000D2A 034E                   MOV.L       @(R0,R4),R3
         intpr.c   764                            //printf("call <%s>\n",token);
         intpr.c   765                            // skip '('
         intpr.c   766                            l_get_token ();
    00000D2C B9EE                   BSR         _l_get_token
    00000D2E 1F35                   MOV.L       R3,@(20,R15)
         intpr.c   767                            // get all arg and push them in stack
         intpr.c   768                            for (i=0;i<argc;++i)
    00000D30 4A15                   CMP/PL      R10
    00000D32 8F1A                   BF/S        L1262
    00000D34 1F82                   MOV.L       R8,@(8,R15)
    00000D36              L1263:                            
         intpr.c   769                            {
         intpr.c   770                                    result = calc_check(FALSE,pline);
    00000D36 E400                   MOV         #0,R4
    00000D38 6592                   MOV.L       @R9,R5
    00000D3A 62F3                   MOV         R15,R2
    00000D3C 7218                   ADD         #24,R2
    00000D3E BEBD                   BSR         _calc_check
    00000D40 2F26                   MOV.L       R2,@-R15
    00000D42 7F04                   ADD         #4,R15
         intpr.c   771                                    push_opd(result);
    00000D44 52F1                   MOV.L       @(4,R15),R2
    00000D46 63F3                   MOV         R15,R3
    00000D48 7201                   ADD         #1,R2
    00000D4A 7318                   ADD         #24,R3
    00000D4C 1F21                   MOV.L       R2,@(4,R15)
    00000D4E 72FF                   ADD         #-1,R2
    00000D50 6032                   MOV.L       @R3,R0
    00000D52 4208                   SHLL2       R2
    00000D54 4200                   SHLL        R2
    00000D56 32DC                   ADD         R13,R2
    00000D58 6123                   MOV         R2,R1
    00000D5A 2102                   MOV.L       R0,@R1
    00000D5C 5031                   MOV.L       @(4,R3),R0
    00000D5E 1101                   MOV.L       R0,@(4,R1)
    00000D60 53F2                   MOV.L       @(8,R15),R3
    00000D62 7301                   ADD         #1,R3
    00000D64 33A3                   CMP/GE      R10,R3
    00000D66 8FE6                   BF/S        L1263
    00000D68 1F32                   MOV.L       R3,@(8,R15)
    00000D6A              L1262:                            
         intpr.c   772                                    //printf("[%d]  |%.4lf|\n",i,result);
         intpr.c   773                            }
         intpr.c   774                            // call func
         intpr.c   775                            result = func(opd_stack + opd_size - argc);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   47


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000D6A 62A3                   MOV         R10,R2
    00000D6C 53F5                   MOV.L       @(20,R15),R3
    00000D6E 61F3                   MOV         R15,R1
    00000D70 54F1                   MOV.L       @(4,R15),R4
    00000D72 4208                   SHLL2       R2
    00000D74 4408                   SHLL2       R4
    00000D76 4400                   SHLL        R4
    00000D78 4200                   SHLL        R2
    00000D7A 3428                   SUB         R2,R4
    00000D7C 34DC                   ADD         R13,R4
    00000D7E 7118                   ADD         #24,R1
    00000D80 430B                   JSR         @R3
    00000D82 2F16                   MOV.L       R1,@-R15
    00000D84 7F04                   ADD         #4,R15
         intpr.c   776                            // pop args
         intpr.c   777                            opd_size -= argc;
    00000D86 53F1                   MOV.L       @(4,R15),R3
    00000D88 33A8                   SUB         R10,R3
         intpr.c   778                            // push result
         intpr.c   779                            push_opd(result);
    00000D8A 6233                   MOV         R3,R2
    00000D8C 7201                   ADD         #1,R2
    00000D8E 63F3                   MOV         R15,R3
    00000D90 1F21                   MOV.L       R2,@(4,R15)
    00000D92 7318                   ADD         #24,R3
    00000D94 6032                   MOV.L       @R3,R0
    00000D96 72FF                   ADD         #-1,R2
    00000D98 4208                   SHLL2       R2
    00000D9A 4200                   SHLL        R2
    00000D9C 32DC                   ADD         R13,R2
    00000D9E 6123                   MOV         R2,R1
    00000DA0 2102                   MOV.L       R0,@R1
    00000DA2 5031                   MOV.L       @(4,R3),R0
    00000DA4 AEB5                   BRA         L1236
    00000DA6 1101                   MOV.L       R0,@(4,R1)
    00000DA8              L1261:                            
         intpr.c   780                            //printf("call end\n");
         intpr.c   781                    }
         intpr.c   782                    else
         intpr.c   783                    {
         intpr.c   784                            if (check)
    00000DA8 51F4                   MOV.L       @(16,R15),R1
    00000DAA 2118                   TST         R1,R1
    00000DAC 8904                   BT          L891
         intpr.c   785                                    merror_illegal_token();
    00000DAE DA07                   MOV.L       L1608+12,R10; _merror_illegal_token
    00000DB0 4A0B                   JSR         @R10
    00000DB2 0009                   NOP
    00000DB4 AEAD                   BRA         L1236
    00000DB6 0009                   NOP
    00000DB8              L891:
         intpr.c   786                            else
         intpr.c   787                            {
         intpr.c   788                                    l_put_back();
    00000DB8 B99D                   BSR         _l_put_back
    00000DBA 0009                   NOP
         intpr.c   789                                    break;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   48


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000DBC A020                   BRA         L1267
    00000DBE 0009                   NOP
    00000DC0              L1608:                            
    00000DC0 00C8                   .DATA.W     H'00C8
    00000DC2 0000                   .DATA.W     0
    00000DC4 <00000000>             .DATA.L     _token_ext
    00000DC8 <00000000>             .DATA.L     _BUILT_IN_FUNC
    00000DCC <00000000>             .DATA.L     _merror_illegal_token
    00000DD0              L1268:                            
         intpr.c   790                            }
         intpr.c   791                    }
         intpr.c   792            }
         intpr.c   793            // pop up all
         intpr.c   794            while(opr_size > 0)
         intpr.c   795            {
         intpr.c   796                    real result;
         intpr.c   797                    result = calc_pop(opd_stack,opr_stack,&opd_size,&opr_size);
    00000DD0 67F3                   MOV         R15,R7
    00000DD2 66F3                   MOV         R15,R6
    00000DD4 7604                   ADD         #4,R6
    00000DD6 65C3                   MOV         R12,R5
    00000DD8 64D3                   MOV         R13,R4
    00000DDA 62F3                   MOV         R15,R2
    00000DDC 7218                   ADD         #24,R2
    00000DDE BCC9                   BSR         _calc_pop
    00000DE0 2F26                   MOV.L       R2,@-R15
    00000DE2 7F04                   ADD         #4,R15
         intpr.c   798                    push_opd(result);
    00000DE4 52F1                   MOV.L       @(4,R15),R2
    00000DE6 63F3                   MOV         R15,R3
    00000DE8 7201                   ADD         #1,R2
    00000DEA 7318                   ADD         #24,R3
    00000DEC 1F21                   MOV.L       R2,@(4,R15)
    00000DEE 72FF                   ADD         #-1,R2
    00000DF0 6032                   MOV.L       @R3,R0
    00000DF2 4208                   SHLL2       R2
    00000DF4 4200                   SHLL        R2
    00000DF6 32DC                   ADD         R13,R2
    00000DF8 6123                   MOV         R2,R1
    00000DFA 2102                   MOV.L       R0,@R1
    00000DFC 5031                   MOV.L       @(4,R3),R0
    00000DFE 1101                   MOV.L       R0,@(4,R1)
    00000E00              L1267:                            
    00000E00 63F2                   MOV.L       @R15,R3
    00000E02 4315                   CMP/PL      R3
    00000E04 89E4                   BT          L1268
         intpr.c   799            }
         intpr.c   800            if (opd_size != 1)
    00000E06 50F1                   MOV.L       @(4,R15),R0
    00000E08 8801                   CMP/EQ      #1,R0
    00000E0A 8904                   BT          L1269
         intpr.c   801            {
         intpr.c   802                    merror_msg("calc:unknown error!");
    00000E0C D23A                   MOV.L       L1609+8,R2 ; L635
    00000E0E D33B                   MOV.L       L1609+12,R3; _merror_msg
    00000E10 430B                   JSR         @R3
    00000E12 2F26                   MOV.L       R2,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   49


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000E14 7F04                   ADD         #4,R15
    00000E16              L1269:                            
         intpr.c   803            }
         intpr.c   804            return opd_stack[0];
    00000E16 63D3                   MOV         R13,R3
    00000E18 916A                   MOV.W       L1609,R1   ; H'0340
    00000E1A 31FC                   ADD         R15,R1
    00000E1C 6012                   MOV.L       @R1,R0
    00000E1E 6232                   MOV.L       @R3,R2
         intpr.c   805    }
    00000E20 9167                   MOV.W       L1609+2,R1 ; H'0320
    00000E22 2022                   MOV.L       R2,@R0
    00000E24 5231                   MOV.L       @(4,R3),R2
    00000E26 1021                   MOV.L       R2,@(4,R0)
    00000E28 3F1C                   ADD         R1,R15
    00000E2A 4F26                   LDS.L       @R15+,PR
    00000E2C 68F6                   MOV.L       @R15+,R8
    00000E2E 69F6                   MOV.L       @R15+,R9
    00000E30 6AF6                   MOV.L       @R15+,R10
    00000E32 6BF6                   MOV.L       @R15+,R11
    00000E34 6CF6                   MOV.L       @R15+,R12
    00000E36 6DF6                   MOV.L       @R15+,R13
    00000E38 000B                   RTS
    00000E3A 6EF6                   MOV.L       @R15+,R14
         intpr.c   806    
         intpr.c   807    real calc (const char * exp)
    00000E3C              _calc:                           ; function: calc
                                                           ; frame size=12
    00000E3C 4F22                   STS.L       PR,@-R15
         intpr.c   808    {
         intpr.c   809            return calc_check(TRUE,exp);
    00000E3E 6543                   MOV         R4,R5
    00000E40 7FFC                   ADD         #-4,R15
    00000E42 2F42                   MOV.L       R4,@R15
    00000E44 53F2                   MOV.L       @(8,R15),R3
    00000E46 E401                   MOV         #1,R4
    00000E48 BE38                   BSR         _calc_check
    00000E4A 2F36                   MOV.L       R3,@-R15
         intpr.c   810    }
    00000E4C 7F08                   ADD         #8,R15
    00000E4E 4F26                   LDS.L       @R15+,PR
    00000E50 000B                   RTS
    00000E52 0009                   NOP
         intpr.c   811    
         intpr.c   812    //-------------------------------------------------------------------------
         intpr.c   813    // interpreter part
         intpr.c   814    //
         intpr.c   815    char line [LINE_MAX];
         intpr.c   816    
         intpr.c   817    SOURCE_FILE * l_open_file (const char * file_name)
    00000E54              _l_open_file:                    ; function: l_open_file
                                                           ; frame size=12
    00000E54 2FE6                   MOV.L       R14,@-R15
         intpr.c   818    {
         intpr.c   819            SOURCE_FILE * sf;
         intpr.c   820            sf = (SOURCE_FILE*)calloc(sizeof(SOURCE_FILE),1);
    00000E56 E501                   MOV         #1,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   50


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000E58 D329                   MOV.L       L1609+16,R3; _calloc
    00000E5A 4F22                   STS.L       PR,@-R15
    00000E5C 7FFC                   ADD         #-4,R15
    00000E5E 2F42                   MOV.L       R4,@R15
    00000E60 430B                   JSR         @R3
    00000E62 E40C                   MOV         #12,R4
    00000E64 6E03                   MOV         R0,R14
         intpr.c   821            // alloc fail
         intpr.c   822            if (sf==NULL)
    00000E66 2EE8                   TST         R14,R14
    00000E68 8907                   BT          L893
         intpr.c   823                    return NULL;
         intpr.c   824            sf->file = open_file(file_name,_OPENMODE_READ_SHARE);
    00000E6A 9543                   MOV.W       L1609+4,R5 ; H'0080
    00000E6C D325                   MOV.L       L1609+20,R3; _open_file
    00000E6E 430B                   JSR         @R3
    00000E70 64F2                   MOV.L       @R15,R4
         intpr.c   825            // open fail
         intpr.c   826            if (sf->file<0)
    00000E72 6203                   MOV         R0,R2
    00000E74 4211                   CMP/PZ      R2
    00000E76 8D05                   BT/S        L1274
    00000E78 1E02                   MOV.L       R0,@(8,R14)
    00000E7A              L893:
         intpr.c   827                    return NULL;
    00000E7A E000                   MOV         #0,R0
    00000E7C 7F04                   ADD         #4,R15
    00000E7E 4F26                   LDS.L       @R15+,PR
    00000E80 000B                   RTS
    00000E82 6EF6                   MOV.L       @R15+,R14
    00000E84              L1274:                            
         intpr.c   828            // get size
         intpr.c   829            sf->size = Bfile_GetFileSize(sf->file);
    00000E84 D220                   MOV.L       L1609+24,R2; _Bfile_GetFileSize
    00000E86 420B                   JSR         @R2
    00000E88 54E2                   MOV.L       @(8,R14),R4
         intpr.c   830            sf->pos = 0;
    00000E8A E300                   MOV         #0,R3
    00000E8C 1E01                   MOV.L       R0,@(4,R14)
         intpr.c   831            return sf;
    00000E8E 60E3                   MOV         R14,R0
    00000E90 2E32                   MOV.L       R3,@R14
         intpr.c   832    }
    00000E92              L1273:                            
    00000E92 7F04                   ADD         #4,R15
    00000E94 4F26                   LDS.L       @R15+,PR
    00000E96 000B                   RTS
    00000E98 6EF6                   MOV.L       @R15+,R14
         intpr.c   833    
         intpr.c   834    char* strchr1(char* s,char c)
    00000E9A              _strchr1:                        ; function: strchr1
                                                           ; frame size=0
         intpr.c   835    { 
         intpr.c   836      while(*s != '\0' && *s != c) 
    00000E9A A001                   BRA         L1275
    00000E9C 0009                   NOP
    00000E9E              L1276:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   51


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         intpr.c   837      {
         intpr.c   838        ++s; 
    00000E9E 7401                   ADD         #1,R4
    00000EA0              L1275:                            
    00000EA0 6640                   MOV.B       @R4,R6
    00000EA2 2668                   TST         R6,R6
    00000EA4 8902                   BT          L1277
    00000EA6 635E                   EXTS.B      R5,R3
    00000EA8 3630                   CMP/EQ      R3,R6
    00000EAA 8BF8                   BF          L1276
    00000EAC              L1277:                            
         intpr.c   839      } 
         intpr.c   840      return *s == c ?s:NULL;
    00000EAC 6040                   MOV.B       @R4,R0
    00000EAE 655E                   EXTS.B      R5,R5
    00000EB0 3050                   CMP/EQ      R5,R0
    00000EB2 8B01                   BF          L1278
    00000EB4 000B                   RTS
    00000EB6 6043                   MOV         R4,R0
    00000EB8              L1278:                            
    00000EB8 E000                   MOV         #0,R0
         intpr.c   841    }
    00000EBA              L1280:                            
    00000EBA 000B                   RTS
    00000EBC 0009                   NOP
         intpr.c   842    
         intpr.c   843    int l_get_line (SOURCE_FILE * sf)
    00000EBE              _l_get_line:                     ; function: l_get_line
                                                           ; frame size=12
    00000EBE 2FE6                   MOV.L       R14,@-R15
    00000EC0 2FD6                   MOV.L       R13,@-R15
    00000EC2 6E43                   MOV         R4,R14
         intpr.c   844    {
         intpr.c   845            int bytes_read = 0,in_str,e = 0;
         intpr.c   846            char * p;
         intpr.c   847            bytes_read = Bfile_ReadFile(sf->file,line,LINE_MAX,sf->pos);
    00000EC4 9616                   MOV.W       L1609+4,R6 ; H'0080
    00000EC6 4F22                   STS.L       PR,@-R15
    00000EC8 DD10                   MOV.L       L1609+28,R13; _line
    00000ECA 67E2                   MOV.L       @R14,R7
    00000ECC D310                   MOV.L       L1609+32,R3; _Bfile_ReadFile
    00000ECE 65D3                   MOV         R13,R5
    00000ED0 430B                   JSR         @R3
    00000ED2 54E2                   MOV.L       @(8,R14),R4
         intpr.c   848            line[bytes_read] = '\0';
    00000ED4 E600                   MOV         #0,R6
    00000ED6 0D64                   MOV.B       R6,@(R0,R13)
         intpr.c   849    
         intpr.c   850            for (p=line;*p;++p)
    00000ED8 A020                   BRA         L1281
    00000EDA 64D3                   MOV         R13,R4
    00000EDC              L1282:                            
         intpr.c   851            {
         intpr.c   852                    if (*p=='\n')
    00000EDC 6040                   MOV.B       @R4,R0
    00000EDE 880A                   CMP/EQ      #10,R0
    00000EE0 8B18                   BF          L1283




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   52


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         intpr.c   853                    {
         intpr.c   854                            *p = '\0';
    00000EE2 2460                   MOV.B       R6,@R4
         intpr.c   855                            ++p;
    00000EE4 7401                   ADD         #1,R4
         intpr.c   856                            if (*p=='\r')
    00000EE6 6040                   MOV.B       @R4,R0
    00000EE8 880D                   CMP/EQ      #13,R0
    00000EEA 8B1A                   BF          L1285
         intpr.c   857                                    ++p;
         intpr.c   858                            break;
    00000EEC A019                   BRA         L1285
    00000EEE 7401                   ADD         #1,R4
    00000EF0              L1609:                            
    00000EF0 0340                   .DATA.W     H'0340
    00000EF2 0320                   .DATA.W     H'0320
    00000EF4 0080                   .DATA.W     H'0080
    00000EF6 0000                   .DATA.W     0
    00000EF8 <00000000>             .DATA.L     L635
    00000EFC <00000000>             .DATA.L     _merror_msg
    00000F00 <00000000>             .DATA.L     _calloc
    00000F04 <00000000>             .DATA.L     _open_file
    00000F08 <00000000>             .DATA.L     _Bfile_GetFileSize
    00000F0C <00000000>             .DATA.L     _line
    00000F10 <00000000>             .DATA.L     _Bfile_ReadFile
    00000F14              L1283:                            
         intpr.c   859                    }
         intpr.c   860                    else if (*p=='\0')
    00000F14 6240                   MOV.B       @R4,R2
    00000F16 2228                   TST         R2,R2
    00000F18 8903                   BT          L1285
    00000F1A 7401                   ADD         #1,R4
    00000F1C              L1281:                            
    00000F1C 6340                   MOV.B       @R4,R3
    00000F1E 2338                   TST         R3,R3
    00000F20 8BDC                   BF          L1282
    00000F22              L1285:                            
         intpr.c   861                            break;
         intpr.c   862            }
         intpr.c   863    
         intpr.c   864            sf->pos += p - line ;
    00000F22 34D8                   SUB         R13,R4
    00000F24 63E2                   MOV.L       @R14,R3
    00000F26 334C                   ADD         R4,R3
    00000F28 2E32                   MOV.L       R3,@R14
         intpr.c   865            
         intpr.c   866            p = line;
    00000F2A 64D3                   MOV         R13,R4
         intpr.c   867            in_str = FALSE;
         intpr.c   868            while(*p)
    00000F2C A00B                   BRA         L1288
    00000F2E 6563                   MOV         R6,R5
    00000F30              L1289:                            
         intpr.c   869            {
         intpr.c   870                    if (*p=='\"')in_str = !in_str;
    00000F30 6040                   MOV.B       @R4,R0
    00000F32 8822                   CMP/EQ      #34,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   53


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000F34 8B02                   BF          L1290
    00000F36 2558                   TST         R5,R5
    00000F38 A004                   BRA         L1292
    00000F3A 0529                   MOVT        R5
    00000F3C              L1290:                            
         intpr.c   871                    else if(*p=='#' && !in_str) break;
    00000F3C 8823                   CMP/EQ      #35,R0
    00000F3E 8B01                   BF          L1292
    00000F40 2558                   TST         R5,R5
    00000F42 8903                   BT          L1294
    00000F44              L1292:                            
         intpr.c   872                    ++p;
    00000F44 7401                   ADD         #1,R4
    00000F46              L1288:                            
    00000F46 6240                   MOV.B       @R4,R2
    00000F48 2228                   TST         R2,R2
    00000F4A 8BF1                   BF          L1289
    00000F4C              L1294:                            
         intpr.c   873            }
         intpr.c   874            *p = '\0';
    00000F4C 2460                   MOV.B       R6,@R4
         intpr.c   875            //error_line = line;
         intpr.c   876            if (sf->pos>=sf->size)
    00000F4E 53E1                   MOV.L       @(4,R14),R3
    00000F50 62E2                   MOV.L       @R14,R2
    00000F52 3233                   CMP/GE      R3,R2
    00000F54 8B01                   BF          L1295
         intpr.c   877                    return FALSE;
    00000F56 A001                   BRA         L1296
    00000F58 E000                   MOV         #0,R0
    00000F5A              L1295:                            
         intpr.c   878            else
         intpr.c   879                    return TRUE;
    00000F5A E001                   MOV         #1,R0
         intpr.c   880    }
    00000F5C              L1296:                            
    00000F5C 4F26                   LDS.L       @R15+,PR
    00000F5E 6DF6                   MOV.L       @R15+,R13
    00000F60 000B                   RTS
    00000F62 6EF6                   MOV.L       @R15+,R14
         intpr.c   881    //--------------------------------------------------------------------------------------
         intpr.c   882    // prescan part
         intpr.c   883    typedef struct
         intpr.c   884    {
         intpr.c   885            char *  name;
         intpr.c   886            long    pos;
         intpr.c   887    }USER_SUB;
         intpr.c   888    
         intpr.c   889    char * s_strdup(const char * s)
    00000F64              _s_strdup:                       ; function: s_strdup
                                                           ; frame size=12
                                                           ; used runtime library name:
                                                           ; __slow_strcpy
    00000F64 4F22                   STS.L       PR,@-R15
    00000F66 7FF8                   ADD         #-8,R15
         intpr.c   890    {
         intpr.c   891            int len = strlen(s)+1;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   54


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000F68 D366                   MOV.L       L1610+2,R3 ; _strlen
    00000F6A 430B                   JSR         @R3
    00000F6C 2F42                   MOV.L       R4,@R15
    00000F6E 7001                   ADD         #1,R0
         intpr.c   892            char * d = (char*)calloc(len,1);
    00000F70 D365                   MOV.L       L1610+6,R3 ; _calloc
    00000F72 E501                   MOV         #1,R5
    00000F74 1F01                   MOV.L       R0,@(4,R15)
    00000F76 430B                   JSR         @R3
    00000F78 6403                   MOV         R0,R4
    00000F7A 6403                   MOV         R0,R4
         intpr.c   893            strcpy(d,s);
    00000F7C 61F2                   MOV.L       @R15,R1
    00000F7E D263                   MOV.L       L1610+10,R2; __slow_strcpy
    00000F80 420B                   JSR         @R2
    00000F82 6043                   MOV         R4,R0
         intpr.c   894            return d;
         intpr.c   895    }
    00000F84 7F08                   ADD         #8,R15
    00000F86 4F26                   LDS.L       @R15+,PR
    00000F88 000B                   RTS
    00000F8A 6043                   MOV         R4,R0
         intpr.c   896    
         intpr.c   897    list list_var;
         intpr.c   898    list list_array;
         intpr.c   899    list list_sub;
         intpr.c   900    
         intpr.c   901    VAR * find_var (const char * var_name)
    00000F8C              _find_var:                       ; function: find_var
                                                           ; frame size=16
                                                           ; used runtime library name:
                                                           ; __slow_strcmp1
    00000F8C 2FE6                   MOV.L       R14,@-R15
    00000F8E 2FD6                   MOV.L       R13,@-R15
    00000F90 4F22                   STS.L       PR,@-R15
    00000F92 7FFC                   ADD         #-4,R15
         intpr.c   902    {
         intpr.c   903            node            * n;
         intpr.c   904            VAR                     * v;
         intpr.c   905    
         intpr.c   906            n = list_var.head;
    00000F94 D35E                   MOV.L       L1610+14,R3; _list_var
    00000F96 2F42                   MOV.L       R4,@R15
         intpr.c   907            while (n)
    00000F98 A00A                   BRA         L1299
    00000F9A 6E32                   MOV.L       @R3,R14
    00000F9C              L1300:                            
         intpr.c   908            {
         intpr.c   909                    v = n->p;
    00000F9C 6DE2                   MOV.L       @R14,R13
         intpr.c   910                    if(str_eq(v->name,var_name))
    00000F9E 65F2                   MOV.L       @R15,R5
    00000FA0 D35C                   MOV.L       L1610+18,R3; __slow_strcmp1
    00000FA2 430B                   JSR         @R3
    00000FA4 64D2                   MOV.L       @R13,R4
    00000FA6 2008                   TST         R0,R0
    00000FA8 8B01                   BF          L1301




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   55


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         intpr.c   911                            return v;
    00000FAA A004                   BRA         L1302
    00000FAC 60D3                   MOV         R13,R0
    00000FAE              L1301:                            
         intpr.c   912                    n = n->next ;
    00000FAE 5EE1                   MOV.L       @(4,R14),R14
    00000FB0              L1299:                            
    00000FB0 2EE8                   TST         R14,R14
    00000FB2 8BF3                   BF          L1300
         intpr.c   913            }
         intpr.c   914            return NULL;
    00000FB4 E000                   MOV         #0,R0
         intpr.c   915    }
    00000FB6              L1302:                            
    00000FB6 7F04                   ADD         #4,R15
    00000FB8 4F26                   LDS.L       @R15+,PR
    00000FBA 6DF6                   MOV.L       @R15+,R13
    00000FBC 000B                   RTS
    00000FBE 6EF6                   MOV.L       @R15+,R14
         intpr.c   916    
         intpr.c   917    VAR * create_var(const char * var_name)
    00000FC0              _create_var:                     ; function: create_var
                                                           ; frame size=12
    00000FC0 2FE6                   MOV.L       R14,@-R15
         intpr.c   918    {
         intpr.c   919            VAR * v;
         intpr.c   920            v                       = (VAR*)calloc(sizeof(VAR),1);
    00000FC2 E501                   MOV         #1,R5
    00000FC4 D350                   MOV.L       L1610+6,R3 ; _calloc
    00000FC6 4F22                   STS.L       PR,@-R15
    00000FC8 7FFC                   ADD         #-4,R15
    00000FCA 2F42                   MOV.L       R4,@R15
    00000FCC 430B                   JSR         @R3
    00000FCE E40C                   MOV         #12,R4
    00000FD0 6E03                   MOV         R0,R14
         intpr.c   921            v->name         = s_strdup(var_name);
    00000FD2 BFC7                   BSR         _s_strdup
    00000FD4 64F2                   MOV.L       @R15,R4
         intpr.c   922            v->value        = 0.0;
    00000FD6 62E3                   MOV         R14,R2
         intpr.c   923            list_push(&list_var,v);
    00000FD8 D44D                   MOV.L       L1610+14,R4; _list_var
    00000FDA E300                   MOV         #0,R3
    00000FDC 2E02                   MOV.L       R0,@R14
    00000FDE 7204                   ADD         #4,R2
    00000FE0 2232                   MOV.L       R3,@R2
    00000FE2 1231                   MOV.L       R3,@(4,R2)
    00000FE4 D24C                   MOV.L       L1610+22,R2; _list_push
    00000FE6 420B                   JSR         @R2
    00000FE8 65E3                   MOV         R14,R5
         intpr.c   924            return v;
    00000FEA 60E3                   MOV         R14,R0
         intpr.c   925    }
    00000FEC 7F04                   ADD         #4,R15
    00000FEE 4F26                   LDS.L       @R15+,PR
    00000FF0 000B                   RTS
    00000FF2 6EF6                   MOV.L       @R15+,R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   56


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         intpr.c   926    
         intpr.c   927    VAR * get_var (const char * var_name)
    00000FF4              _get_var:                        ; function: get_var
                                                           ; frame size=8
    00000FF4 4F22                   STS.L       PR,@-R15
    00000FF6 7FFC                   ADD         #-4,R15
         intpr.c   928    {
         intpr.c   929            VAR * v = find_var(var_name);
    00000FF8 BFC8                   BSR         _find_var
    00000FFA 2F42                   MOV.L       R4,@R15
    00000FFC 6403                   MOV         R0,R4
         intpr.c   930            if (v)
    00000FFE 2448                   TST         R4,R4
    00001000 8903                   BT          L1304
         intpr.c   931                    return v;
    00001002 7F04                   ADD         #4,R15
    00001004 4F26                   LDS.L       @R15+,PR
    00001006 000B                   RTS
    00001008 6043                   MOV         R4,R0
    0000100A              L1304:                            
         intpr.c   932            else
         intpr.c   933            {
         intpr.c   934                    return create_var(var_name);
    0000100A 64F2                   MOV.L       @R15,R4
    0000100C 7F04                   ADD         #4,R15
    0000100E AFD7                   BRA         _create_var
    00001010 4F26                   LDS.L       @R15+,PR
    00001012              L1305:                            
         intpr.c   935            }
         intpr.c   936    }
    00001012 7F04                   ADD         #4,R15
    00001014 4F26                   LDS.L       @R15+,PR
    00001016 000B                   RTS
    00001018 0009                   NOP
         intpr.c   937    
         intpr.c   938    ARRAY * find_array (const char * array_name)
    0000101A              _find_array:                     ; function: find_array
                                                           ; frame size=16
                                                           ; used runtime library name:
                                                           ; __slow_strcmp1
    0000101A 2FE6                   MOV.L       R14,@-R15
    0000101C 2FD6                   MOV.L       R13,@-R15
    0000101E 4F22                   STS.L       PR,@-R15
         intpr.c   939    {
         intpr.c   940            node            * n;
         intpr.c   941            ARRAY           * a;
         intpr.c   942    
         intpr.c   943            n = list_array.head;
    00001020 D33E                   MOV.L       L1610+26,R3; _list_array
    00001022 7FFC                   ADD         #-4,R15
    00001024 2F42                   MOV.L       R4,@R15
         intpr.c   944            while (n)
    00001026 A00A                   BRA         L1307
    00001028 6E32                   MOV.L       @R3,R14
    0000102A              L1308:                            
         intpr.c   945            {
         intpr.c   946                    a = n->p;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   57


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000102A 6DE2                   MOV.L       @R14,R13
         intpr.c   947                    if(str_eq(a->name,array_name))
    0000102C 65F2                   MOV.L       @R15,R5
    0000102E D339                   MOV.L       L1610+18,R3; __slow_strcmp1
    00001030 430B                   JSR         @R3
    00001032 64D2                   MOV.L       @R13,R4
    00001034 2008                   TST         R0,R0
    00001036 8B01                   BF          L1309
         intpr.c   948                            return a;
    00001038 A004                   BRA         L1310
    0000103A 60D3                   MOV         R13,R0
    0000103C              L1309:                            
         intpr.c   949                    n = n->next ;
    0000103C 5EE1                   MOV.L       @(4,R14),R14
    0000103E              L1307:                            
    0000103E 2EE8                   TST         R14,R14
    00001040 8BF3                   BF          L1308
         intpr.c   950            }
         intpr.c   951            return NULL;
    00001042 E000                   MOV         #0,R0
         intpr.c   952    }
    00001044              L1310:                            
    00001044 7F04                   ADD         #4,R15
    00001046 4F26                   LDS.L       @R15+,PR
    00001048 6DF6                   MOV.L       @R15+,R13
    0000104A 000B                   RTS
    0000104C 6EF6                   MOV.L       @R15+,R14
         intpr.c   953    
         intpr.c   954    void assign_element (const ARRAY * a,int index,real r)
    0000104E              _assign_element:                 ; function: assign_element
                                                           ; frame size=16
    0000104E 2FE6                   MOV.L       R14,@-R15
    00001050 4F22                   STS.L       PR,@-R15
    00001052 6E53                   MOV         R5,R14
    00001054 7FFC                   ADD         #-4,R15
         intpr.c   955    {
         intpr.c   956            if (index<=0 || index>a->size)
    00001056 4E15                   CMP/PL      R14
    00001058 8F04                   BF/S        L1312
    0000105A 2F42                   MOV.L       R4,@R15
    0000105C 62F2                   MOV.L       @R15,R2
    0000105E 5322                   MOV.L       @(8,R2),R3
    00001060 3E37                   CMP/GT      R3,R14
    00001062 8B04                   BF          L1311
    00001064              L1312:                            
         intpr.c   957                    merror_msg("Access array '%s' over the border");
    00001064 D12E                   MOV.L       L1610+30,R1; L687
    00001066 D32F                   MOV.L       L1610+34,R3; _merror_msg
    00001068 430B                   JSR         @R3
    0000106A 2F16                   MOV.L       R1,@-R15
    0000106C 7F04                   ADD         #4,R15
    0000106E              L1311:                            
         intpr.c   958            a->array[index] = r;
    0000106E 4E08                   SHLL2       R14
    00001070 62F2                   MOV.L       @R15,R2
    00001072 4E00                   SHLL        R14
    00001074 5321                   MOV.L       @(4,R2),R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   58


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001076 62F3                   MOV         R15,R2
    00001078 3E3C                   ADD         R3,R14
    0000107A 720C                   ADD         #12,R2
    0000107C 6022                   MOV.L       @R2,R0
    0000107E 61E3                   MOV         R14,R1
    00001080 2102                   MOV.L       R0,@R1
    00001082 5021                   MOV.L       @(4,R2),R0
    00001084 1101                   MOV.L       R0,@(4,R1)
         intpr.c   959    }
    00001086 7F04                   ADD         #4,R15
    00001088 4F26                   LDS.L       @R15+,PR
    0000108A 000B                   RTS
    0000108C 6EF6                   MOV.L       @R15+,R14
         intpr.c   960    
         intpr.c   961    real get_element (const ARRAY * a,int index)
    0000108E              _get_element:                    ; function: get_element
                                                           ; frame size=16
    0000108E 2FE6                   MOV.L       R14,@-R15
    00001090 4F22                   STS.L       PR,@-R15
    00001092 6E53                   MOV         R5,R14
    00001094 7FFC                   ADD         #-4,R15
         intpr.c   962    {
         intpr.c   963            if (index<=0 || index>a->size)
    00001096 4E15                   CMP/PL      R14
    00001098 8F04                   BF/S        L1314
    0000109A 2F42                   MOV.L       R4,@R15
    0000109C 62F2                   MOV.L       @R15,R2
    0000109E 5322                   MOV.L       @(8,R2),R3
    000010A0 3E37                   CMP/GT      R3,R14
    000010A2 8B04                   BF          L1313
    000010A4              L1314:                            
         intpr.c   964                    merror_msg("Access array '%s' over the border");
    000010A4 D11E                   MOV.L       L1610+30,R1; L687
    000010A6 D31F                   MOV.L       L1610+34,R3; _merror_msg
    000010A8 430B                   JSR         @R3
    000010AA 2F16                   MOV.L       R1,@-R15
    000010AC 7F04                   ADD         #4,R15
    000010AE              L1313:                            
         intpr.c   965            return a->array[index-1];
    000010AE 7EFF                   ADD         #-1,R14
    000010B0 50F3                   MOV.L       @(12,R15),R0
    000010B2 4E08                   SHLL2       R14
    000010B4 62F2                   MOV.L       @R15,R2
    000010B6 4E00                   SHLL        R14
    000010B8 5321                   MOV.L       @(4,R2),R3
    000010BA 3E3C                   ADD         R3,R14
    000010BC 61E3                   MOV         R14,R1
    000010BE 6312                   MOV.L       @R1,R3
    000010C0 2032                   MOV.L       R3,@R0
    000010C2 5311                   MOV.L       @(4,R1),R3
    000010C4 1031                   MOV.L       R3,@(4,R0)
         intpr.c   966    }
    000010C6 7F04                   ADD         #4,R15
    000010C8 4F26                   LDS.L       @R15+,PR
    000010CA 000B                   RTS
    000010CC 6EF6                   MOV.L       @R15+,R14
         intpr.c   967    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   59


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         intpr.c   968    USER_SUB * i_find_sub (const char * sub_name)
    000010CE              _i_find_sub:                     ; function: i_find_sub
                                                           ; frame size=16
                                                           ; used runtime library name:
                                                           ; __slow_strcmp1
    000010CE 2FE6                   MOV.L       R14,@-R15
    000010D0 2FD6                   MOV.L       R13,@-R15
    000010D2 4F22                   STS.L       PR,@-R15
         intpr.c   969    {
         intpr.c   970            node            * n;
         intpr.c   971            USER_SUB        * sub;
         intpr.c   972    
         intpr.c   973            n = list_sub.head;
    000010D4 D314                   MOV.L       L1610+38,R3; _list_sub
    000010D6 7FFC                   ADD         #-4,R15
    000010D8 2F42                   MOV.L       R4,@R15
         intpr.c   974            while (n)
    000010DA A00A                   BRA         L1316
    000010DC 6E32                   MOV.L       @R3,R14
    000010DE              L1317:                            
         intpr.c   975            {
         intpr.c   976                    sub = n->p;
    000010DE 6DE2                   MOV.L       @R14,R13
         intpr.c   977                    if(str_eq(sub->name,sub_name))
    000010E0 65F2                   MOV.L       @R15,R5
    000010E2 D30C                   MOV.L       L1610+18,R3; __slow_strcmp1
    000010E4 430B                   JSR         @R3
    000010E6 64D2                   MOV.L       @R13,R4
    000010E8 2008                   TST         R0,R0
    000010EA 8B01                   BF          L1318
         intpr.c   978                            return sub;
    000010EC A004                   BRA         L1319
    000010EE 60D3                   MOV         R13,R0
    000010F0              L1318:                            
         intpr.c   979                    n = n->next ;
    000010F0 5EE1                   MOV.L       @(4,R14),R14
    000010F2              L1316:                            
    000010F2 2EE8                   TST         R14,R14
    000010F4 8BF3                   BF          L1317
         intpr.c   980            }
         intpr.c   981            return NULL;
    000010F6 E000                   MOV         #0,R0
         intpr.c   982    }
    000010F8              L1319:                            
    000010F8 7F04                   ADD         #4,R15
    000010FA 4F26                   LDS.L       @R15+,PR
    000010FC 6DF6                   MOV.L       @R15+,R13
    000010FE 000B                   RTS
    00001100 6EF6                   MOV.L       @R15+,R14
    00001102              L1610:                            
    00001102 0000                   .DATA.W     0
    00001104 <00000000>             .DATA.L     _strlen
    00001108 <00000000>             .DATA.L     _calloc
    0000110C <00000000>             .DATA.L     __slow_strcpy
    00001110 <00000000>             .DATA.L     _list_var
    00001114 <00000000>             .DATA.L     __slow_strcmp1
    00001118 <00000000>             .DATA.L     _list_push




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   60


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000111C <00000000>             .DATA.L     _list_array
    00001120 <00000000>             .DATA.L     L687
    00001124 <00000000>             .DATA.L     _merror_msg
    00001128 <00000000>             .DATA.L     _list_sub
         intpr.c   983    
         intpr.c   984    #define push_block(b)                   block_stack[block_size++] = (b)
         intpr.c   985    #define pop_block                               (block_stack[--block_size])
         intpr.c   986    #define block_top                               (block_stack[block_size-1])
         intpr.c   987    
         intpr.c   988    enum
         intpr.c   989    {
         intpr.c   990            B_IF,B_WHILE,B_FOR,B_CASE,B_SUB,B_REPEAT
         intpr.c   991    }BLOCK;
         intpr.c   992    
         intpr.c   993    const char * BLOCK_NAME[] = {"if","while","for","case","sub","repeat"};
         intpr.c   994    
         intpr.c   995    void l_scan (SOURCE_FILE * sf)
    0000112C              _l_scan:                         ; function: l_scan
                                                           ; frame size=304
                                                           ; used runtime library name:
                                                           ; __slow_strcmp1
    0000112C 2FE6                   MOV.L       R14,@-R15
         intpr.c   996    {
         intpr.c   997            int r = 1,in_sub = FALSE;
    0000112E E301                   MOV         #1,R3
    00001130 9065                   MOV.W       L1611,R0   ; H'FEF8
    00001132 2FD6                   MOV.L       R13,@-R15
    00001134 2FC6                   MOV.L       R12,@-R15
    00001136 2FB6                   MOV.L       R11,@-R15
    00001138 2FA6                   MOV.L       R10,@-R15
    0000113A 2F96                   MOV.L       R9,@-R15
    0000113C 2F86                   MOV.L       R8,@-R15
    0000113E E900                   MOV         #0,R9
         intpr.c   998            int block_stack[STACK_SIZE],block_size = 0;
         intpr.c   999    
         intpr.c  1000            list_init(&list_sub);
    00001140 DE30                   MOV.L       L1611+6,R14; _list_init
    00001142 4F22                   STS.L       PR,@-R15
    00001144 3F0C                   ADD         R0,R15
    00001146 2F42                   MOV.L       R4,@R15
    00001148 1F31                   MOV.L       R3,@(4,R15)
    0000114A D42F                   MOV.L       L1611+10,R4; _list_sub
    0000114C 4E0B                   JSR         @R14
    0000114E 6D93                   MOV         R9,R13
         intpr.c  1001            list_init(&list_var);
    00001150 D42E                   MOV.L       L1611+14,R4; _list_var
    00001152 4E0B                   JSR         @R14
    00001154 0009                   NOP
         intpr.c  1002            list_init(&list_array);
    00001156 D42E                   MOV.L       L1611+18,R4; _list_array
    00001158 4E0B                   JSR         @R14
    0000115A 0009                   NOP
         intpr.c  1003    
         intpr.c  1004            while(r)
    0000115C A1E0                   BRA         L1320
    0000115E 0009                   NOP
    00001160              L1321:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   61


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         intpr.c  1005            {
         intpr.c  1006                    r = l_get_line(sf);
    00001160 BEAD                   BSR         _l_get_line
    00001162 64F2                   MOV.L       @R15,R4
    00001164 1F01                   MOV.L       R0,@(4,R15)
         intpr.c  1007                    pline = line;
    00001166 D42B                   MOV.L       L1611+22,R4; _line
    00001168 DC2B                   MOV.L       L1611+26,R12; _pline
         intpr.c  1008                    l_get_token ();
    0000116A D32C                   MOV.L       L1611+30,R3; _l_get_token
    0000116C 430B                   JSR         @R3
    0000116E 2C42                   MOV.L       R4,@R12
    00001170 DE2B                   MOV.L       L1611+34,R14; _token_type
    00001172 64E2                   MOV.L       @R14,R4
    00001174 2448                   TST         R4,R4
    00001176 8B01                   BF          L1612
    00001178 A1D2                   BRA         L1320
    0000117A 0009                   NOP
    0000117C              L1612:                            
         intpr.c  1009                    // skip empty line
         intpr.c  1010                    if (token_type==TT_LINE_END) continue;
         intpr.c  1011                    // check command
         intpr.c  1012                    if (IS_KEYWORD(token_type))
    0000117C 9540                   MOV.W       L1611+2,R5 ; H'012C
    0000117E D829                   MOV.L       L1611+38,R8; _merror_expect
    00001180 DB29                   MOV.L       L1611+42,R11; _merror_illegal_token
    00001182 3453                   CMP/GE      R5,R4
    00001184 8901                   BT          L1613
    00001186 A15A                   BRA         L1323
    00001188 0009                   NOP
    0000118A              L1613:                            
         intpr.c  1013                    {
         intpr.c  1014                            if (token_type==KEY_SUB)
    0000118A 3450                   CMP/EQ      R5,R4
    0000118C 8B1C                   BF          L1324
         intpr.c  1015                            {
         intpr.c  1016                                    USER_SUB * sub;
         intpr.c  1017                                    
         intpr.c  1018                                    if(in_sub)
    0000118E 2998                   TST         R9,R9
    00001190 8904                   BT          L1325
         intpr.c  1019                                    {
         intpr.c  1020                                            merror_msg("sub procedure can not be nested");
    00001192 DE26                   MOV.L       L1611+46,R14; L710
    00001194 D326                   MOV.L       L1611+50,R3; _merror_msg
    00001196 430B                   JSR         @R3
    00001198 2FE6                   MOV.L       R14,@-R15
    0000119A 7F04                   ADD         #4,R15
    0000119C              L1325:                            
         intpr.c  1021                                    }
         intpr.c  1022                                    in_sub = TRUE;
    0000119C E901                   MOV         #1,R9
         intpr.c  1023    
         intpr.c  1024                                    match_type(TT_ID);
    0000119E B975                   BSR         _match_type
    000011A0 E402                   MOV         #2,R4
         intpr.c  1025                                    sub = (USER_SUB*)calloc(sizeof(USER_SUB),1);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   62


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000011A2 6593                   MOV         R9,R5
    000011A4 DE23                   MOV.L       L1611+54,R14; _calloc
    000011A6 4E0B                   JSR         @R14
    000011A8 E408                   MOV         #8,R4
         intpr.c  1026                                    sub->name       = s_strdup(token);
    000011AA D423                   MOV.L       L1611+58,R4; _token
    000011AC BEDA                   BSR         _s_strdup
    000011AE 6E03                   MOV         R0,R14
    000011B0 2E02                   MOV.L       R0,@R14
         intpr.c  1027                                    sub->pos        = sf->pos;
    000011B2 62F2                   MOV.L       @R15,R2
         intpr.c  1028                                    list_push(&list_sub,sub);
    000011B4 DC21                   MOV.L       L1611+62,R12; _list_push
    000011B6 6322                   MOV.L       @R2,R3
    000011B8 D413                   MOV.L       L1611+10,R4; _list_sub
    000011BA 1E31                   MOV.L       R3,@(4,R14)
    000011BC 4C0B                   JSR         @R12
    000011BE 65E3                   MOV         R14,R5
         intpr.c  1029                                    match_type(TT_LINE_END);
    000011C0 B964                   BSR         _match_type
    000011C2 E400                   MOV         #0,R4
         intpr.c  1030                                    push_block(B_SUB);
         intpr.c  1031                                    continue;
    000011C4 A0C7                   BRA         L1584
    000011C6 E404                   MOV         #4,R4
    000011C8              L1324:                            
         intpr.c  1032                            }
         intpr.c  1033                            else if (token_type==KEY_END)
    000011C8 951B                   MOV.W       L1611+4,R5 ; H'012D
    000011CA 3450                   CMP/EQ      R5,R4
    000011CC 8B38                   BF          L1326
         intpr.c  1034                            {
         intpr.c  1035                                    if (block_size<=0 || block_top==B_REPEAT)
    000011CE 4D15                   CMP/PL      R13
    000011D0 8B07                   BF          L1329
    000011D2 60D3                   MOV         R13,R0
    000011D4 70FF                   ADD         #-1,R0
    000011D6 4008                   SHLL2       R0
    000011D8 63F3                   MOV         R15,R3
    000011DA 7308                   ADD         #8,R3
    000011DC 003E                   MOV.L       @(R0,R3),R0
    000011DE 8805                   CMP/EQ      #5,R0
    000011E0 8B01                   BF          L1328
    000011E2              L1329:                            
         intpr.c  1036                                            merror_illegal_token();
    000011E2 4B0B                   JSR         @R11
    000011E4 0009                   NOP
    000011E6              L1328:                            
         intpr.c  1037                                    match_type(TT_LINE_END);
    000011E6 B951                   BSR         _match_type
    000011E8 E400                   MOV         #0,R4
         intpr.c  1038                                    if(pop_block==B_SUB)
    000011EA 7DFF                   ADD         #-1,R13
    000011EC 60D3                   MOV         R13,R0
    000011EE 4008                   SHLL2       R0
    000011F0 00AE                   MOV.L       @(R0,R10),R0
    000011F2 8804                   CMP/EQ      #4,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   63


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000011F4 8901                   BT          L1614
    000011F6 A193                   BRA         L1320
    000011F8 0009                   NOP
    000011FA              L1614:                            
         intpr.c  1039                                    {
         intpr.c  1040                                            in_sub = FALSE;
         intpr.c  1041                                    }
         intpr.c  1042                                    continue;
    000011FA A191                   BRA         L1320
    000011FC E900                   MOV         #0,R9
    000011FE              L1611:                            
    000011FE FEF8                   .DATA.W     H'FEF8
    00001200 012C                   .DATA.W     H'012C
    00001202 012D                   .DATA.W     H'012D
    00001204 <00000000>             .DATA.L     _list_init
    00001208 <00000000>             .DATA.L     _list_sub
    0000120C <00000000>             .DATA.L     _list_var
    00001210 <00000000>             .DATA.L     _list_array
    00001214 <00000000>             .DATA.L     _line
    00001218 <00000000>             .DATA.L     _pline
    0000121C <00000000>             .DATA.L     _l_get_token
    00001220 <00000000>             .DATA.L     _token_type
    00001224 <00000000>             .DATA.L     _merror_expect
    00001228 <00000000>             .DATA.L     _merror_illegal_token
    0000122C <00000000>             .DATA.L     L710
    00001230 <00000000>             .DATA.L     _merror_msg
    00001234 <00000000>             .DATA.L     _calloc
    00001238 <00000000>             .DATA.L     _token
    0000123C <00000000>             .DATA.L     _list_push
    00001240              L1326:                            
         intpr.c  1043                            }
         intpr.c  1044                            if (!in_sub) merror_illegal_token();
    00001240 2998                   TST         R9,R9
    00001242 8B01                   BF          L1331
    00001244 4B0B                   JSR         @R11
    00001246 0009                   NOP
    00001248              L1331:                            
         intpr.c  1045                            if(token_type==KEY_IF)
    00001248 944B                   MOV.W       L1615,R4   ; H'012E
    0000124A 62E2                   MOV.L       @R14,R2
    0000124C 3240                   CMP/EQ      R4,R2
    0000124E 8B08                   BF          L1332
         intpr.c  1046                            {
         intpr.c  1047                                    match_exp(pline);
    00001250 B94A                   BSR         _match_exp
    00001252 64C2                   MOV.L       @R12,R4
         intpr.c  1048                                    match_type(TT_LINE_END);
    00001254 B91A                   BSR         _match_type
    00001256 E400                   MOV         #0,R4
         intpr.c  1049                                    push_block(B_IF);
    00001258 60D3                   MOV         R13,R0
    0000125A 7D01                   ADD         #1,R13
    0000125C 4008                   SHLL2       R0
    0000125E A03E                   BRA         L1580
    00001260 E300                   MOV         #0,R3
    00001262              L1332:                            
         intpr.c  1050                            }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   64


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         intpr.c  1051                            else if (token_type==KEY_ELSEIF)
    00001262 943F                   MOV.W       L1615+2,R4 ; H'012F
    00001264 63E2                   MOV.L       @R14,R3
    00001266 3340                   CMP/EQ      R4,R3
    00001268 8B10                   BF          L1334
         intpr.c  1052                            {
         intpr.c  1053                                    if (block_size<=0 || block_top!=B_IF)
    0000126A 4D15                   CMP/PL      R13
    0000126C 8B0A                   BF          L1336
    0000126E 62D3                   MOV         R13,R2
    00001270 72FF                   ADD         #-1,R2
    00001272 4208                   SHLL2       R2
    00001274 63F3                   MOV         R15,R3
    00001276 7308                   ADD         #8,R3
    00001278 323C                   ADD         R3,R2
    0000127A 6122                   MOV.L       @R2,R1
    0000127C 2118                   TST         R1,R1
    0000127E 8B01                   BF          L1616
    00001280 A144                   BRA         L920
    00001282 0009                   NOP
    00001284              L1616:                            
    00001284              L1336:                            
         intpr.c  1054                                            merror_illegal_token();
    00001284 4B0B                   JSR         @R11
    00001286 0009                   NOP
    00001288 A140                   BRA         L920
    0000128A 0009                   NOP
    0000128C              L1334:                            
         intpr.c  1055                                    match_exp(pline);
         intpr.c  1056                                    match_type(TT_LINE_END);
         intpr.c  1057                            }
         intpr.c  1058                            else if (token_type==KEY_ELSE)
    0000128C 942B                   MOV.W       L1615+4,R4 ; H'0130
    0000128E 63E2                   MOV.L       @R14,R3
    00001290 3340                   CMP/EQ      R4,R3
    00001292 8B18                   BF          L1338
         intpr.c  1059                            {
         intpr.c  1060                                    if (block_size<=0 || !(block_top==B_IF || block_top==B_CASE))
    00001294 4D15                   CMP/PL      R13
    00001296 8B12                   BF          L1340
    00001298 62D3                   MOV         R13,R2
    0000129A 72FF                   ADD         #-1,R2
    0000129C 4208                   SHLL2       R2
    0000129E 63F3                   MOV         R15,R3
    000012A0 7308                   ADD         #8,R3
    000012A2 323C                   ADD         R3,R2
    000012A4 6122                   MOV.L       @R2,R1
    000012A6 2118                   TST         R1,R1
    000012A8 8B01                   BF          L1617
    000012AA A132                   BRA         L1583
    000012AC 0009                   NOP
    000012AE              L1617:                            
    000012AE 60D3                   MOV         R13,R0
    000012B0 70FF                   ADD         #-1,R0
    000012B2 4008                   SHLL2       R0
    000012B4 003E                   MOV.L       @(R0,R3),R0
    000012B6 8803                   CMP/EQ      #3,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   65


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000012B8 8B01                   BF          L1618
    000012BA A12A                   BRA         L1583
    000012BC 0009                   NOP
    000012BE              L1618:                            
    000012BE              L1340:                            
         intpr.c  1061                                            merror_illegal_token();
    000012BE 4B0B                   JSR         @R11
    000012C0 0009                   NOP
    000012C2 A126                   BRA         L1583
    000012C4 0009                   NOP
    000012C6              L1338:                            
         intpr.c  1062                                    match_type(TT_LINE_END);
         intpr.c  1063                            }
         intpr.c  1064                            else if (token_type==KEY_WHILE)
    000012C6 940F                   MOV.W       L1615+6,R4 ; H'0131
    000012C8 63E2                   MOV.L       @R14,R3
    000012CA 3340                   CMP/EQ      R4,R3
    000012CC 8B0D                   BF          L1342
         intpr.c  1065                            {
         intpr.c  1066                                    match_exp(pline);
    000012CE B90B                   BSR         _match_exp
    000012D0 64C2                   MOV.L       @R12,R4
         intpr.c  1067                                    match_type(TT_LINE_END);
    000012D2 B8DB                   BSR         _match_type
    000012D4 E400                   MOV         #0,R4
         intpr.c  1068                                    push_block(B_WHILE);
    000012D6 60D3                   MOV         R13,R0
    000012D8 7D01                   ADD         #1,R13
    000012DA 4008                   SHLL2       R0
    000012DC E301                   MOV         #1,R3
    000012DE              L1580:                            
    000012DE A11F                   BRA         L1320
    000012E0 0A36                   MOV.L       R3,@(R0,R10)
    000012E2              L1615:                            
    000012E2 012E                   .DATA.W     H'012E
    000012E4 012F                   .DATA.W     H'012F
    000012E6 0130                   .DATA.W     H'0130
    000012E8 0131                   .DATA.W     H'0131
    000012EA              L1342:                            
         intpr.c  1069                            }
         intpr.c  1070                            else if (token_type==KEY_FOR)
    000012EA 9463                   MOV.W       L1619,R4   ; H'0132
    000012EC 63E2                   MOV.L       @R14,R3
    000012EE 3340                   CMP/EQ      R4,R3
    000012F0 8B20                   BF          L1344
         intpr.c  1071                            {
         intpr.c  1072                                    // 'for' ID '=' EXP 'to' EXP
         intpr.c  1073                                    match_type(TT_ID);
    000012F2 B8CB                   BSR         _match_type
    000012F4 E402                   MOV         #2,R4
         intpr.c  1074                                    match_type(OPR_EQ);
    000012F6 945E                   MOV.W       L1619+2,R4 ; H'00D2
    000012F8 B8C8                   BSR         _match_type
    000012FA 0009                   NOP
         intpr.c  1075                                    match_exp(pline);
    000012FC B8F4                   BSR         _match_exp
    000012FE 64C2                   MOV.L       @R12,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   66


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         intpr.c  1076                                    match_str("to");
    00001300 DB2F                   MOV.L       L1619+12,R11; L718
    00001302 B8A1                   BSR         _match_str
    00001304 64B3                   MOV         R11,R4
         intpr.c  1077                                    match_exp(pline);
    00001306 B8EF                   BSR         _match_exp
    00001308 64C2                   MOV.L       @R12,R4
         intpr.c  1078                                    l_get_token();
    0000130A D22E                   MOV.L       L1619+16,R2; _l_get_token
    0000130C 420B                   JSR         @R2
    0000130E 0009                   NOP
         intpr.c  1079                                    if (token_type!=TT_LINE_END)
    00001310 63E2                   MOV.L       @R14,R3
    00001312 2338                   TST         R3,R3
    00001314 890C                   BT          L1345
         intpr.c  1080                                    {
         intpr.c  1081                                            if (!str_eq(token,"step"))
    00001316 DE2C                   MOV.L       L1619+20,R14; L720
    00001318 D42C                   MOV.L       L1619+24,R4; _token
    0000131A D32D                   MOV.L       L1619+28,R3; __slow_strcmp1
    0000131C 430B                   JSR         @R3
    0000131E 65E3                   MOV         R14,R5
    00001320 2008                   TST         R0,R0
    00001322 8901                   BT          L1346
         intpr.c  1082                                                    merror_expect("step");
    00001324 480B                   JSR         @R8
    00001326 64E3                   MOV         R14,R4
    00001328              L1346:                            
         intpr.c  1083                                            match_exp(pline);
    00001328 B8DE                   BSR         _match_exp
    0000132A 64C2                   MOV.L       @R12,R4
         intpr.c  1084                                            match_type(TT_LINE_END);
    0000132C B8AE                   BSR         _match_type
    0000132E E400                   MOV         #0,R4
    00001330              L1345:                            
         intpr.c  1085                                    }
         intpr.c  1086                                    push_block(B_FOR);
    00001330 A011                   BRA         L1584
    00001332 E402                   MOV         #2,R4
    00001334              L1344:                            
         intpr.c  1087                            }
         intpr.c  1088                            else if (token_type==KEY_CASE)
    00001334 9440                   MOV.W       L1619+4,R4 ; H'0133
    00001336 62E2                   MOV.L       @R14,R2
    00001338 3240                   CMP/EQ      R4,R2
    0000133A 8B05                   BF          L1348
         intpr.c  1089                            {
         intpr.c  1090                                    match_type(TT_ID);
    0000133C B8A6                   BSR         _match_type
    0000133E E402                   MOV         #2,R4
         intpr.c  1091                                    match_type(TT_LINE_END);
    00001340 B8A4                   BSR         _match_type
    00001342 E400                   MOV         #0,R4
         intpr.c  1092                                    push_block(B_CASE);
    00001344 A007                   BRA         L1584
    00001346 E403                   MOV         #3,R4
    00001348              L1348:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   67


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         intpr.c  1093                            }
         intpr.c  1094                            else if (token_type==KEY_REPEAT)
    00001348 9437                   MOV.W       L1619+6,R4 ; H'013A
    0000134A 62E2                   MOV.L       @R14,R2
    0000134C 3240                   CMP/EQ      R4,R2
    0000134E 8B07                   BF          L1350
         intpr.c  1095                            {
         intpr.c  1096                                    match_type(TT_LINE_END);
    00001350 B89C                   BSR         _match_type
    00001352 E400                   MOV         #0,R4
         intpr.c  1097                                    push_block(B_REPEAT);
    00001354 E405                   MOV         #5,R4
    00001356              L1584:                            
    00001356 60D3                   MOV         R13,R0
    00001358 7D01                   ADD         #1,R13
    0000135A 4008                   SHLL2       R0
    0000135C A0E0                   BRA         L1320
    0000135E 0A46                   MOV.L       R4,@(R0,R10)
    00001360              L1350:                            
         intpr.c  1098                            }
         intpr.c  1099                            else if (token_type==KEY_UNTIL)
    00001360 942C                   MOV.W       L1619+8,R4 ; H'013B
    00001362 62E2                   MOV.L       @R14,R2
    00001364 3240                   CMP/EQ      R4,R2
    00001366 8B11                   BF          L1352
         intpr.c  1100                            {
         intpr.c  1101                                    if (block_size<=0 || block_top!=B_REPEAT)
    00001368 4D15                   CMP/PL      R13
    0000136A 8B07                   BF          L1354
    0000136C 60D3                   MOV         R13,R0
    0000136E 70FF                   ADD         #-1,R0
    00001370 4008                   SHLL2       R0
    00001372 63F3                   MOV         R15,R3
    00001374 7308                   ADD         #8,R3
    00001376 003E                   MOV.L       @(R0,R3),R0
    00001378 8805                   CMP/EQ      #5,R0
    0000137A 8901                   BT          L1353
    0000137C              L1354:                            
         intpr.c  1102                                            merror_illegal_token();
    0000137C 4B0B                   JSR         @R11
    0000137E 0009                   NOP
    00001380              L1353:                            
         intpr.c  1103                                    match_exp(pline);
    00001380 B8B2                   BSR         _match_exp
    00001382 64C2                   MOV.L       @R12,R4
         intpr.c  1104                                    match_type(TT_LINE_END);
    00001384 B882                   BSR         _match_type
    00001386 E400                   MOV         #0,R4
         intpr.c  1105                                    pop_block;
    00001388 A0CA                   BRA         L1320
    0000138A 7DFF                   ADD         #-1,R13
    0000138C              L1352:                            
         intpr.c  1106                            }
         intpr.c  1107                            else if (token_type==KEY_WHEN)
    0000138C 9417                   MOV.W       L1619+10,R4; H'0134
    0000138E 62E2                   MOV.L       @R14,R2
    00001390 3240                   CMP/EQ      R4,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   68


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001392 8B1F                   BF          L1356
         intpr.c  1108                            {
         intpr.c  1109                                    if (block_size<=0 || block_top!=B_CASE)
    00001394 4D15                   CMP/PL      R13
    00001396 8B09                   BF          L1358
    00001398 60D3                   MOV         R13,R0
    0000139A 70FF                   ADD         #-1,R0
    0000139C 4008                   SHLL2       R0
    0000139E 63F3                   MOV         R15,R3
    000013A0 7308                   ADD         #8,R3
    000013A2 003E                   MOV.L       @(R0,R3),R0
    000013A4 8803                   CMP/EQ      #3,R0
    000013A6 8B01                   BF          L1620
    000013A8 A0B0                   BRA         L920
    000013AA 0009                   NOP
    000013AC              L1620:                            
    000013AC              L1358:                            
         intpr.c  1110                                            merror_illegal_token();
    000013AC 4B0B                   JSR         @R11
    000013AE 0009                   NOP
    000013B0 A0AC                   BRA         L920
    000013B2 0009                   NOP
    000013B4              L1619:                            
    000013B4 0132                   .DATA.W     H'0132
    000013B6 00D2                   .DATA.W     H'00D2
    000013B8 0133                   .DATA.W     H'0133
    000013BA 013A                   .DATA.W     H'013A
    000013BC 013B                   .DATA.W     H'013B
    000013BE 0134                   .DATA.W     H'0134
    000013C0 <00000000>             .DATA.L     L718
    000013C4 <00000000>             .DATA.L     _l_get_token
    000013C8 <00000000>             .DATA.L     L720
    000013CC <00000000>             .DATA.L     _token
    000013D0 <00000000>             .DATA.L     __slow_strcmp1
    000013D4              L1356:                            
         intpr.c  1111                                    match_exp(pline);
         intpr.c  1112                                    match_type(TT_LINE_END);
         intpr.c  1113                            }
         intpr.c  1114                            else if (token_type==KEY_GOSUB)
    000013D4 945A                   MOV.W       L1621,R4   ; H'0135
    000013D6 62E2                   MOV.L       @R14,R2
    000013D8 3240                   CMP/EQ      R4,R2
    000013DA 8B03                   BF          L1360
         intpr.c  1115                            {
         intpr.c  1116                                    match_type(TT_ID);
    000013DC B856                   BSR         _match_type
    000013DE E402                   MOV         #2,R4
    000013E0 A097                   BRA         L1583
    000013E2 0009                   NOP
    000013E4              L1360:                            
         intpr.c  1117                                    match_type(TT_LINE_END);
         intpr.c  1118                            }
         intpr.c  1119                            else if (token_type==KEY_EXIT)
    000013E4 9453                   MOV.W       L1621+2,R4 ; H'0136
    000013E6 63E2                   MOV.L       @R14,R3
    000013E8 3340                   CMP/EQ      R4,R3
    000013EA 8B01                   BF          L1622




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   69


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000013EC A091                   BRA         L1583
    000013EE 0009                   NOP
    000013F0              L1622:                            
         intpr.c  1120                            {
         intpr.c  1121                                    match_type(TT_LINE_END);
         intpr.c  1122                            }
         intpr.c  1123                            else if (token_type==KEY_BREAK)
    000013F0 944E                   MOV.W       L1621+4,R4 ; H'0137
    000013F2 63E2                   MOV.L       @R14,R3
    000013F4 3340                   CMP/EQ      R4,R3
    000013F6 8B01                   BF          L1623
    000013F8 A08B                   BRA         L1583
    000013FA 0009                   NOP
    000013FC              L1623:                            
         intpr.c  1124                            {
         intpr.c  1125                                    match_type(TT_LINE_END);
         intpr.c  1126                            }
         intpr.c  1127                            else if (token_type==KEY_RETURN)
    000013FC 9449                   MOV.W       L1621+6,R4 ; H'0138
    000013FE 63E2                   MOV.L       @R14,R3
    00001400 3340                   CMP/EQ      R4,R3
    00001402 8B01                   BF          L1624
    00001404 A085                   BRA         L1583
    00001406 0009                   NOP
    00001408              L1624:                            
         intpr.c  1128                            {
         intpr.c  1129                                    match_type(TT_LINE_END);
         intpr.c  1130                            }
         intpr.c  1131                            else if (token_type==KEY_DIM)
    00001408 9444                   MOV.W       L1621+8,R4 ; H'0139
    0000140A 63E2                   MOV.L       @R14,R3
    0000140C 3340                   CMP/EQ      R4,R3
    0000140E 8901                   BT          L1625
    00001410 A086                   BRA         L1320
    00001412 0009                   NOP
    00001414              L1625:                            
    00001414              L1370:                            
         intpr.c  1132                            {
         intpr.c  1133                                    while(1)
         intpr.c  1134                                    {
         intpr.c  1135                                            match_type      (TT_ID);
    00001414 B83A                   BSR         _match_type
    00001416 E402                   MOV         #2,R4
         intpr.c  1136                                            match_type      (TT_LBK);
    00001418 B838                   BSR         _match_type
    0000141A E406                   MOV         #6,R4
         intpr.c  1137                                            match_exp       (pline);
    0000141C B864                   BSR         _match_exp
    0000141E 64C2                   MOV.L       @R12,R4
         intpr.c  1138                                            match_type      (TT_RBK);
    00001420 B834                   BSR         _match_type
    00001422 E407                   MOV         #7,R4
         intpr.c  1139                                            l_get_token();
    00001424 D31C                   MOV.L       L1621+12,R3; _l_get_token
    00001426 430B                   JSR         @R3
    00001428 0009                   NOP
         intpr.c  1140                                            if              (token_type==TT_COM)            continue;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   70


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000142A 60E2                   MOV.L       @R14,R0
    0000142C 8801                   CMP/EQ      #1,R0
    0000142E 89F1                   BT          L1370
         intpr.c  1141                                            else if (token_type==TT_LINE_END)       break;
    00001430 63E2                   MOV.L       @R14,R3
    00001432 2338                   TST         R3,R3
    00001434 8974                   BT          L1320
         intpr.c  1142                                            else                                                            me
                         +rror_illegal_token();
    00001436 4B0B                   JSR         @R11
    00001438 0009                   NOP
    0000143A AFEB                   BRA         L1370
    0000143C 0009                   NOP
    0000143E              L1323:                            
         intpr.c  1143                                    }
         intpr.c  1144                            }
         intpr.c  1145                    }
         intpr.c  1146                    else if (token_type==TT_ID)
    0000143E 6043                   MOV         R4,R0
    00001440 8802                   CMP/EQ      #2,R0
    00001442 8B6B                   BF          L1377
         intpr.c  1147                    {
         intpr.c  1148                            if (!in_sub) merror_illegal_token();
    00001444 2998                   TST         R9,R9
    00001446 8B01                   BF          L1378
    00001448 4B0B                   JSR         @R11
    0000144A 0009                   NOP
    0000144C              L1378:                            
         intpr.c  1149                            if (str_eq(token,"print"))
    0000144C DA13                   MOV.L       L1621+16,R10; L732
    0000144E DB14                   MOV.L       L1621+20,R11; L539
    00001450 D414                   MOV.L       L1621+24,R4; _token
    00001452 D215                   MOV.L       L1621+28,R2; __slow_strcmp1
    00001454 420B                   JSR         @R2
    00001456 65A3                   MOV         R10,R5
    00001458 2008                   TST         R0,R0
    0000145A 8B29                   BF          L1379
    0000145C              L1381:                            
         intpr.c  1150                            {
         intpr.c  1151                                    while(1)
         intpr.c  1152                                    {
         intpr.c  1153                                            l_get_token();
    0000145C D30E                   MOV.L       L1621+12,R3; _l_get_token
    0000145E 430B                   JSR         @R3
    00001460 0009                   NOP
         intpr.c  1154                                            if(token_type!=TT_STRING)
    00001462 60E2                   MOV.L       @R14,R0
    00001464 8805                   CMP/EQ      #5,R0
    00001466 8904                   BT          L1382
         intpr.c  1155                                            {
         intpr.c  1156                                                    l_put_back();
    00001468 D310                   MOV.L       L1621+32,R3; _l_put_back
    0000146A 430B                   JSR         @R3
    0000146C 0009                   NOP
         intpr.c  1157                                                    match_exp(pline);
    0000146E B83B                   BSR         _match_exp
    00001470 64C2                   MOV.L       @R12,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   71


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001472              L1382:                            
         intpr.c  1158                                            }
         intpr.c  1159                                            l_get_token();
    00001472 D309                   MOV.L       L1621+12,R3; _l_get_token
    00001474 430B                   JSR         @R3
    00001476 0009                   NOP
         intpr.c  1160                                            if(token_type==TT_LINE_END) break;
    00001478 62E2                   MOV.L       @R14,R2
    0000147A 2228                   TST         R2,R2
    0000147C 8950                   BT          L1320
         intpr.c  1161                                            else if (token_type==TT_COM) continue;
    0000147E 60E2                   MOV.L       @R14,R0
    00001480 8801                   CMP/EQ      #1,R0
    00001482 89EB                   BT          L1381
         intpr.c  1162                                            else merror_expect(",");
    00001484 480B                   JSR         @R8
    00001486 64B3                   MOV         R11,R4
    00001488 AFE8                   BRA         L1381
    0000148A 0009                   NOP
    0000148C              L1621:                            
    0000148C 0135                   .DATA.W     H'0135
    0000148E 0136                   .DATA.W     H'0136
    00001490 0137                   .DATA.W     H'0137
    00001492 0138                   .DATA.W     H'0138
    00001494 0139                   .DATA.W     H'0139
    00001496 0000                   .DATA.W     0
    00001498 <00000000>             .DATA.L     _l_get_token
    0000149C <00000000>             .DATA.L     L732
    000014A0 <00000000>             .DATA.L     L539
    000014A4 <00000000>             .DATA.L     _token
    000014A8 <00000000>             .DATA.L     __slow_strcmp1
    000014AC <00000000>             .DATA.L     _l_put_back
    000014B0              L1379:                            
         intpr.c  1163                                    }
         intpr.c  1164                            }
         intpr.c  1165                            else if (str_eq(token,"input"))
    000014B0 DA2D                   MOV.L       L1626+6,R10; L736
    000014B2 D42E                   MOV.L       L1626+10,R4; _token
    000014B4 D22E                   MOV.L       L1626+14,R2; __slow_strcmp1
    000014B6 420B                   JSR         @R2
    000014B8 65A3                   MOV         R10,R5
    000014BA 2008                   TST         R0,R0
    000014BC 8B0F                   BF          L1389
    000014BE              L1391:                            
         intpr.c  1166                            {
         intpr.c  1167                                    while(1)
         intpr.c  1168                                    {
         intpr.c  1169                                            match_type(TT_ID);
    000014BE D32D                   MOV.L       L1626+18,R3; _match_type
    000014C0 430B                   JSR         @R3
    000014C2 E402                   MOV         #2,R4
         intpr.c  1170                                            l_get_token();
    000014C4 D22C                   MOV.L       L1626+22,R2; _l_get_token
    000014C6 420B                   JSR         @R2
    000014C8 0009                   NOP
         intpr.c  1171                                            if(token_type==TT_LINE_END) break;
    000014CA 63E2                   MOV.L       @R14,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   72


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000014CC 2338                   TST         R3,R3
    000014CE 8927                   BT          L1320
         intpr.c  1172                                            else if (token_type==TT_COM) continue;
    000014D0 60E2                   MOV.L       @R14,R0
    000014D2 8801                   CMP/EQ      #1,R0
    000014D4 89F3                   BT          L1391
         intpr.c  1173                                            else merror_expect(",");
    000014D6 480B                   JSR         @R8
    000014D8 64B3                   MOV         R11,R4
    000014DA AFF0                   BRA         L1391
    000014DC 0009                   NOP
    000014DE              L1389:                            
         intpr.c  1174                                    }
         intpr.c  1175                            }
         intpr.c  1176                            else
         intpr.c  1177                            {       // match: [var][=][exp]
         intpr.c  1178                                    l_get_token();
    000014DE D226                   MOV.L       L1626+22,R2; _l_get_token
    000014E0 420B                   JSR         @R2
    000014E2 0009                   NOP
         intpr.c  1179                                    if (token_type==OPR_EQ)
    000014E4 933D                   MOV.W       L1626,R3   ; H'00D2
    000014E6 62E2                   MOV.L       @R14,R2
    000014E8 3230                   CMP/EQ      R3,R2
    000014EA 890F                   BT          L920
         intpr.c  1180                                    {
         intpr.c  1181                                            match_exp(pline);
         intpr.c  1182                                            match_type(TT_LINE_END);
         intpr.c  1183                                    }
         intpr.c  1184                                    else
         intpr.c  1185                                    {
         intpr.c  1186                                            if (token_type!=TT_LBK)merror_expect("(");
    000014EC 60E2                   MOV.L       @R14,R0
    000014EE 8806                   CMP/EQ      #6,R0
    000014F0 8902                   BT          L1400
    000014F2 DE22                   MOV.L       L1626+26,R14; L537
    000014F4 480B                   JSR         @R8
    000014F6 64E3                   MOV         R14,R4
    000014F8              L1400:                            
         intpr.c  1187                                            match_exp(pline);
    000014F8 D321                   MOV.L       L1626+30,R3; _match_exp
    000014FA 430B                   JSR         @R3
    000014FC 64C2                   MOV.L       @R12,R4
         intpr.c  1188                                            match_type(TT_RBK);
    000014FE D21D                   MOV.L       L1626+18,R2; _match_type
    00001500 420B                   JSR         @R2
    00001502 E407                   MOV         #7,R4
         intpr.c  1189                                            match_type(OPR_EQ);
    00001504 942D                   MOV.W       L1626,R4   ; H'00D2
    00001506 D31B                   MOV.L       L1626+18,R3; _match_type
    00001508 430B                   JSR         @R3
    0000150A 0009                   NOP
    0000150C              L920:
         intpr.c  1190                                            match_exp(pline);
    0000150C D21C                   MOV.L       L1626+30,R2; _match_exp
    0000150E 420B                   JSR         @R2
    00001510 64C2                   MOV.L       @R12,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   73


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001512              L1583:                            
    00001512 D318                   MOV.L       L1626+18,R3; _match_type
    00001514 430B                   JSR         @R3
    00001516 E400                   MOV         #0,R4
         intpr.c  1191                                            match_type(TT_LINE_END);
    00001518 A002                   BRA         L1320
    0000151A 0009                   NOP
    0000151C              L1377:                            
         intpr.c  1192                                    }
         intpr.c  1193                            }
         intpr.c  1194                    }
         intpr.c  1195                    else 
         intpr.c  1196                            merror_illegal_token ();
    0000151C 4B0B                   JSR         @R11
    0000151E 0009                   NOP
    00001520              L1320:                            
    00001520 53F1                   MOV.L       @(4,R15),R3
    00001522 6AF3                   MOV         R15,R10
    00001524 2338                   TST         R3,R3
    00001526 8D02                   BT/S        L1627
    00001528 7A08                   ADD         #8,R10
    0000152A AE19                   BRA         L1321
    0000152C 0009                   NOP
    0000152E              L1627:                            
         intpr.c  1197            }
         intpr.c  1198            if (block_size>0)
    0000152E 4D15                   CMP/PL      R13
    00001530 8B0C                   BF          L1402
         intpr.c  1199                    merror_msg("incompleted '%s' block!",BLOCK_NAME[block_top]);
    00001532 60D3                   MOV         R13,R0
    00001534 70FF                   ADD         #-1,R0
    00001536 4008                   SHLL2       R0
    00001538 03AE                   MOV.L       @(R0,R10),R3
    0000153A 4308                   SHLL2       R3
    0000153C D011                   MOV.L       L1626+34,R0; _BLOCK_NAME
    0000153E 023E                   MOV.L       @(R0,R3),R2
    00001540 D311                   MOV.L       L1626+38,R3; L742
    00001542 2F26                   MOV.L       R2,@-R15
    00001544 D211                   MOV.L       L1626+42,R2; _merror_msg
    00001546 420B                   JSR         @R2
    00001548 2F36                   MOV.L       R3,@-R15
    0000154A 7F08                   ADD         #8,R15
    0000154C              L1402:                            
         intpr.c  1200    }
    0000154C 910A                   MOV.W       L1626+2,R1 ; H'0108
    0000154E 3F1C                   ADD         R1,R15
    00001550 4F26                   LDS.L       @R15+,PR
    00001552 68F6                   MOV.L       @R15+,R8
    00001554 69F6                   MOV.L       @R15+,R9
    00001556 6AF6                   MOV.L       @R15+,R10
    00001558 6BF6                   MOV.L       @R15+,R11
    0000155A 6CF6                   MOV.L       @R15+,R12
    0000155C 6DF6                   MOV.L       @R15+,R13
    0000155E 000B                   RTS
    00001560 6EF6                   MOV.L       @R15+,R14
    00001562              L1626:                            
    00001562 00D2                   .DATA.W     H'00D2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   74


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001564 0108                   .DATA.W     H'0108
    00001566 0000                   .DATA.W     0
    00001568 <00000000>             .DATA.L     L736
    0000156C <00000000>             .DATA.L     _token
    00001570 <00000000>             .DATA.L     __slow_strcmp1
    00001574 <00000000>             .DATA.L     _match_type
    00001578 <00000000>             .DATA.L     _l_get_token
    0000157C <00000000>             .DATA.L     L537
    00001580 <00000000>             .DATA.L     _match_exp
    00001584 <00000000>             .DATA.L     _BLOCK_NAME
    00001588 <00000000>             .DATA.L     L742
    0000158C <00000000>             .DATA.L     _merror_msg
         intpr.c  1201    //--------------------------------------------------------------------------------------
         intpr.c  1202    // interpreter part
         intpr.c  1203    
         intpr.c  1204    #define EXE_END                 0x0
         intpr.c  1205    #define EXE_DO                  0x1
         intpr.c  1206    #define EXE_ELSEIF              0x3
         intpr.c  1207    #define EXE_ELSE                0x4
         intpr.c  1208    #define EXE_WHEN                0x5
         intpr.c  1209    #define EXE_BREAK               0x6
         intpr.c  1210    #define EXE_RETURN              0x7
         intpr.c  1211    #define EXE_UNTIL               0x8
         intpr.c  1212    
         intpr.c  1213    extern int i_execute_line (SOURCE_FILE * sf,const int todo);
         intpr.c  1214    
         intpr.c  1215    int i_execute_if (SOURCE_FILE * sf,const int todo)
    00001590              _i_execute_if:                   ; function: i_execute_if
                                                           ; frame size=48
                                                           ; used runtime library name:
                                                           ; __ned
    00001590 2FE6                   MOV.L       R14,@-R15
    00001592 2FD6                   MOV.L       R13,@-R15
    00001594 2FC6                   MOV.L       R12,@-R15
         intpr.c  1216    {
         intpr.c  1217            int this_todo,r,done = FALSE;
    00001596 EC00                   MOV         #0,R12
    00001598 2FB6                   MOV.L       R11,@-R15
    0000159A 6DC3                   MOV         R12,R13
    0000159C 2FA6                   MOV.L       R10,@-R15
    0000159E 6B53                   MOV         R5,R11
    000015A0 2F96                   MOV.L       R9,@-R15
         intpr.c  1218    
         intpr.c  1219            if (!todo)
    000015A2 2BB8                   TST         R11,R11
    000015A4 4F22                   STS.L       PR,@-R15
    000015A6 7FFC                   ADD         #-4,R15
    000015A8 D945                   MOV.L       L1628+2,R9 ; _pline
    000015AA 2F42                   MOV.L       R4,@R15
    000015AC 8D1C                   BT/S        L1585
    000015AE EA01                   MOV         #1,R10
         intpr.c  1220            {
         intpr.c  1221                    this_todo = FALSE;
         intpr.c  1222            }
         intpr.c  1223            else
         intpr.c  1224            {
         intpr.c  1225                    this_todo = (calc_check(FALSE,pline) != 0.0);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   75


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000015B0 7FF8                   ADD         #-8,R15
    000015B2 E400                   MOV         #0,R4
    000015B4 6592                   MOV.L       @R9,R5
    000015B6 BA81                   BSR         _calc_check
    000015B8 2FF6                   MOV.L       R15,@-R15
    000015BA 7F04                   ADD         #4,R15
    000015BC D341                   MOV.L       L1628+6,R3 ; __ned
    000015BE E200                   MOV         #0,R2
    000015C0 2F26                   MOV.L       R2,@-R15
    000015C2 430B                   JSR         @R3
    000015C4 2F26                   MOV.L       R2,@-R15
    000015C6 6E03                   MOV         R0,R14
         intpr.c  1226                    if (this_todo) done = TRUE;
    000015C8 2EE8                   TST         R14,R14
    000015CA 8900                   BT          L1407
    000015CC 6DA3                   MOV         R10,R13
         intpr.c  1227            }
         intpr.c  1228    
         intpr.c  1229            while (TRUE)
    000015CE              L1407:                            
         intpr.c  1230            {
         intpr.c  1231                    r = i_execute_line(sf,this_todo);
    000015CE 65E3                   MOV         R14,R5
    000015D0 B1B4                   BSR         _i_execute_line
    000015D2 64F2                   MOV.L       @R15,R4
    000015D4 6403                   MOV         R0,R4
         intpr.c  1232                    if (r==EXE_END) break;
    000015D6 2448                   TST         R4,R4
    000015D8 8928                   BT          L1409
         intpr.c  1233                    else if (r==EXE_ELSEIF)
    000015DA 6043                   MOV         R4,R0
    000015DC 8803                   CMP/EQ      #3,R0
    000015DE 8B15                   BF          L1411
         intpr.c  1234                    {
         intpr.c  1235                            if (todo)
    000015E0 2BB8                   TST         R11,R11
    000015E2 89F4                   BT          L1407
         intpr.c  1236                            {
         intpr.c  1237                                    if (done)       this_todo = FALSE;
    000015E4 2DD8                   TST         R13,R13
    000015E6 8901                   BT          L1413
    000015E8              L1585:                            
    000015E8 AFF1                   BRA         L1407
    000015EA 6EC3                   MOV         R12,R14
    000015EC              L1413:                            
         intpr.c  1238                                    else
         intpr.c  1239                                    {
         intpr.c  1240                                            this_todo = (calc_check(FALSE,pline) != 0.0);
    000015EC 7FF8                   ADD         #-8,R15
    000015EE E400                   MOV         #0,R4
    000015F0 6592                   MOV.L       @R9,R5
    000015F2 BA63                   BSR         _calc_check
    000015F4 2FF6                   MOV.L       R15,@-R15
    000015F6 7F04                   ADD         #4,R15
    000015F8 D332                   MOV.L       L1628+6,R3 ; __ned
    000015FA E200                   MOV         #0,R2
    000015FC 2F26                   MOV.L       R2,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   76


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000015FE 430B                   JSR         @R3
    00001600 2F26                   MOV.L       R2,@-R15
    00001602 6E03                   MOV         R0,R14
         intpr.c  1241                                            if (this_todo) done = TRUE;
    00001604 2EE8                   TST         R14,R14
    00001606 89E2                   BT          L1407
    00001608 AFE1                   BRA         L1407
    0000160A 6DA3                   MOV         R10,R13
    0000160C              L1411:                            
         intpr.c  1242                                    }
         intpr.c  1243                            }
         intpr.c  1244                    }
         intpr.c  1245                    else if (r==EXE_ELSE)
    0000160C 8804                   CMP/EQ      #4,R0
    0000160E 8B04                   BF          L1417
         intpr.c  1246                    {
         intpr.c  1247                            if(todo)this_todo = !done;
    00001610 2BB8                   TST         R11,R11
    00001612 89DC                   BT          L1407
    00001614 2DD8                   TST         R13,R13
    00001616 AFDA                   BRA         L1407
    00001618 0E29                   MOVT        R14
    0000161A              L1417:                            
         intpr.c  1248                    }
         intpr.c  1249                    else if (r==EXE_RETURN) return EXE_RETURN;
    0000161A 6043                   MOV         R4,R0
    0000161C 8807                   CMP/EQ      #7,R0
    0000161E 8B01                   BF          L1421
    00001620 A005                   BRA         L1422
    00001622 E007                   MOV         #7,R0
    00001624              L1421:                            
         intpr.c  1250                    else if (r==EXE_BREAK)  return EXE_BREAK;
    00001624 8806                   CMP/EQ      #6,R0
    00001626 8BD2                   BF          L1407
    00001628 A001                   BRA         L1422
    0000162A E006                   MOV         #6,R0
    0000162C              L1409:                            
         intpr.c  1251    
         intpr.c  1252            }
         intpr.c  1253            return EXE_DO;
    0000162C E001                   MOV         #1,R0
         intpr.c  1254    }
    0000162E              L1422:                            
    0000162E 7F04                   ADD         #4,R15
    00001630 4F26                   LDS.L       @R15+,PR
    00001632 69F6                   MOV.L       @R15+,R9
    00001634 6AF6                   MOV.L       @R15+,R10
    00001636 6BF6                   MOV.L       @R15+,R11
    00001638 6CF6                   MOV.L       @R15+,R12
    0000163A 6DF6                   MOV.L       @R15+,R13
    0000163C 000B                   RTS
    0000163E 6EF6                   MOV.L       @R15+,R14
         intpr.c  1255    
         intpr.c  1256    int i_execute_while (SOURCE_FILE * sf,const int todo)
    00001640              _i_execute_while:                ; function: i_execute_while
                                                           ; frame size=168
                                                           ; used runtime library name:




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   77


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                                                           ; __ned, __slow_strcpy
    00001640 2FE6                   MOV.L       R14,@-R15
    00001642 2FD6                   MOV.L       R13,@-R15
    00001644 2FC6                   MOV.L       R12,@-R15
    00001646 6D43                   MOV         R4,R13
         intpr.c  1257    {
         intpr.c  1258            int this_todo,r,pos = sf->pos;
         intpr.c  1259            char cond_buf[LINE_MAX];
         intpr.c  1260            
         intpr.c  1261            strcpy(cond_buf,pline);
    00001648 D21D                   MOV.L       L1628+2,R2 ; _pline
    0000164A 2FB6                   MOV.L       R11,@-R15
    0000164C 2FA6                   MOV.L       R10,@-R15
    0000164E 4F22                   STS.L       PR,@-R15
    00001650 D31D                   MOV.L       L1628+10,R3; __slow_strcpy
    00001652 7F80                   ADD         #-128,R15
    00001654 6AD2                   MOV.L       @R13,R10
    00001656 6122                   MOV.L       @R2,R1
    00001658 430B                   JSR         @R3
    0000165A 60F3                   MOV         R15,R0
         intpr.c  1262    
         intpr.c  1263            if (!todo)
    0000165C 6BF3                   MOV         R15,R11
    0000165E 2558                   TST         R5,R5
    00001660 8F02                   BF/S        L1425
    00001662 EC00                   MOV         #0,R12
         intpr.c  1264            {
         intpr.c  1265                    this_todo = FALSE;
    00001664 A00C                   BRA         L1428
    00001666 6EC3                   MOV         R12,R14
    00001668              L1425:                            
         intpr.c  1266            }
         intpr.c  1267            else
         intpr.c  1268            {
         intpr.c  1269                    this_todo = (calc_check(FALSE,cond_buf) != 0.0);
    00001668 7FF8                   ADD         #-8,R15
    0000166A 65B3                   MOV         R11,R5
    0000166C E400                   MOV         #0,R4
    0000166E BA25                   BSR         _calc_check
    00001670 2FF6                   MOV.L       R15,@-R15
    00001672 7F04                   ADD         #4,R15
    00001674 D313                   MOV.L       L1628+6,R3 ; __ned
    00001676 E200                   MOV         #0,R2
    00001678 2F26                   MOV.L       R2,@-R15
    0000167A 430B                   JSR         @R3
    0000167C 2F26                   MOV.L       R2,@-R15
    0000167E 6E03                   MOV         R0,R14
         intpr.c  1270            }
         intpr.c  1271    
         intpr.c  1272            while (TRUE)
    00001680              L1428:                            
         intpr.c  1273            {
         intpr.c  1274                    r = i_execute_line(sf,this_todo);
    00001680 65E3                   MOV         R14,R5
    00001682 B15B                   BSR         _i_execute_line
    00001684 64D3                   MOV         R13,R4
    00001686 6403                   MOV         R0,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   78


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         intpr.c  1275                    if (r==EXE_END)
    00001688 2448                   TST         R4,R4
    0000168A 8B0F                   BF          L1429
         intpr.c  1276                    {
         intpr.c  1277                            if (this_todo)
    0000168C 2EE8                   TST         R14,R14
    0000168E 891D                   BT          L1432
         intpr.c  1278                            {
         intpr.c  1279                                    this_todo = (calc_check(FALSE,cond_buf) != 0.0);
    00001690 7FF8                   ADD         #-8,R15
    00001692 65B3                   MOV         R11,R5
    00001694 E400                   MOV         #0,R4
    00001696 BA11                   BSR         _calc_check
    00001698 2FF6                   MOV.L       R15,@-R15
    0000169A 7F04                   ADD         #4,R15
    0000169C D209                   MOV.L       L1628+6,R2 ; __ned
    0000169E E300                   MOV         #0,R3
    000016A0 2F36                   MOV.L       R3,@-R15
    000016A2 420B                   JSR         @R2
    000016A4 2F36                   MOV.L       R3,@-R15
    000016A6 6E03                   MOV         R0,R14
         intpr.c  1280                                    sf->pos = pos;
    000016A8 AFEA                   BRA         L1428
    000016AA 2DA2                   MOV.L       R10,@R13
    000016AC              L1429:                            
         intpr.c  1281                            }
         intpr.c  1282                            else
         intpr.c  1283                                    break;
         intpr.c  1284                    }
         intpr.c  1285                    else if (r==EXE_RETURN) return EXE_RETURN;
    000016AC 6043                   MOV         R4,R0
    000016AE 8807                   CMP/EQ      #7,R0
    000016B0 8B01                   BF          L1434
    000016B2 A00C                   BRA         L1435
    000016B4 E007                   MOV         #7,R0
    000016B6              L1434:                            
         intpr.c  1286                    else if (r==EXE_BREAK)
    000016B6 8806                   CMP/EQ      #6,R0
    000016B8 8BE2                   BF          L1428
    000016BA AFE1                   BRA         L1428
         intpr.c  1287                    {
         intpr.c  1288                            this_todo = FALSE;
    000016BC 6EC3                   MOV         R12,R14
    000016BE              L1628:                            
    000016BE 0000                   .DATA.W     0
    000016C0 <00000000>             .DATA.L     _pline
    000016C4 <00000000>             .DATA.L     __ned
    000016C8 <00000000>             .DATA.L     __slow_strcpy
    000016CC              L1432:                            
         intpr.c  1289                    }
         intpr.c  1290            }
         intpr.c  1291    
         intpr.c  1292            return EXE_DO;
    000016CC E001                   MOV         #1,R0
         intpr.c  1293    }
    000016CE              L1435:                            
    000016CE 9187                   MOV.W       L1629,R1   ; H'0080




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   79


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000016D0 3F1C                   ADD         R1,R15
    000016D2 4F26                   LDS.L       @R15+,PR
    000016D4 6AF6                   MOV.L       @R15+,R10
    000016D6 6BF6                   MOV.L       @R15+,R11
    000016D8 6CF6                   MOV.L       @R15+,R12
    000016DA 6DF6                   MOV.L       @R15+,R13
    000016DC 000B                   RTS
    000016DE 6EF6                   MOV.L       @R15+,R14
         intpr.c  1294    
         intpr.c  1295    int i_execute_repeat (SOURCE_FILE * sf,const int todo)
    000016E0              _i_execute_repeat:               ; function: i_execute_repeat
                                                           ; frame size=44
                                                           ; used runtime library name:
                                                           ; __eqd
    000016E0 2FE6                   MOV.L       R14,@-R15
    000016E2 2FD6                   MOV.L       R13,@-R15
    000016E4 2FC6                   MOV.L       R12,@-R15
    000016E6 6D43                   MOV         R4,R13
    000016E8 2FB6                   MOV.L       R11,@-R15
    000016EA 6B53                   MOV         R5,R11
    000016EC 2FA6                   MOV.L       R10,@-R15
         intpr.c  1296    {
         intpr.c  1297            int this_todo,r,pos = sf->pos;
         intpr.c  1298    
         intpr.c  1299            if (!todo)
    000016EE 2BB8                   TST         R11,R11
    000016F0 2F96                   MOV.L       R9,@-R15
    000016F2 4F22                   STS.L       PR,@-R15
    000016F4 6AD2                   MOV.L       @R13,R10
    000016F6 8F02                   BF/S        L1438
    000016F8 EC00                   MOV         #0,R12
         intpr.c  1300            {
         intpr.c  1301                    this_todo = FALSE;
    000016FA A001                   BRA         L1439
    000016FC 6EC3                   MOV         R12,R14
    000016FE              L1438:                            
         intpr.c  1302            }
         intpr.c  1303            else
         intpr.c  1304            {
         intpr.c  1305                    this_todo = TRUE;
    000016FE EE01                   MOV         #1,R14
    00001700              L1439:                            
    00001700 D938                   MOV.L       L1629+4,R9 ; _pline
         intpr.c  1306            }
         intpr.c  1307    
         intpr.c  1308            while (TRUE)
    00001702              L1441:                            
         intpr.c  1309            {
         intpr.c  1310                    r = i_execute_line(sf,this_todo);
    00001702 65E3                   MOV         R14,R5
    00001704 B11A                   BSR         _i_execute_line
    00001706 64D3                   MOV         R13,R4
         intpr.c  1311                    if (r==EXE_UNTIL)
    00001708 8808                   CMP/EQ      #8,R0
    0000170A 8F12                   BF/S        L1442
    0000170C 6403                   MOV         R0,R4
         intpr.c  1312                    {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   80


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         intpr.c  1313                            if (todo)
    0000170E 2BB8                   TST         R11,R11
    00001710 8918                   BT          L1445
         intpr.c  1314                            {
         intpr.c  1315                                    this_todo = (calc_check(FALSE,pline) == 0.0);
    00001712 7FF8                   ADD         #-8,R15
    00001714 6592                   MOV.L       @R9,R5
    00001716 E400                   MOV         #0,R4
    00001718 B9D0                   BSR         _calc_check
    0000171A 2FF6                   MOV.L       R15,@-R15
    0000171C D332                   MOV.L       L1629+8,R3 ; __eqd
    0000171E 7F04                   ADD         #4,R15
    00001720 E200                   MOV         #0,R2
    00001722 2F26                   MOV.L       R2,@-R15
    00001724 430B                   JSR         @R3
    00001726 2F26                   MOV.L       R2,@-R15
    00001728 6E03                   MOV         R0,R14
         intpr.c  1316                                    if (!this_todo)
    0000172A 2EE8                   TST         R14,R14
    0000172C 890A                   BT          L1445
         intpr.c  1317                                            break;
         intpr.c  1318                                    else
         intpr.c  1319                                            sf->pos = pos;
    0000172E AFE8                   BRA         L1441
    00001730 2DA2                   MOV.L       R10,@R13
    00001732              L1442:                            
         intpr.c  1320                            }
         intpr.c  1321                            else
         intpr.c  1322                                    break;
         intpr.c  1323                    }
         intpr.c  1324                    else if (r==EXE_RETURN) return EXE_RETURN;
    00001732 6043                   MOV         R4,R0
    00001734 8807                   CMP/EQ      #7,R0
    00001736 8B01                   BF          L1449
    00001738 A005                   BRA         L1450
    0000173A E007                   MOV         #7,R0
    0000173C              L1449:                            
         intpr.c  1325                    else if (r==EXE_BREAK)
    0000173C 8806                   CMP/EQ      #6,R0
    0000173E 8BE0                   BF          L1441
    00001740 AFDF                   BRA         L1441
         intpr.c  1326                    {
         intpr.c  1327                            this_todo = FALSE;
    00001742 6EC3                   MOV         R12,R14
    00001744              L1445:                            
         intpr.c  1328                    }
         intpr.c  1329            }
         intpr.c  1330    
         intpr.c  1331            return EXE_DO;
    00001744 E001                   MOV         #1,R0
         intpr.c  1332    }
    00001746              L1450:                            
    00001746 4F26                   LDS.L       @R15+,PR
    00001748 69F6                   MOV.L       @R15+,R9
    0000174A 6AF6                   MOV.L       @R15+,R10
    0000174C 6BF6                   MOV.L       @R15+,R11
    0000174E 6CF6                   MOV.L       @R15+,R12




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   81


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001750 6DF6                   MOV.L       @R15+,R13
    00001752 000B                   RTS
    00001754 6EF6                   MOV.L       @R15+,R14
         intpr.c  1333    
         intpr.c  1334    int i_execute_for (SOURCE_FILE * sf,const int todo)
    00001756              _i_execute_for:                  ; function: i_execute_for
                                                           ; frame size=72
                                                           ; used runtime library name:
                                                           ; __addd, __led
    00001756 2FE6                   MOV.L       R14,@-R15
    00001758 2FD6                   MOV.L       R13,@-R15
    0000175A 2FC6                   MOV.L       R12,@-R15
    0000175C 2FB6                   MOV.L       R11,@-R15
    0000175E 6C43                   MOV         R4,R12
         intpr.c  1335    {
         intpr.c  1336            int             this_todo,r,pos = sf->pos;
         intpr.c  1337            real    begin,end,step;
         intpr.c  1338            VAR             * v;
         intpr.c  1339    
         intpr.c  1340            l_get_token();v = get_var(token);
    00001760 D322                   MOV.L       L1629+12,R3; _l_get_token
    00001762 2FA6                   MOV.L       R10,@-R15
    00001764 4F22                   STS.L       PR,@-R15
    00001766 7FE4                   ADD         #-28,R15
    00001768 2F52                   MOV.L       R5,@R15
    0000176A 430B                   JSR         @R3
    0000176C 6AC2                   MOV.L       @R12,R10
    0000176E D420                   MOV.L       L1629+16,R4; _token
    00001770 BC40                   BSR         _get_var
    00001772 0009                   NOP
         intpr.c  1341            l_get_token();// skip '='
    00001774 D31D                   MOV.L       L1629+12,R3; _l_get_token
    00001776 430B                   JSR         @R3
    00001778 6D03                   MOV         R0,R13
         intpr.c  1342            begin   = calc_check(FALSE,pline);
    0000177A E400                   MOV         #0,R4
    0000177C DE19                   MOV.L       L1629+4,R14; _pline
    0000177E 62F3                   MOV         R15,R2
    00001780 65E2                   MOV.L       @R14,R5
    00001782 7214                   ADD         #20,R2
    00001784 B99A                   BSR         _calc_check
    00001786 2F26                   MOV.L       R2,@-R15
         intpr.c  1343            l_get_token();// skip 'to'
    00001788 D218                   MOV.L       L1629+12,R2; _l_get_token
    0000178A 420B                   JSR         @R2
    0000178C 0009                   NOP
         intpr.c  1344            end             = calc_check(FALSE,pline);
    0000178E E400                   MOV         #0,R4
    00001790 65E2                   MOV.L       @R14,R5
    00001792 63F3                   MOV         R15,R3
    00001794 7310                   ADD         #16,R3
    00001796 B991                   BSR         _calc_check
    00001798 2F36                   MOV.L       R3,@-R15
         intpr.c  1345            l_get_token();
    0000179A D314                   MOV.L       L1629+12,R3; _l_get_token
    0000179C 430B                   JSR         @R3
    0000179E 7F08                   ADD         #8,R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   82


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         intpr.c  1346            if (token_type!=TT_LINE_END) step= calc_check(FALSE,pline);
    000017A0 D314                   MOV.L       L1629+20,R3; _token_type
    000017A2 6232                   MOV.L       @R3,R2
    000017A4 2228                   TST         R2,R2
    000017A6 8907                   BT          L1453
    000017A8 65E2                   MOV.L       @R14,R5
    000017AA E400                   MOV         #0,R4
    000017AC 62F3                   MOV         R15,R2
    000017AE 7204                   ADD         #4,R2
    000017B0 B984                   BSR         _calc_check
    000017B2 2F26                   MOV.L       R2,@-R15
    000017B4 A006                   BRA         L1454
    000017B6 7F04                   ADD         #4,R15
    000017B8              L1453:                            
         intpr.c  1347            else                                             step = 1.0;
    000017B8 D10F                   MOV.L       L1629+24,R1; H'3FF00000
    000017BA 62F3                   MOV         R15,R2
    000017BC 7204                   ADD         #4,R2
    000017BE 2212                   MOV.L       R1,@R2
    000017C0 E100                   MOV         #0,R1
    000017C2 1211                   MOV.L       R1,@(4,R2)
    000017C4              L1454:                            
         intpr.c  1348            
         intpr.c  1349            v->value = begin;
    000017C4 63F3                   MOV         R15,R3
    000017C6 7314                   ADD         #20,R3
    000017C8 6232                   MOV.L       @R3,R2
    000017CA 60D3                   MOV         R13,R0
    000017CC 7004                   ADD         #4,R0
    000017CE 2022                   MOV.L       R2,@R0
    000017D0 5231                   MOV.L       @(4,R3),R2
    000017D2 1021                   MOV.L       R2,@(4,R0)
         intpr.c  1350    
         intpr.c  1351            if (!todo)
    000017D4 63F2                   MOV.L       @R15,R3
    000017D6 2338                   TST         R3,R3
    000017D8 8F10                   BF/S        L1455
    000017DA EB00                   MOV         #0,R11
         intpr.c  1352            {
         intpr.c  1353                    this_todo = FALSE;
    000017DC A019                   BRA         L1458
    000017DE 6EB3                   MOV         R11,R14
    000017E0              L1629:                            
    000017E0 0080                   .DATA.W     H'0080
    000017E2 0000                   .DATA.W     0
    000017E4 <00000000>             .DATA.L     _pline
    000017E8 <00000000>             .DATA.L     __eqd
    000017EC <00000000>             .DATA.L     _l_get_token
    000017F0 <00000000>             .DATA.L     _token
    000017F4 <00000000>             .DATA.L     _token_type
    000017F8 3FF00000               .DATA.L     H'3FF00000
    000017FC              L1455:                            
         intpr.c  1354            }
         intpr.c  1355            else
         intpr.c  1356            {
         intpr.c  1357                    this_todo = v->value<=end;
    000017FC 52D2                   MOV.L       @(8,R13),R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   83


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000017FE 2F26                   MOV.L       R2,@-R15
    00001800 52D1                   MOV.L       @(4,R13),R2
    00001802 2F26                   MOV.L       R2,@-R15
    00001804 53F6                   MOV.L       @(24,R15),R3
    00001806 2F36                   MOV.L       R3,@-R15
    00001808 53F6                   MOV.L       @(24,R15),R3
    0000180A D246                   MOV.L       L1630+2,R2 ; __led
    0000180C 420B                   JSR         @R2
    0000180E 2F36                   MOV.L       R3,@-R15
    00001810 6E03                   MOV         R0,R14
         intpr.c  1358            }
         intpr.c  1359    
         intpr.c  1360            while (TRUE)
    00001812              L1458:                            
         intpr.c  1361            {
         intpr.c  1362                    r = i_execute_line(sf,this_todo);
    00001812 65E3                   MOV         R14,R5
    00001814 B092                   BSR         _i_execute_line
    00001816 64C3                   MOV         R12,R4
    00001818 6403                   MOV         R0,R4
         intpr.c  1363                    if (r==EXE_END)
    0000181A 2448                   TST         R4,R4
    0000181C 8B1C                   BF          L1459
         intpr.c  1364                    {
         intpr.c  1365                            if (this_todo)
    0000181E 2EE8                   TST         R14,R14
    00001820 8923                   BT          L1462
         intpr.c  1366                            {
         intpr.c  1367                                    v->value+=step;
    00001822 53D2                   MOV.L       @(8,R13),R3
    00001824 2F36                   MOV.L       R3,@-R15
    00001826 53D1                   MOV.L       @(4,R13),R3
    00001828 2F36                   MOV.L       R3,@-R15
    0000182A 63D3                   MOV         R13,R3
    0000182C 52F4                   MOV.L       @(16,R15),R2
    0000182E 7304                   ADD         #4,R3
    00001830 2F26                   MOV.L       R2,@-R15
    00001832 52F4                   MOV.L       @(16,R15),R2
    00001834 2F26                   MOV.L       R2,@-R15
    00001836 2F36                   MOV.L       R3,@-R15
    00001838 D33B                   MOV.L       L1630+6,R3 ; __addd
    0000183A 430B                   JSR         @R3
    0000183C 0009                   NOP
         intpr.c  1368                                    this_todo = v->value<=end;
    0000183E 52D2                   MOV.L       @(8,R13),R2
    00001840 2F26                   MOV.L       R2,@-R15
    00001842 52D1                   MOV.L       @(4,R13),R2
    00001844 2F26                   MOV.L       R2,@-R15
    00001846 53F6                   MOV.L       @(24,R15),R3
    00001848 D236                   MOV.L       L1630+2,R2 ; __led
    0000184A 2F36                   MOV.L       R3,@-R15
    0000184C 53F6                   MOV.L       @(24,R15),R3
    0000184E 420B                   JSR         @R2
    00001850 2F36                   MOV.L       R3,@-R15
    00001852 6E03                   MOV         R0,R14
         intpr.c  1369                                    sf->pos = pos;
    00001854 AFDD                   BRA         L1458




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   84


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001856 2CA2                   MOV.L       R10,@R12
    00001858              L1459:                            
         intpr.c  1370                            }
         intpr.c  1371                            else
         intpr.c  1372                                    break;
         intpr.c  1373                    }
         intpr.c  1374                    else if (r==EXE_RETURN) return EXE_RETURN;
    00001858 6043                   MOV         R4,R0
    0000185A 8807                   CMP/EQ      #7,R0
    0000185C 8B01                   BF          L1464
    0000185E A005                   BRA         L1465
    00001860 E007                   MOV         #7,R0
    00001862              L1464:                            
         intpr.c  1375                    else if (r==EXE_BREAK)
    00001862 8806                   CMP/EQ      #6,R0
    00001864 8BD5                   BF          L1458
    00001866 AFD4                   BRA         L1458
         intpr.c  1376                    {
         intpr.c  1377                            this_todo = FALSE;
    00001868 6EB3                   MOV         R11,R14
    0000186A              L1462:                            
         intpr.c  1378                    }
         intpr.c  1379            }
         intpr.c  1380    
         intpr.c  1381            return EXE_DO;
    0000186A E001                   MOV         #1,R0
         intpr.c  1382    }
    0000186C              L1465:                            
    0000186C 7F1C                   ADD         #28,R15
    0000186E 4F26                   LDS.L       @R15+,PR
    00001870 6AF6                   MOV.L       @R15+,R10
    00001872 6BF6                   MOV.L       @R15+,R11
    00001874 6CF6                   MOV.L       @R15+,R12
    00001876 6DF6                   MOV.L       @R15+,R13
    00001878 000B                   RTS
    0000187A 6EF6                   MOV.L       @R15+,R14
         intpr.c  1383    
         intpr.c  1384    int i_execute_case (SOURCE_FILE * sf,const int todo)
    0000187C              _i_execute_case:                 ; function: i_execute_case
                                                           ; frame size=52
                                                           ; used runtime library name:
                                                           ; __eqd
    0000187C 2FE6                   MOV.L       R14,@-R15
    0000187E 2FD6                   MOV.L       R13,@-R15
    00001880 2FC6                   MOV.L       R12,@-R15
         intpr.c  1385    {
         intpr.c  1386            int this_todo,r,done = FALSE;
    00001882 EC00                   MOV         #0,R12
         intpr.c  1387            VAR * v;
         intpr.c  1388    
         intpr.c  1389            l_get_token();
    00001884 D329                   MOV.L       L1630+10,R3; _l_get_token
    00001886 2FB6                   MOV.L       R11,@-R15
    00001888 2FA6                   MOV.L       R10,@-R15
    0000188A 6B53                   MOV         R5,R11
    0000188C 2F96                   MOV.L       R9,@-R15
    0000188E 2F86                   MOV.L       R8,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   85


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001890 4F22                   STS.L       PR,@-R15
    00001892 7FFC                   ADD         #-4,R15
    00001894 2F42                   MOV.L       R4,@R15
    00001896 430B                   JSR         @R3
    00001898 6DC3                   MOV         R12,R13
         intpr.c  1390            v = find_var(token);
    0000189A D425                   MOV.L       L1630+14,R4; _token
    0000189C BB76                   BSR         _find_var
    0000189E 0009                   NOP
         intpr.c  1391    
         intpr.c  1392            if (!todo)
    000018A0 2BB8                   TST         R11,R11
    000018A2 8F01                   BF/S        L1468
    000018A4 6903                   MOV         R0,R9
         intpr.c  1393            {
         intpr.c  1394                    this_todo = FALSE;
    000018A6 6EC3                   MOV         R12,R14
    000018A8              L1468:                            
    000018A8 D822                   MOV.L       L1630+18,R8; _pline
    000018AA EA01                   MOV         #1,R10
         intpr.c  1395            }
         intpr.c  1396    
         intpr.c  1397            while (TRUE)
    000018AC              L1470:                            
         intpr.c  1398            {
         intpr.c  1399                    r = i_execute_line(sf,this_todo);
    000018AC 65E3                   MOV         R14,R5
    000018AE B045                   BSR         _i_execute_line
    000018B0 64F2                   MOV.L       @R15,R4
    000018B2 6403                   MOV         R0,R4
         intpr.c  1400                    if (r==EXE_END) break;
    000018B4 2448                   TST         R4,R4
    000018B6 8929                   BT          L1472
         intpr.c  1401                    else if (r==EXE_WHEN)
    000018B8 6043                   MOV         R4,R0
    000018BA 8805                   CMP/EQ      #5,R0
    000018BC 8B16                   BF          L1474
         intpr.c  1402                    {
         intpr.c  1403                            if (todo)
    000018BE 2BB8                   TST         R11,R11
    000018C0 89F4                   BT          L1470
         intpr.c  1404                            {
         intpr.c  1405                                    if (done)       this_todo = FALSE;
    000018C2 2DD8                   TST         R13,R13
    000018C4 8901                   BT          L1476
    000018C6 AFF1                   BRA         L1470
    000018C8 6EC3                   MOV         R12,R14
    000018CA              L1476:                            
         intpr.c  1406                                    else
         intpr.c  1407                                    {
         intpr.c  1408                                            this_todo = (calc_check(FALSE,pline) == v->value);
    000018CA 7FF8                   ADD         #-8,R15
    000018CC 6582                   MOV.L       @R8,R5
    000018CE E400                   MOV         #0,R4
    000018D0 B8F4                   BSR         _calc_check
    000018D2 2FF6                   MOV.L       R15,@-R15
    000018D4 D318                   MOV.L       L1630+22,R3; __eqd




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   86


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000018D6 7F04                   ADD         #4,R15
    000018D8 5292                   MOV.L       @(8,R9),R2
    000018DA 2F26                   MOV.L       R2,@-R15
    000018DC 5291                   MOV.L       @(4,R9),R2
    000018DE 430B                   JSR         @R3
    000018E0 2F26                   MOV.L       R2,@-R15
    000018E2 6E03                   MOV         R0,R14
         intpr.c  1409                                            if (this_todo) done = TRUE;
    000018E4 2EE8                   TST         R14,R14
    000018E6 89E1                   BT          L1470
    000018E8 AFE0                   BRA         L1470
    000018EA 6DA3                   MOV         R10,R13
    000018EC              L1474:                            
         intpr.c  1410                                    }
         intpr.c  1411                            }
         intpr.c  1412                    }
         intpr.c  1413                    else if (r==EXE_ELSE)
    000018EC 8804                   CMP/EQ      #4,R0
    000018EE 8B04                   BF          L1480
         intpr.c  1414                    {
         intpr.c  1415                            if(todo)this_todo = !done;
    000018F0 2BB8                   TST         R11,R11
    000018F2 89DB                   BT          L1470
    000018F4 2DD8                   TST         R13,R13
    000018F6 AFD9                   BRA         L1470
    000018F8 0E29                   MOVT        R14
    000018FA              L1480:                            
         intpr.c  1416                    }
         intpr.c  1417                    else if (r==EXE_RETURN) return EXE_RETURN;
    000018FA 6043                   MOV         R4,R0
    000018FC 8807                   CMP/EQ      #7,R0
    000018FE 8B01                   BF          L1484
    00001900 A005                   BRA         L1485
    00001902 E007                   MOV         #7,R0
    00001904              L1484:                            
         intpr.c  1418                    else if (r==EXE_BREAK)  return EXE_BREAK;
    00001904 8806                   CMP/EQ      #6,R0
    00001906 8BD1                   BF          L1470
    00001908 A001                   BRA         L1485
    0000190A E006                   MOV         #6,R0
    0000190C              L1472:                            
         intpr.c  1419    
         intpr.c  1420            }
         intpr.c  1421            return EXE_DO;
    0000190C E001                   MOV         #1,R0
         intpr.c  1422    }
    0000190E              L1485:                            
    0000190E 7F04                   ADD         #4,R15
    00001910 4F26                   LDS.L       @R15+,PR
    00001912 68F6                   MOV.L       @R15+,R8
    00001914 69F6                   MOV.L       @R15+,R9
    00001916 6AF6                   MOV.L       @R15+,R10
    00001918 6BF6                   MOV.L       @R15+,R11
    0000191A 6CF6                   MOV.L       @R15+,R12
    0000191C 6DF6                   MOV.L       @R15+,R13
    0000191E 000B                   RTS
    00001920 6EF6                   MOV.L       @R15+,R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   87


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001922              L1630:                            
    00001922 0000                   .DATA.W     0
    00001924 <00000000>             .DATA.L     __led
    00001928 <00000000>             .DATA.L     __addd
    0000192C <00000000>             .DATA.L     _l_get_token
    00001930 <00000000>             .DATA.L     _token
    00001934 <00000000>             .DATA.L     _pline
    00001938 <00000000>             .DATA.L     __eqd
         intpr.c  1423    
         intpr.c  1424    int i_execute_line (SOURCE_FILE * sf,const int todo)
    0000193C              _i_execute_line:                 ; function: i_execute_line
                                                           ; frame size=188
                                                           ; used runtime library name:
                                                           ; __dtoi, __slow_strcmp1
    0000193C 2FE6                   MOV.L       R14,@-R15
    0000193E 2FD6                   MOV.L       R13,@-R15
    00001940 2FC6                   MOV.L       R12,@-R15
    00001942 6C43                   MOV         R4,R12
    00001944 2FB6                   MOV.L       R11,@-R15
    00001946 2FA6                   MOV.L       R10,@-R15
    00001948 2F96                   MOV.L       R9,@-R15
    0000194A 2F86                   MOV.L       R8,@-R15
    0000194C 4F22                   STS.L       PR,@-R15
    0000194E 9054                   MOV.W       L1631,R0   ; H'FF74
    00001950 3F0C                   ADD         R0,R15
         intpr.c  1425    {
         intpr.c  1426            l_get_line(sf);pline = line;
    00001952 BAB4                   BSR         _l_get_line
    00001954 6B53                   MOV         R5,R11
    00001956 DA2F                   MOV.L       L1631+26,R10; _pline
    00001958 D22F                   MOV.L       L1631+30,R2; _line
         intpr.c  1427            l_get_token();
    0000195A D330                   MOV.L       L1631+34,R3; _l_get_token
    0000195C 430B                   JSR         @R3
    0000195E 2A22                   MOV.L       R2,@R10
    00001960 DE2F                   MOV.L       L1631+38,R14; _token_type
    00001962 64E2                   MOV.L       @R14,R4
    00001964 2448                   TST         R4,R4
    00001966 8B01                   BF          L1632
    00001968 A190                   BRA         L941
    0000196A 0009                   NOP
    0000196C              L1632:                            
         intpr.c  1428            if (token_type==TT_LINE_END)
         intpr.c  1429            {
         intpr.c  1430                    return EXE_DO;// skip empty line
         intpr.c  1431            }
         intpr.c  1432            else if (IS_KEYWORD(token_type))
    0000196C DD2D                   MOV.L       L1631+42,R13; _token
    0000196E 9345                   MOV.W       L1631+2,R3 ; H'012C
    00001970 3433                   CMP/GE      R3,R4
    00001972 8901                   BT          L1633
    00001974 A0D8                   BRA         L1491
    00001976 0009                   NOP
    00001978              L1633:                            
         intpr.c  1433            {
         intpr.c  1434                    if (token_type==KEY_END)
    00001978 9141                   MOV.W       L1631+4,R1 ; H'012D




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   88


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000197A 3410                   CMP/EQ      R1,R4
    0000197C 8B01                   BF          L1634
    0000197E A137                   BRA         L1586
    00001980 0009                   NOP
    00001982              L1634:                            
         intpr.c  1435                    {
         intpr.c  1436                            return EXE_END;
         intpr.c  1437                    }
         intpr.c  1438                    else if (token_type==KEY_IF)
    00001982 923D                   MOV.W       L1631+6,R2 ; H'012E
    00001984 3420                   CMP/EQ      R2,R4
    00001986 8B04                   BF          L1494
         intpr.c  1439                    {
         intpr.c  1440                            return i_execute_if (sf,todo);
    00001988 65B3                   MOV         R11,R5
    0000198A BE01                   BSR         _i_execute_if
    0000198C 64C3                   MOV         R12,R4
    0000198E A17E                   BRA         L1489
    00001990 0009                   NOP
    00001992              L1494:                            
         intpr.c  1441                    }
         intpr.c  1442                    else if (token_type==KEY_WHILE)
    00001992 9336                   MOV.W       L1631+8,R3 ; H'0131
    00001994 3430                   CMP/EQ      R3,R4
    00001996 8B04                   BF          L1496
         intpr.c  1443                    {
         intpr.c  1444                            return i_execute_while(sf,todo);
    00001998 65B3                   MOV         R11,R5
    0000199A BE51                   BSR         _i_execute_while
    0000199C 64C3                   MOV         R12,R4
    0000199E A176                   BRA         L1489
    000019A0 0009                   NOP
    000019A2              L1496:                            
         intpr.c  1445                    }
         intpr.c  1446                    else if (token_type==KEY_REPEAT)
    000019A2 912F                   MOV.W       L1631+10,R1; H'013A
    000019A4 3410                   CMP/EQ      R1,R4
    000019A6 8B04                   BF          L1493
         intpr.c  1447                    {
         intpr.c  1448                            return i_execute_repeat(sf,todo);
    000019A8 65B3                   MOV         R11,R5
    000019AA BE99                   BSR         _i_execute_repeat
    000019AC 64C3                   MOV         R12,R4
    000019AE A16E                   BRA         L1489
    000019B0 0009                   NOP
    000019B2              L1493:                            
         intpr.c  1449                    }
         intpr.c  1450                    if (token_type==KEY_UNTIL)
    000019B2 9328                   MOV.W       L1631+12,R3; H'013B
    000019B4 3430                   CMP/EQ      R3,R4
    000019B6 8B01                   BF          L1499
         intpr.c  1451                    {
         intpr.c  1452                            return EXE_UNTIL;
    000019B8 A169                   BRA         L1489
    000019BA E008                   MOV         #8,R0
    000019BC              L1499:                            
         intpr.c  1453                    }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   89


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         intpr.c  1454                    else if (token_type==KEY_FOR)
    000019BC 9224                   MOV.W       L1631+14,R2; H'0132
    000019BE 3420                   CMP/EQ      R2,R4
    000019C0 8B04                   BF          L1501
         intpr.c  1455                    {
         intpr.c  1456                            return i_execute_for(sf,todo);
    000019C2 65B3                   MOV         R11,R5
    000019C4 BEC7                   BSR         _i_execute_for
    000019C6 64C3                   MOV         R12,R4
    000019C8 A161                   BRA         L1489
    000019CA 0009                   NOP
    000019CC              L1501:                            
         intpr.c  1457                    }
         intpr.c  1458                    else if (token_type==KEY_CASE)
    000019CC 911D                   MOV.W       L1631+16,R1; H'0133
    000019CE 3410                   CMP/EQ      R1,R4
    000019D0 8B04                   BF          L1503
         intpr.c  1459                    {
         intpr.c  1460                            return i_execute_case(sf,todo);
    000019D2 65B3                   MOV         R11,R5
    000019D4 BF52                   BSR         _i_execute_case
    000019D6 64C3                   MOV         R12,R4
    000019D8 A159                   BRA         L1489
    000019DA 0009                   NOP
    000019DC              L1503:                            
         intpr.c  1461                    }
         intpr.c  1462                    else if (token_type==KEY_ELSEIF)
    000019DC 9316                   MOV.W       L1631+18,R3; H'012F
    000019DE 3430                   CMP/EQ      R3,R4
    000019E0 8B01                   BF          L1505
         intpr.c  1463                    {
         intpr.c  1464                            return EXE_ELSEIF;
    000019E2 A154                   BRA         L1489
    000019E4 E003                   MOV         #3,R0
    000019E6              L1505:                            
         intpr.c  1465                    }
         intpr.c  1466                    else if (token_type==KEY_WHEN)
    000019E6 9212                   MOV.W       L1631+20,R2; H'0134
    000019E8 3420                   CMP/EQ      R2,R4
    000019EA 8B01                   BF          L1507
         intpr.c  1467                    {
         intpr.c  1468                            return EXE_WHEN;
    000019EC A14F                   BRA         L1489
    000019EE E005                   MOV         #5,R0
    000019F0              L1507:                            
         intpr.c  1469                    }
         intpr.c  1470                    else if (token_type==KEY_ELSE)
    000019F0 910E                   MOV.W       L1631+22,R1; H'0130
    000019F2 3410                   CMP/EQ      R1,R4
    000019F4 8B18                   BF          L1500
         intpr.c  1471                    {
         intpr.c  1472                            return EXE_ELSE;
    000019F6 A14A                   BRA         L1489
    000019F8 E004                   MOV         #4,R0
    000019FA              L1631:                            
    000019FA FF74                   .DATA.W     H'FF74
    000019FC 012C                   .DATA.W     H'012C




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   90


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000019FE 012D                   .DATA.W     H'012D
    00001A00 012E                   .DATA.W     H'012E
    00001A02 0131                   .DATA.W     H'0131
    00001A04 013A                   .DATA.W     H'013A
    00001A06 013B                   .DATA.W     H'013B
    00001A08 0132                   .DATA.W     H'0132
    00001A0A 0133                   .DATA.W     H'0133
    00001A0C 012F                   .DATA.W     H'012F
    00001A0E 0134                   .DATA.W     H'0134
    00001A10 0130                   .DATA.W     H'0130
    00001A12 0000                   .DATA.W     0
    00001A14 <00000000>             .DATA.L     _pline
    00001A18 <00000000>             .DATA.L     _line
    00001A1C <00000000>             .DATA.L     _l_get_token
    00001A20 <00000000>             .DATA.L     _token_type
    00001A24 <00000000>             .DATA.L     _token
    00001A28              L1500:                            
         intpr.c  1473                    }
         intpr.c  1474                    if (!todo) return EXE_DO;
    00001A28 2BB8                   TST         R11,R11
    00001A2A 8B01                   BF          L1635
    00001A2C A12E                   BRA         L941
    00001A2E 0009                   NOP
    00001A30              L1635:                            
         intpr.c  1475                    if (token_type==KEY_BREAK)
    00001A30 9365                   MOV.W       L1636,R3   ; H'0137
    00001A32 3430                   CMP/EQ      R3,R4
    00001A34 8B01                   BF          L1511
         intpr.c  1476                    {
         intpr.c  1477                            return EXE_BREAK;
    00001A36 A12A                   BRA         L1489
    00001A38 E006                   MOV         #6,R0
    00001A3A              L1511:                            
         intpr.c  1478                    }
         intpr.c  1479                    else if (token_type==KEY_RETURN)
    00001A3A 9261                   MOV.W       L1636+2,R2 ; H'0138
    00001A3C 3420                   CMP/EQ      R2,R4
    00001A3E 8B01                   BF          L1513
         intpr.c  1480                    {
         intpr.c  1481                            return EXE_RETURN;
    00001A40 A125                   BRA         L1489
    00001A42 E007                   MOV         #7,R0
    00001A44              L1513:                            
         intpr.c  1482                    }
         intpr.c  1483                    else if (token_type==KEY_GOSUB)
    00001A44 915D                   MOV.W       L1636+4,R1 ; H'0135
    00001A46 3410                   CMP/EQ      R1,R4
    00001A48 8B07                   BF          L1515
         intpr.c  1484                    {
         intpr.c  1485                            extern int i_call_sub (SOURCE_FILE *,const char *);
         intpr.c  1486                            l_get_token();
    00001A4A D32F                   MOV.L       L1636+10,R3; _l_get_token
    00001A4C 430B                   JSR         @R3
    00001A4E 0009                   NOP
         intpr.c  1487                            return i_call_sub(sf,token);
    00001A50 65D3                   MOV         R13,R5
    00001A52 B127                   BSR         _i_call_sub




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   91


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001A54 64C3                   MOV         R12,R4
    00001A56 A11A                   BRA         L1489
    00001A58 0009                   NOP
    00001A5A              L1515:                            
         intpr.c  1488                    }
         intpr.c  1489                    else if (token_type==KEY_DIM)
    00001A5A 9053                   MOV.W       L1636+6,R0 ; H'0139
    00001A5C 3400                   CMP/EQ      R0,R4
    00001A5E 8B44                   BF          L1517
    00001A60 D92A                   MOV.L       L1636+14,R9; _calloc
    00001A62 E800                   MOV         #0,R8
         intpr.c  1490                    {
         intpr.c  1491                            ARRAY * array;
         intpr.c  1492                            long    size;
         intpr.c  1493                            
         intpr.c  1494                            while(1)
    00001A64              L1519:                            
         intpr.c  1495                            {
         intpr.c  1496                                    l_get_token();
    00001A64 D328                   MOV.L       L1636+10,R3; _l_get_token
    00001A66 430B                   JSR         @R3
    00001A68 0009                   NOP
         intpr.c  1497                                    // new array
         intpr.c  1498                                    array = (ARRAY*)calloc(sizeof(ARRAY),1);
    00001A6A E501                   MOV         #1,R5
    00001A6C 490B                   JSR         @R9
    00001A6E E40C                   MOV         #12,R4
    00001A70 6B03                   MOV         R0,R11
         intpr.c  1499                                    array->name  = s_strdup(token);
    00001A72 BA77                   BSR         _s_strdup
    00001A74 64D3                   MOV         R13,R4
    00001A76 2B02                   MOV.L       R0,@R11
         intpr.c  1500                                    list_push(&list_array,array);
    00001A78 D425                   MOV.L       L1636+18,R4; _list_array
    00001A7A D326                   MOV.L       L1636+22,R3; _list_push
    00001A7C 430B                   JSR         @R3
    00001A7E 65B3                   MOV         R11,R5
         intpr.c  1501                                    //
         intpr.c  1502                                    l_get_token();// skip '('
    00001A80 D221                   MOV.L       L1636+10,R2; _l_get_token
    00001A82 420B                   JSR         @R2
    00001A84 0009                   NOP
         intpr.c  1503                                    size = (long)calc_check(FALSE,pline);
    00001A86 7FF8                   ADD         #-8,R15
    00001A88 65A2                   MOV.L       @R10,R5
    00001A8A E400                   MOV         #0,R4
    00001A8C B816                   BSR         _calc_check
    00001A8E 2FF6                   MOV.L       R15,@-R15
    00001A90 D221                   MOV.L       L1636+26,R2; __dtoi
    00001A92 420B                   JSR         @R2
    00001A94 7F04                   ADD         #4,R15
    00001A96 6C03                   MOV         R0,R12
         intpr.c  1504                                    if (size<=0)
    00001A98 4C15                   CMP/PL      R12
    00001A9A 8905                   BT          L1520
         intpr.c  1505                                    {
         intpr.c  1506                                            merror_msg("illegal array size %d!",size);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   92


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001A9C 2FC6                   MOV.L       R12,@-R15
    00001A9E D21F                   MOV.L       L1636+30,R2; L840
    00001AA0 D31F                   MOV.L       L1636+34,R3; _merror_msg
    00001AA2 430B                   JSR         @R3
    00001AA4 2F26                   MOV.L       R2,@-R15
    00001AA6 7F08                   ADD         #8,R15
    00001AA8              L1520:                            
         intpr.c  1507                                    }
         intpr.c  1508                                    array->size  = size;
    00001AA8 1BC2                   MOV.L       R12,@(8,R11)
         intpr.c  1509                                    array->array = calloc(sizeof(real),size);
    00001AAA 65C3                   MOV         R12,R5
    00001AAC 490B                   JSR         @R9
    00001AAE E408                   MOV         #8,R4
    00001AB0 1B01                   MOV.L       R0,@(4,R11)
         intpr.c  1510                                    {
         intpr.c  1511                                            int i;
         intpr.c  1512                                            for (i=0;i<size;++i) array->array[i] = 0.0;
    00001AB2 6583                   MOV         R8,R5
    00001AB4 4C15                   CMP/PL      R12
    00001AB6 8F08                   BF/S        L1521
    00001AB8 6403                   MOV         R0,R4
    00001ABA              L1522:                            
    00001ABA 6343                   MOV         R4,R3
    00001ABC E200                   MOV         #0,R2
    00001ABE 7501                   ADD         #1,R5
    00001AC0 2322                   MOV.L       R2,@R3
    00001AC2 35C3                   CMP/GE      R12,R5
    00001AC4 1321                   MOV.L       R2,@(4,R3)
    00001AC6 8FF8                   BF/S        L1522
    00001AC8 7408                   ADD         #8,R4
    00001ACA              L1521:                            
         intpr.c  1513                                    }
         intpr.c  1514                                    l_get_token();// skip ')'
    00001ACA D20F                   MOV.L       L1636+10,R2; _l_get_token
    00001ACC 420B                   JSR         @R2
    00001ACE 0009                   NOP
         intpr.c  1515                                    l_get_token();
    00001AD0 D30D                   MOV.L       L1636+10,R3; _l_get_token
    00001AD2 430B                   JSR         @R3
    00001AD4 0009                   NOP
         intpr.c  1516                                    if              (token_type==TT_COM)            continue;
    00001AD6 60E2                   MOV.L       @R14,R0
    00001AD8 8801                   CMP/EQ      #1,R0
    00001ADA 89C3                   BT          L1519
         intpr.c  1517                                    else if (token_type==TT_LINE_END)       break;
    00001ADC 63E2                   MOV.L       @R14,R3
    00001ADE 2338                   TST         R3,R3
    00001AE0 8B01                   BF          L1637
    00001AE2 A0D3                   BRA         L941
    00001AE4 0009                   NOP
    00001AE6              L1637:                            
    00001AE6 AFBD                   BRA         L1519
    00001AE8 0009                   NOP
    00001AEA              L1517:                            
         intpr.c  1518                            }
         intpr.c  1519                    }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   93


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         intpr.c  1520                    else if (token_type==KEY_EXIT)
    00001AEA 920C                   MOV.W       L1636+8,R2 ; H'0136
    00001AEC 3420                   CMP/EQ      R2,R4
    00001AEE 8901                   BT          L1638
    00001AF0 A0CC                   BRA         L941
    00001AF2 0009                   NOP
    00001AF4              L1638:                            
         intpr.c  1521                    {
         intpr.c  1522                            d_exit();
    00001AF4 D10B                   MOV.L       L1636+38,R1; _d_exit
    00001AF6 410B                   JSR         @R1
    00001AF8 0009                   NOP
    00001AFA A0C7                   BRA         L941
    00001AFC 0009                   NOP
    00001AFE              L1636:                            
    00001AFE 0137                   .DATA.W     H'0137
    00001B00 0138                   .DATA.W     H'0138
    00001B02 0135                   .DATA.W     H'0135
    00001B04 0139                   .DATA.W     H'0139
    00001B06 0136                   .DATA.W     H'0136
    00001B08 <00000000>             .DATA.L     _l_get_token
    00001B0C <00000000>             .DATA.L     _calloc
    00001B10 <00000000>             .DATA.L     _list_array
    00001B14 <00000000>             .DATA.L     _list_push
    00001B18 <00000000>             .DATA.L     __dtoi
    00001B1C <00000000>             .DATA.L     L840
    00001B20 <00000000>             .DATA.L     _merror_msg
    00001B24 <00000000>             .DATA.L     _d_exit
    00001B28              L1491:                            
         intpr.c  1523                    }
         intpr.c  1524            }
         intpr.c  1525            else if(token_type==TT_ID)
    00001B28 6043                   MOV         R4,R0
    00001B2A 8802                   CMP/EQ      #2,R0
    00001B2C 8901                   BT          L1639
    00001B2E A0AA                   BRA         L1530
    00001B30 0009                   NOP
    00001B32              L1639:                            
         intpr.c  1526            {
         intpr.c  1527                    if (str_eq(token,"print"))
    00001B32 D531                   MOV.L       L1640+4,R5 ; L732
    00001B34 D131                   MOV.L       L1640+8,R1 ; __slow_strcmp1
    00001B36 410B                   JSR         @R1
    00001B38 64D3                   MOV         R13,R4
    00001B3A 2008                   TST         R0,R0
    00001B3C 8B2E                   BF          L1531
    00001B3E 6BF3                   MOV         R15,R11
    00001B40 DC31                   MOV.L       L1640+20,R12; _dPrintf
    00001B42 7B04                   ADD         #4,R11
    00001B44 D82E                   MOV.L       L1640+12,R8; _d_ftoa
    00001B46 D92F                   MOV.L       L1640+16,R9; L848
         intpr.c  1528                    {
         intpr.c  1529                            while(1)
    00001B48              L1533:                            
         intpr.c  1530                            {
         intpr.c  1531                                    l_get_token();
    00001B48 D330                   MOV.L       L1640+24,R3; _l_get_token




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   94


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001B4A 430B                   JSR         @R3
    00001B4C 0009                   NOP
         intpr.c  1532                                    if (token_type==TT_STRING)
    00001B4E 60E2                   MOV.L       @R14,R0
    00001B50 8805                   CMP/EQ      #5,R0
    00001B52 8B04                   BF          L1534
         intpr.c  1533                                    {
         intpr.c  1534                                            printf("%s",token);
    00001B54 2FD6                   MOV.L       R13,@-R15
    00001B56 4C0B                   JSR         @R12
    00001B58 2F96                   MOV.L       R9,@-R15
    00001B5A A015                   BRA         L1535
    00001B5C 7F08                   ADD         #8,R15
    00001B5E              L1534:                            
         intpr.c  1535                                    }
         intpr.c  1536                                    else
         intpr.c  1537                                    {
         intpr.c  1538                                            real result;
         intpr.c  1539                                            char buf[128];
         intpr.c  1540                                    
         intpr.c  1541                                            l_put_back();
    00001B5E D22C                   MOV.L       L1640+28,R2; _l_put_back
    00001B60 420B                   JSR         @R2
    00001B62 0009                   NOP
         intpr.c  1542                                            result = calc_check(FALSE,pline);
    00001B64 65A2                   MOV.L       @R10,R5
    00001B66 E400                   MOV         #0,R4
    00001B68 9344                   MOV.W       L1640,R3   ; H'0084
    00001B6A 33FC                   ADD         R15,R3
    00001B6C D229                   MOV.L       L1640+32,R2; _calc_check
    00001B6E 420B                   JSR         @R2
    00001B70 2F36                   MOV.L       R3,@-R15
         intpr.c  1543                                            d_ftoa(result,buf);
    00001B72 9040                   MOV.W       L1640+2,R0 ; H'008C
    00001B74 03FE                   MOV.L       @(R0,R15),R3
    00001B76 2F36                   MOV.L       R3,@-R15
    00001B78 903D                   MOV.W       L1640+2,R0 ; H'008C
    00001B7A 03FE                   MOV.L       @(R0,R15),R3
    00001B7C 2F36                   MOV.L       R3,@-R15
    00001B7E 480B                   JSR         @R8
    00001B80 64B3                   MOV         R11,R4
         intpr.c  1544                                            printf(buf);
    00001B82 4C0B                   JSR         @R12
    00001B84 2FB6                   MOV.L       R11,@-R15
    00001B86 7F10                   ADD         #16,R15
    00001B88              L1535:                            
         intpr.c  1545                                    }
         intpr.c  1546                                    l_get_token();
    00001B88 D320                   MOV.L       L1640+24,R3; _l_get_token
    00001B8A 430B                   JSR         @R3
    00001B8C 0009                   NOP
         intpr.c  1547                                    if (token_type==TT_LINE_END)break;
    00001B8E 62E2                   MOV.L       @R14,R2
    00001B90 2228                   TST         R2,R2
    00001B92 8B01                   BF          L1641
    00001B94 A07A                   BRA         L941
    00001B96 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   95


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001B98              L1641:                            
    00001B98 AFD6                   BRA         L1533
    00001B9A 0009                   NOP
    00001B9C              L1531:                            
         intpr.c  1548                            }//while
         intpr.c  1549                    }//print
         intpr.c  1550                    else if (str_eq(token,"input"))
    00001B9C D51E                   MOV.L       L1640+36,R5; L736
    00001B9E D217                   MOV.L       L1640+8,R2 ; __slow_strcmp1
    00001BA0 420B                   JSR         @R2
    00001BA2 64D3                   MOV         R13,R4
    00001BA4 2008                   TST         R0,R0
    00001BA6 8B1C                   BF          L1539
    00001BA8 D81C                   MOV.L       L1640+40,R8; _dGetLine
    00001BAA 6CF3                   MOV         R15,R12
    00001BAC D91C                   MOV.L       L1640+44,R9; _dConsolePuts
    00001BAE 7C4C                   ADD         #76,R12
    00001BB0 DA1C                   MOV.L       L1640+48,R10; _atof
         intpr.c  1551                    {
         intpr.c  1552                            VAR * v;char buf[64];
         intpr.c  1553                            while(1)
    00001BB2              L1541:                            
         intpr.c  1554                            {
         intpr.c  1555                                    l_get_token();
    00001BB2 D316                   MOV.L       L1640+24,R3; _l_get_token
    00001BB4 430B                   JSR         @R3
    00001BB6 0009                   NOP
         intpr.c  1556                                    v = get_var(token);
    00001BB8 BA1C                   BSR         _get_var
    00001BBA 64D3                   MOV         R13,R4
    00001BBC 6B03                   MOV         R0,R11
         intpr.c  1557                                    gets(64,buf);puts(buf);
    00001BBE 65C3                   MOV         R12,R5
    00001BC0 480B                   JSR         @R8
    00001BC2 E440                   MOV         #64,R4
    00001BC4 490B                   JSR         @R9
    00001BC6 64C3                   MOV         R12,R4
         intpr.c  1558                                    v->value = atof(buf);
    00001BC8 64C3                   MOV         R12,R4
    00001BCA E304                   MOV         #4,R3
    00001BCC 33BC                   ADD         R11,R3
    00001BCE 4A0B                   JSR         @R10
    00001BD0 2F36                   MOV.L       R3,@-R15
         intpr.c  1559                                    l_get_token();
    00001BD2 D20E                   MOV.L       L1640+24,R2; _l_get_token
    00001BD4 420B                   JSR         @R2
    00001BD6 7F04                   ADD         #4,R15
         intpr.c  1560                                    if (token_type==TT_LINE_END)break;
    00001BD8 63E2                   MOV.L       @R14,R3
    00001BDA 2338                   TST         R3,R3
    00001BDC 8956                   BT          L941
    00001BDE AFE8                   BRA         L1541
    00001BE0 0009                   NOP
    00001BE2              L1539:                            
         intpr.c  1561                            }//while
         intpr.c  1562                    }//input
         intpr.c  1563                    else




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   96


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         intpr.c  1564                    {
         intpr.c  1565                            ARRAY * a;
         intpr.c  1566                            VAR * var;
         intpr.c  1567                            var = find_var(token);
    00001BE2 B9D3                   BSR         _find_var
    00001BE4 64D3                   MOV         R13,R4
    00001BE6 6E03                   MOV         R0,R14
         intpr.c  1568                            if (var!=NULL)
    00001BE8 2EE8                   TST         R14,R14
    00001BEA 891D                   BT          L1545
    00001BEC A03F                   BRA         L935
    00001BEE 0009                   NOP
    00001BF0              L1586:                            
         intpr.c  1569                            {
         intpr.c  1570                                    l_get_token(); //skip '='
         intpr.c  1571                                    var->value = calc_check(FALSE,pline);
         intpr.c  1572                                    return EXE_DO;
    00001BF0 A04D                   BRA         L1489
    00001BF2 E000                   MOV         #0,R0
    00001BF4              L1640:                            
    00001BF4 0084                   .DATA.W     H'0084
    00001BF6 008C                   .DATA.W     H'008C
    00001BF8 <00000000>             .DATA.L     L732
    00001BFC <00000000>             .DATA.L     __slow_strcmp1
    00001C00 <00000000>             .DATA.L     _d_ftoa
    00001C04 <00000000>             .DATA.L     L848
    00001C08 <00000000>             .DATA.L     _dPrintf
    00001C0C <00000000>             .DATA.L     _l_get_token
    00001C10 <00000000>             .DATA.L     _l_put_back
    00001C14 <00000000>             .DATA.L     _calc_check
    00001C18 <00000000>             .DATA.L     L736
    00001C1C <00000000>             .DATA.L     _dGetLine
    00001C20 <00000000>             .DATA.L     _dConsolePuts
    00001C24 <00000000>             .DATA.L     _atof
    00001C28              L1545:                            
         intpr.c  1573                            }
         intpr.c  1574                            a = find_array(token);
    00001C28 B9F7                   BSR         _find_array
    00001C2A 64D3                   MOV         R13,R4
    00001C2C 6E03                   MOV         R0,R14
         intpr.c  1575                            if(a!=NULL)
    00001C2E 2EE8                   TST         R14,R14
    00001C30 891A                   BT          L1546
         intpr.c  1576                            {
         intpr.c  1577                                    int index;
         intpr.c  1578                                    l_get_token();//skip (
    00001C32 D341                   MOV.L       L1642+2,R3 ; _l_get_token
    00001C34 430B                   JSR         @R3
    00001C36 0009                   NOP
         intpr.c  1579                                    index = (int)calc_check(FALSE,pline);
    00001C38 D240                   MOV.L       L1642+6,R2 ; _calc_check
    00001C3A 7FF8                   ADD         #-8,R15
    00001C3C 65A2                   MOV.L       @R10,R5
    00001C3E E400                   MOV         #0,R4
    00001C40 420B                   JSR         @R2
    00001C42 2FF6                   MOV.L       R15,@-R15
    00001C44 D33E                   MOV.L       L1642+10,R3; __dtoi




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   97


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001C46 430B                   JSR         @R3
    00001C48 7F04                   ADD         #4,R15
         intpr.c  1580                                    // delete this line,calc_check call skip ( automatically
         intpr.c  1581                                    //l_get_token();//skip )
         intpr.c  1582                                    l_get_token();// skip =
    00001C4A D33B                   MOV.L       L1642+2,R3 ; _l_get_token
    00001C4C 430B                   JSR         @R3
    00001C4E 2F02                   MOV.L       R0,@R15
         intpr.c  1583                                    assign_element(a,index,calc_check(FALSE,pline));
    00001C50 D23A                   MOV.L       L1642+6,R2 ; _calc_check
    00001C52 7FF8                   ADD         #-8,R15
    00001C54 65A2                   MOV.L       @R10,R5
    00001C56 E400                   MOV         #0,R4
    00001C58 420B                   JSR         @R2
    00001C5A 2FF6                   MOV.L       R15,@-R15
    00001C5C 7F04                   ADD         #4,R15
    00001C5E 55F2                   MOV.L       @(8,R15),R5
    00001C60 B9F5                   BSR         _assign_element
    00001C62 64E3                   MOV         R14,R4
    00001C64 A012                   BRA         L941
    00001C66 7F08                   ADD         #8,R15
    00001C68              L1546:                            
         intpr.c  1584                                    return EXE_DO;
         intpr.c  1585                            }
         intpr.c  1586                            var = create_var(token);
    00001C68 B9AA                   BSR         _create_var
    00001C6A 64D3                   MOV         R13,R4
    00001C6C 6E03                   MOV         R0,R14
    00001C6E              L935:
         intpr.c  1587                            l_get_token(); //skip '='
    00001C6E D332                   MOV.L       L1642+2,R3 ; _l_get_token
    00001C70 430B                   JSR         @R3
    00001C72 0009                   NOP
         intpr.c  1588                            var->value = calc_check(FALSE,pline);
    00001C74 65A2                   MOV.L       @R10,R5
    00001C76 E400                   MOV         #0,R4
    00001C78 D330                   MOV.L       L1642+6,R3 ; _calc_check
    00001C7A E204                   MOV         #4,R2
    00001C7C 32EC                   ADD         R14,R2
    00001C7E 430B                   JSR         @R3
    00001C80 2F26                   MOV.L       R2,@-R15
    00001C82 A003                   BRA         L941
    00001C84 7F04                   ADD         #4,R15
    00001C86              L1530:                            
         intpr.c  1589                            return EXE_DO;
         intpr.c  1590                    }//assign
         intpr.c  1591            }// TT_ID
         intpr.c  1592            else
         intpr.c  1593            {
         intpr.c  1594                    merror_illegal_token();
    00001C86 D22F                   MOV.L       L1642+14,R2; _merror_illegal_token
    00001C88 420B                   JSR         @R2
    00001C8A 0009                   NOP
    00001C8C              L941:
         intpr.c  1595            }
         intpr.c  1596            return EXE_DO;
    00001C8C E001                   MOV         #1,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   98


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         intpr.c  1597    }
    00001C8E              L1489:                            
    00001C8E 9152                   MOV.W       L1642,R1   ; H'008C
    00001C90 3F1C                   ADD         R1,R15
    00001C92 4F26                   LDS.L       @R15+,PR
    00001C94 68F6                   MOV.L       @R15+,R8
    00001C96 69F6                   MOV.L       @R15+,R9
    00001C98 6AF6                   MOV.L       @R15+,R10
    00001C9A 6BF6                   MOV.L       @R15+,R11
    00001C9C 6CF6                   MOV.L       @R15+,R12
    00001C9E 6DF6                   MOV.L       @R15+,R13
    00001CA0 000B                   RTS
    00001CA2 6EF6                   MOV.L       @R15+,R14
         intpr.c  1598    
         intpr.c  1599    int i_call_sub (SOURCE_FILE * sf,const char * sub_name)
    00001CA4              _i_call_sub:                     ; function: i_call_sub
                                                           ; frame size=28
    00001CA4 2FE6                   MOV.L       R14,@-R15
    00001CA6 6E43                   MOV         R4,R14
    00001CA8 2FD6                   MOV.L       R13,@-R15
    00001CAA 2FC6                   MOV.L       R12,@-R15
    00001CAC 4F22                   STS.L       PR,@-R15
    00001CAE 7FFC                   ADD         #-4,R15
    00001CB0 2F52                   MOV.L       R5,@R15
         intpr.c  1600    {
         intpr.c  1601            USER_SUB *      sub;
         intpr.c  1602            long            pre_pos;
         intpr.c  1603            int                     todo = TRUE,r;
         intpr.c  1604    
         intpr.c  1605            sub = i_find_sub(sub_name);
    00001CB2 BA0C                   BSR         _i_find_sub
    00001CB4 6453                   MOV         R5,R4
    00001CB6 6D03                   MOV         R0,R13
         intpr.c  1606            if (sub==NULL)
    00001CB8 2DD8                   TST         R13,R13
    00001CBA 8B06                   BF          L1548
         intpr.c  1607            {
         intpr.c  1608                    merror_msg_only("function '%s' not found",sub_name);
    00001CBC 63F2                   MOV.L       @R15,R3
    00001CBE 2F36                   MOV.L       R3,@-R15
    00001CC0 D221                   MOV.L       L1642+18,R2; L871
    00001CC2 D322                   MOV.L       L1642+22,R3; _merror_msg_only
    00001CC4 430B                   JSR         @R3
    00001CC6 2F26                   MOV.L       R2,@-R15
    00001CC8 7F08                   ADD         #8,R15
    00001CCA              L1548:                            
         intpr.c  1609            }
         intpr.c  1610            pre_pos = sf->pos;
    00001CCA 61E2                   MOV.L       @R14,R1
    00001CCC DC20                   MOV.L       L1642+26,R12; L873
    00001CCE 2F12                   MOV.L       R1,@R15
         intpr.c  1611            // locate 'main'
         intpr.c  1612            sf->pos = sub->pos;
    00001CD0 53D1                   MOV.L       @(4,R13),R3
    00001CD2 2E32                   MOV.L       R3,@R14
    00001CD4 DD1F                   MOV.L       L1642+30,R13; _merror_msg
         intpr.c  1613    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE   99


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         intpr.c  1614            while (TRUE)
    00001CD6              L1550:                            
         intpr.c  1615            {
         intpr.c  1616                    r = i_execute_line(sf,todo);
    00001CD6 E501                   MOV         #1,R5
    00001CD8 BE30                   BSR         _i_execute_line
    00001CDA 64E3                   MOV         R14,R4
    00001CDC 6403                   MOV         R0,R4
         intpr.c  1617                    if (r==EXE_END || r==EXE_RETURN) break;
    00001CDE 2448                   TST         R4,R4
    00001CE0 8909                   BT          L1553
    00001CE2 6043                   MOV         R4,R0
    00001CE4 8807                   CMP/EQ      #7,R0
    00001CE6 8906                   BT          L1553
         intpr.c  1618                    else if (r==EXE_BREAK) merror_msg("No loop to jump out!");
    00001CE8 6043                   MOV         R4,R0
    00001CEA 8806                   CMP/EQ      #6,R0
    00001CEC 8BF3                   BF          L1550
    00001CEE 4D0B                   JSR         @R13
    00001CF0 2FC6                   MOV.L       R12,@-R15
    00001CF2 AFF0                   BRA         L1550
    00001CF4 7F04                   ADD         #4,R15
    00001CF6              L1553:                            
         intpr.c  1619            }
         intpr.c  1620    
         intpr.c  1621            sf->pos = pre_pos;
         intpr.c  1622    
         intpr.c  1623            return EXE_DO;
    00001CF6 E001                   MOV         #1,R0
    00001CF8 63F2                   MOV.L       @R15,R3
    00001CFA 2E32                   MOV.L       R3,@R14
         intpr.c  1624    }
    00001CFC 7F04                   ADD         #4,R15
    00001CFE 4F26                   LDS.L       @R15+,PR
    00001D00 6CF6                   MOV.L       @R15+,R12
    00001D02 6DF6                   MOV.L       @R15+,R13
    00001D04 000B                   RTS
    00001D06 6EF6                   MOV.L       @R15+,R14
         intpr.c  1625    
         intpr.c  1626    void i_execute(SOURCE_FILE * sf)
    00001D08              _i_execute:                      ; function: i_execute
                                                           ; frame size=8
    00001D08 2FE6                   MOV.L       R14,@-R15
    00001D0A 4F22                   STS.L       PR,@-R15
         intpr.c  1627    {
         intpr.c  1628            // pre scan
         intpr.c  1629            l_scan(sf);
    00001D0C BA0E                   BSR         _l_scan
    00001D0E 6E43                   MOV         R4,R14
         intpr.c  1630            // call main
         intpr.c  1631            i_call_sub(sf,"main");
    00001D10 D511                   MOV.L       L1642+34,R5; L876
    00001D12 BFC7                   BSR         _i_call_sub
    00001D14 64E3                   MOV         R14,R4
         intpr.c  1632            // clean up
         intpr.c  1633            list_destory(&list_var);
    00001D16 D411                   MOV.L       L1642+38,R4; _list_var




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE  100


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001D18 D311                   MOV.L       L1642+42,R3; _list_destory
    00001D1A 430B                   JSR         @R3
    00001D1C 0009                   NOP
         intpr.c  1634            list_destory(&list_sub);
    00001D1E D411                   MOV.L       L1642+46,R4; _list_sub
    00001D20 D20F                   MOV.L       L1642+42,R2; _list_destory
    00001D22 420B                   JSR         @R2
    00001D24 0009                   NOP
         intpr.c  1635            Bfile_CloseFile(sf->file);
    00001D26 D310                   MOV.L       L1642+50,R3; _Bfile_CloseFile
    00001D28 430B                   JSR         @R3
    00001D2A 54E2                   MOV.L       @(8,R14),R4
         intpr.c  1636            free(sf);
    00001D2C 4F26                   LDS.L       @R15+,PR
    00001D2E 64E3                   MOV         R14,R4
    00001D30 D20E                   MOV.L       L1642+54,R2; _free
    00001D32 422B                   JMP         @R2
    00001D34 6EF6                   MOV.L       @R15+,R14
    00001D36              L1642:                            
    00001D36 008C                   .DATA.W     H'008C
    00001D38 <00000000>             .DATA.L     _l_get_token
    00001D3C <00000000>             .DATA.L     _calc_check
    00001D40 <00000000>             .DATA.L     __dtoi
    00001D44 <00000000>             .DATA.L     _merror_illegal_token
    00001D48 <00000000>             .DATA.L     L871
    00001D4C <00000000>             .DATA.L     _merror_msg_only
    00001D50 <00000000>             .DATA.L     L873
    00001D54 <00000000>             .DATA.L     _merror_msg
    00001D58 <00000000>             .DATA.L     L876
    00001D5C <00000000>             .DATA.L     _list_var
    00001D60 <00000000>             .DATA.L     _list_destory
    00001D64 <00000000>             .DATA.L     _list_sub
    00001D68 <00000000>             .DATA.L     _Bfile_CloseFile
    00001D6C <00000000>             .DATA.L     _free
         intpr.c  1637    }
D   00000000              _pline:                          ; static: pline
    00000000 00000000               .DATA.L     H'00000000
    00000004              __$RESERVED_WORDS:               ; static: RESERVED_WORDS
    00000004 00000064               .DATA.L     H'00000064
    00000008 <00000000>             .DATA.L     L403
    0000000C 0000000100             .DATA.L     H'00000001,H'00000065
             000065       
    00000014 <00000000>             .DATA.L     L404
    00000018 0000000100             .DATA.L     H'00000001,H'00000066
             000066       
    00000020 <00000000>             .DATA.L     L405
    00000024 0000000100             .DATA.L     H'00000001,H'00000067
             000067       
    0000002C <00000000>             .DATA.L     L406
    00000030 0000000100             .DATA.L     H'00000001,H'00000068
             000068       
    00000038 <00000000>             .DATA.L     L407
    0000003C 0000000100             .DATA.L     H'00000001,H'00000069
             000069       
    00000044 <00000000>             .DATA.L     L408
    00000048 0000000100             .DATA.L     H'00000001,H'0000006A
             00006A       




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE  101


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000050 <00000000>             .DATA.L     L409
    00000054 0000000100             .DATA.L     H'00000001,H'0000006B
             00006B       
    0000005C <00000000>             .DATA.L     L410
    00000060 0000000100             .DATA.L     H'00000001,H'0000006C
             00006C       
    00000068 <00000000>             .DATA.L     L411
    0000006C 0000000200             .DATA.L     H'00000002,H'00000000
             000000       
    00000074 00000000               .DATA.L     H'00000000
    00000078 00000000               .DATA.L     H'00000000
    0000007C              __$RESERVED_WORDS_OPR:           ; static: RESERVED_WORDS_OPR
    0000007C 000000D4               .DATA.L     H'000000D4
    00000080 <00000000>             .DATA.L     L413
    00000084 000000D5               .DATA.L     H'000000D5
    00000088 <00000000>             .DATA.L     L414
    0000008C 000000D7               .DATA.L     H'000000D7
    00000090 <00000000>             .DATA.L     L415
    00000094 00000000               .DATA.L     H'00000000
    00000098 00000000               .DATA.L     H'00000000
    0000009C              __$KEY_WORDS:                    ; static: KEY_WORDS
    0000009C 0000012C               .DATA.L     H'0000012C
    000000A0 <00000000>             .DATA.L     L426
    000000A4 0000012D               .DATA.L     H'0000012D
    000000A8 <00000000>             .DATA.L     L427
    000000AC 0000012E               .DATA.L     H'0000012E
    000000B0 <00000000>             .DATA.L     L428
    000000B4 0000012F               .DATA.L     H'0000012F
    000000B8 <00000000>             .DATA.L     L429
    000000BC 00000130               .DATA.L     H'00000130
    000000C0 <00000000>             .DATA.L     L430
    000000C4 00000131               .DATA.L     H'00000131
    000000C8 <00000000>             .DATA.L     L431
    000000CC 00000132               .DATA.L     H'00000132
    000000D0 <00000000>             .DATA.L     L432
    000000D4 00000133               .DATA.L     H'00000133
    000000D8 <00000000>             .DATA.L     L433
    000000DC 00000134               .DATA.L     H'00000134
    000000E0 <00000000>             .DATA.L     L434
    000000E4 0000013A               .DATA.L     H'0000013A
    000000E8 <00000000>             .DATA.L     L435
    000000EC 0000013B               .DATA.L     H'0000013B
    000000F0 <00000000>             .DATA.L     L436
    000000F4 0000013C               .DATA.L     H'0000013C
    000000F8 <00000000>             .DATA.L     L437
    000000FC 00000135               .DATA.L     H'00000135
    00000100 <00000000>             .DATA.L     L438
    00000104 00000136               .DATA.L     H'00000136
    00000108 <00000000>             .DATA.L     L439
    0000010C 00000137               .DATA.L     H'00000137
    00000110 <00000000>             .DATA.L     L440
    00000114 00000138               .DATA.L     H'00000138
    00000118 <00000000>             .DATA.L     L441
    0000011C 00000139               .DATA.L     H'00000139
    00000120 <00000000>             .DATA.L     L442
    00000124              _OPR_TYPE_STR:                   ; static: OPR_TYPE_STR
    00000124 <00000000>             .DATA.L     L485,L486,L487,L488,L489,L490,L491,L492,L493,L494,L495,L413,L414,L487,L415




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE  102


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
    00000160              _TYPE_STR:                       ; static: TYPE_STR
    00000160 <00000000>             .DATA.L     L497,L498,L499,L500,L501,L502,L503,L504
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
    00000180              _BUILT_IN_FUNC:                  ; static: BUILT_IN_FUNC
    00000180 <00000000>             .DATA.L     _func_sin,_func_cos,_func_tan,_func_log,_func_exp,_func_abs,_func_ceil,_func_floor,
             <00000000> +                       _func_fmod
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
    000001A4              _BLOCK_NAME:                     ; static: BLOCK_NAME
    000001A4 <00000000>             .DATA.L     L428,L431,L432,L433,L426,L435
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
             <00000000>   
C   00000000              L477:
    00000000 696C6C6567             .SDATA      "illegal escape character"
             616C206573   
             6361706520   
             6368617261   
             63746572     
    00000018 00                     .DATA.B     H'00
    00000019 00000001               .RES.B      1
    0000001A 00000002               .RES.W      1
    0000001C              L479:
    0000001C 696C6C6567             .SDATA      "illegal char:'%c'"
             616C206368   
             61723A2725   
             6327         
    0000002D 00                     .DATA.B     H'00
    0000002E 00000002               .RES.W      1
    00000030              L510:




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE  103


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000030 696C6C6567             .SDATA      "illegal token:'%s','%s' expected"
             616C20746F   
             6B656E3A27   
             2573272C27   
             2573272065   
             7870656374   
             6564         
    00000050 00                     .DATA.B     H'00
    00000051 00000001               .RES.B      1
    00000052 00000002               .RES.W      1
    00000054              L512:
    00000054 696C6C6567             .SDATA      "illegal token:'%s',%s expected"
             616C20746F   
             6B656E3A27   
             2573272C25   
             7320657870   
             6563746564   
    00000072 00                     .DATA.B     H'00
    00000073 00000001               .RES.B      1
    00000074              L514:
    00000074 696C6C6567             .SDATA      "illegal token:'%s',[%d] expected"
             616C20746F   
             6B656E3A27   
             2573272C5B   
             25645D2065   
             7870656374   
             6564         
    00000094 00                     .DATA.B     H'00
    00000095 00000001               .RES.B      1
    00000096 00000002               .RES.W      1
    00000098              L533:
    00000098 29                     .SDATA      ")"
    00000099 00                     .DATA.B     H'00
    0000009A 00000002               .RES.W      1
    0000009C              L537:
    0000009C 28                     .SDATA      "("
    0000009D 00                     .DATA.B     H'00
    0000009E 00000002               .RES.W      1
    000000A0              L539:
    000000A0 2C                     .SDATA      ","
    000000A1 00                     .DATA.B     H'00
    000000A2 00000002               .RES.W      1
    000000A4              _PRIOROTY:                       ; static: PRIOROTY
    000000A4 0000000F00             .DATA.L     H'0000000F,H'00000005,H'00000005,H'00000007,H'00000007,H'00000008,H'00000004,
             0000050000 +                       H'00000004,H'00000004,H'00000004,H'00000004,H'00000004,H'00000002,H'00000002,
             0005000000 +                       H'00000006,H'00000003
             0700000007   
             0000000800   
             0000040000   
             0004000000   
             0400000004   
             0000000400   
             0000040000   
             0002000000   
             0200000006   
             00000003     
    000000E4              L582:




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE  104


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000E4 756E6B6E6F             .SDATA      "unknown operator [%d]!"
             776E206F70   
             657261746F   
             72205B2564   
             5D21         
    000000FA 00                     .DATA.B     H'00
    000000FB 00000001               .RES.B      1
    000000FC              L602:
    000000FC 696C6C6567             .SDATA      "illegal expr"
             616C206578   
             7072         
    00000108 00                     .DATA.B     H'00
    00000109 00000001               .RES.B      1
    0000010A 00000002               .RES.W      1
    0000010C              L612:
    0000010C 556E726563             .SDATA      "Unrecognized identifier '%s'"
             6F676E697A   
             6564206964   
             656E746966   
             6965722027   
             257327       
    00000128 00                     .DATA.B     H'00
    00000129 00000001               .RES.B      1
    0000012A 00000002               .RES.W      1
    0000012C              L635:
    0000012C 63616C633A             .SDATA      "calc:unknown error!"
             756E6B6E6F   
             776E206572   
             726F7221     
    0000013F 00                     .DATA.B     H'00
    00000140              L687:
    00000140 4163636573             .SDATA      "Access array '%s' over the border"
             7320617272   
             6179202725   
             7327206F76   
             6572207468   
             6520626F72   
             646572       
    00000161 00                     .DATA.B     H'00
    00000162 00000002               .RES.W      1
    00000164              L710:
    00000164 7375622070             .SDATA      "sub procedure can not be nested"
             726F636564   
             7572652063   
             616E206E6F   
             7420626520   
             6E65737465   
             64           
    00000183 00                     .DATA.B     H'00
    00000184              L718:
    00000184 746F                   .SDATA      "to"
    00000186 00                     .DATA.B     H'00
    00000187 00000001               .RES.B      1
    00000188              L720:
    00000188 73746570               .SDATA      "step"
    0000018C 00                     .DATA.B     H'00
    0000018D 00000001               .RES.B      1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE  105


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000018E 00000002               .RES.W      1
    00000190              L732:
    00000190 7072696E74             .SDATA      "print"
    00000195 00                     .DATA.B     H'00
    00000196 00000002               .RES.W      1
    00000198              L736:
    00000198 696E707574             .SDATA      "input"
    0000019D 00                     .DATA.B     H'00
    0000019E 00000002               .RES.W      1
    000001A0              L742:
    000001A0 696E636F6D             .SDATA      "incompleted '%s' block!"
             706C657465   
             6420272573   
             2720626C6F   
             636B21       
    000001B7 00                     .DATA.B     H'00
    000001B8              L840:
    000001B8 696C6C6567             .SDATA      "illegal array size %d!"
             616C206172   
             7261792073   
             697A652025   
             6421         
    000001CE 00                     .DATA.B     H'00
    000001CF 00000001               .RES.B      1
    000001D0              L848:
    000001D0 2573                   .SDATA      "%s"
    000001D2 00                     .DATA.B     H'00
    000001D3 00000001               .RES.B      1
    000001D4              L871:
    000001D4 66756E6374             .SDATA      "function '%s' not found"
             696F6E2027   
             257327206E   
             6F7420666F   
             756E64       
    000001EB 00                     .DATA.B     H'00
    000001EC              L873:
    000001EC 4E6F206C6F             .SDATA      "No loop to jump out!"
             6F7020746F   
             206A756D70   
             206F757421   
    00000200 00                     .DATA.B     H'00
    00000201 00000001               .RES.B      1
    00000202 00000002               .RES.W      1
    00000204              L876:
    00000204 6D61696E               .SDATA      "main"
    00000208 00                     .DATA.B     H'00
    00000209 00000001               .RES.B      1
    0000020A 00000002               .RES.W      1
    0000020C              L403:
    0000020C 73696E                 .SDATA      "sin"
    0000020F 00                     .DATA.B     H'00
    00000210              L404:
    00000210 636F73                 .SDATA      "cos"
    00000213 00                     .DATA.B     H'00
    00000214              L405:
    00000214 74616E                 .SDATA      "tan"
    00000217 00                     .DATA.B     H'00




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE  106


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000218              L406:
    00000218 6C6E                   .SDATA      "ln"
    0000021A 00                     .DATA.B     H'00
    0000021B 00000001               .RES.B      1
    0000021C              L407:
    0000021C 657870                 .SDATA      "exp"
    0000021F 00                     .DATA.B     H'00
    00000220              L408:
    00000220 616273                 .SDATA      "abs"
    00000223 00                     .DATA.B     H'00
    00000224              L409:
    00000224 6365696C               .SDATA      "ceil"
    00000228 00                     .DATA.B     H'00
    00000229 00000001               .RES.B      1
    0000022A 00000002               .RES.W      1
    0000022C              L410:
    0000022C 666C6F6F72             .SDATA      "floor"
    00000231 00                     .DATA.B     H'00
    00000232 00000002               .RES.W      1
    00000234              L411:
    00000234 6D6F64                 .SDATA      "mod"
    00000237 00                     .DATA.B     H'00
    00000238              L413:
    00000238 616E64                 .SDATA      "and"
    0000023B 00                     .DATA.B     H'00
    0000023C              L414:
    0000023C 6F72                   .SDATA      "or"
    0000023E 00                     .DATA.B     H'00
    0000023F 00000001               .RES.B      1
    00000240              L415:
    00000240 6E6F74                 .SDATA      "not"
    00000243 00                     .DATA.B     H'00
    00000244              L426:
    00000244 737562                 .SDATA      "sub"
    00000247 00                     .DATA.B     H'00
    00000248              L427:
    00000248 656E64                 .SDATA      "end"
    0000024B 00                     .DATA.B     H'00
    0000024C              L428:
    0000024C 6966                   .SDATA      "if"
    0000024E 00                     .DATA.B     H'00
    0000024F 00000001               .RES.B      1
    00000250              L429:
    00000250 656C736569             .SDATA      "elseif"
             66           
    00000256 00                     .DATA.B     H'00
    00000257 00000001               .RES.B      1
    00000258              L430:
    00000258 656C7365               .SDATA      "else"
    0000025C 00                     .DATA.B     H'00
    0000025D 00000001               .RES.B      1
    0000025E 00000002               .RES.W      1
    00000260              L431:
    00000260 7768696C65             .SDATA      "while"
    00000265 00                     .DATA.B     H'00
    00000266 00000002               .RES.W      1
    00000268              L432:




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE  107


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000268 666F72                 .SDATA      "for"
    0000026B 00                     .DATA.B     H'00
    0000026C              L433:
    0000026C 63617365               .SDATA      "case"
    00000270 00                     .DATA.B     H'00
    00000271 00000001               .RES.B      1
    00000272 00000002               .RES.W      1
    00000274              L434:
    00000274 7768656E               .SDATA      "when"
    00000278 00                     .DATA.B     H'00
    00000279 00000001               .RES.B      1
    0000027A 00000002               .RES.W      1
    0000027C              L435:
    0000027C 7265706561             .SDATA      "repeat"
             74           
    00000282 00                     .DATA.B     H'00
    00000283 00000001               .RES.B      1
    00000284              L436:
    00000284 756E74696C             .SDATA      "until"
    00000289 00                     .DATA.B     H'00
    0000028A 00000002               .RES.W      1
    0000028C              L437:
    0000028C 766172                 .SDATA      "var"
    0000028F 00                     .DATA.B     H'00
    00000290              L438:
    00000290 676F737562             .SDATA      "gosub"
    00000295 00                     .DATA.B     H'00
    00000296 00000002               .RES.W      1
    00000298              L439:
    00000298 65786974               .SDATA      "exit"
    0000029C 00                     .DATA.B     H'00
    0000029D 00000001               .RES.B      1
    0000029E 00000002               .RES.W      1
    000002A0              L440:
    000002A0 627265616B             .SDATA      "break"
    000002A5 00                     .DATA.B     H'00
    000002A6 00000002               .RES.W      1
    000002A8              L441:
    000002A8 7265747572             .SDATA      "return"
             6E           
    000002AE 00                     .DATA.B     H'00
    000002AF 00000001               .RES.B      1
    000002B0              L442:
    000002B0 64696D                 .SDATA      "dim"
    000002B3 00                     .DATA.B     H'00
    000002B4              L485:
    000002B4 2E                     .SDATA      "."
    000002B5 00                     .DATA.B     H'00
    000002B6 00000002               .RES.W      1
    000002B8              L486:
    000002B8 2B                     .SDATA      "+"
    000002B9 00                     .DATA.B     H'00
    000002BA 00000002               .RES.W      1
    000002BC              L487:
    000002BC 2D                     .SDATA      "-"
    000002BD 00                     .DATA.B     H'00
    000002BE 00000002               .RES.W      1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE  108


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002C0              L488:
    000002C0 2A                     .SDATA      "*"
    000002C1 00                     .DATA.B     H'00
    000002C2 00000002               .RES.W      1
    000002C4              L489:
    000002C4 2F                     .SDATA      "/"
    000002C5 00                     .DATA.B     H'00
    000002C6 00000002               .RES.W      1
    000002C8              L490:
    000002C8 5E                     .SDATA      "^"
    000002C9 00                     .DATA.B     H'00
    000002CA 00000002               .RES.W      1
    000002CC              L491:
    000002CC 3E3D                   .SDATA      ">="
    000002CE 00                     .DATA.B     H'00
    000002CF 00000001               .RES.B      1
    000002D0              L492:
    000002D0 3E                     .SDATA      ">"
    000002D1 00                     .DATA.B     H'00
    000002D2 00000002               .RES.W      1
    000002D4              L493:
    000002D4 3C3D                   .SDATA      "<="
    000002D6 00                     .DATA.B     H'00
    000002D7 00000001               .RES.B      1
    000002D8              L494:
    000002D8 3C                     .SDATA      "<"
    000002D9 00                     .DATA.B     H'00
    000002DA 00000002               .RES.W      1
    000002DC              L495:
    000002DC 3D                     .SDATA      "="
    000002DD 00                     .DATA.B     H'00
    000002DE 00000002               .RES.W      1
    000002E0              L497:
    000002E0 454F46                 .SDATA      "EOF"
    000002E3 00                     .DATA.B     H'00
    000002E4              L498:
    000002E4 636F6D6D61             .SDATA      "comma"
    000002E9 00                     .DATA.B     H'00
    000002EA 00000002               .RES.W      1
    000002EC              L499:
    000002EC 6964656E74             .SDATA      "identifier"
             6966696572   
    000002F6 00                     .DATA.B     H'00
    000002F7 00000001               .RES.B      1
    000002F8              L500:
    000002F8 696E746567             .SDATA      "integer"
             6572         
    000002FF 00                     .DATA.B     H'00
    00000300              L501:
    00000300 666C6F6174             .SDATA      "float"
    00000305 00                     .DATA.B     H'00
    00000306 00000002               .RES.W      1
    00000308              L502:
    00000308 737472696E             .SDATA      "string"
             67           
    0000030E 00                     .DATA.B     H'00
    0000030F 00000001               .RES.B      1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE  109


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000310              L503:
    00000310 272827                 .SDATA      "'('"
    00000313 00                     .DATA.B     H'00
    00000314              L504:
    00000314 272927                 .SDATA      "')'"
    00000317 00                     .DATA.B     H'00
B   00000000              _line:                           ; static: line
    00000000 00000080               .RES.B      128
    00000080              _token:                          ; static: token
    00000080 00000080               .RES.B      128
    00000100              _token_type:                     ; static: token_type
    00000100 00000004               .RES.L      1
    00000104              _token_ext:                      ; static: token_ext
    00000104 00000004               .RES.L      1
    00000108              _list_var:                       ; static: list_var
    00000108 0000000C               .RES.L      3
    00000114              _list_array:                     ; static: list_array
    00000114 0000000C               .RES.L      3
    00000120              _list_sub:                       ; static: list_sub
    00000120 0000000C               .RES.L      3
    0000012C              _BLOCK:                          ; static: BLOCK
    0000012C 00000004               .RES.L      1







































SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 29-Jul-2013 08:46:08  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:     1637



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               00001D70 Byte(s)
CONSTANT SECTION (C):                               00000318 Byte(s)
DATA     SECTION (D):                               000001BC Byte(s)
BSS      SECTION (B):                               00000130 Byte(s)

 TOTAL PROGRAM SIZE: 00002374 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           47
NUMBER OF EXTERNAL DEFINITION SYMBOLS:          51
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:           499






























*** COMMAND PARAMETER ***


  -subcommand=C:\Users\ADMINI~1\AppData\Local\Temp\hmk7ED.tmp 

